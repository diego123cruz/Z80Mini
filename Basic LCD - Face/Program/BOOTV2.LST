0001   0000             ; Diego Cruz - Nov 2022
0002   0000             ; 
0003   0000             ; bootV2: 
0004   0000             ;         - CPU Z80@4Mhz
0005   0000             ;         - Lcd Grafico 128x64
0006   0000             ;         - Keyboard 40 keys + Shift
0007   0000             ;         - Ram 32k
0008   0000             ;         - Rom 32k
0009   0000             ;
0010   0000             ;         - Ports:
0011   0000             ;               - Keyboard: 40H
0012   0000             ;               - Display:  70H (LCDCTRL), 71H (LCDDATA)
0013   0000             ;               - User IN/OUT: C0H
0014   0000             ;
0015   0000             ; -----------------------------------------------------------------------------
0016   0000             LCDCTRL	    .EQU    70H
0017   0000             LCDDATA     .EQU    71H
0018   0000             KEY_IN      .EQU    40H
0019   0000             KEY_OUT     .EQU    40H
0020   0000             
0021   0000             CTRLC       .EQU    03H             ; Control "C"
0022   0000             CTRLG       .EQU    07H             ; Control "G"
0023   0000             BKSP        .EQU    08H             ; Back space
0024   0000             LF          .EQU    0AH             ; Line feed
0025   0000             VT          .equ    0BH             ; 
0026   0000             CS          .EQU    0CH             ; Clear screen
0027   0000             CR          .EQU    0DH             ; Carriage return [Enter]
0028   0000             CTRLO       .EQU    0FH             ; Control "O"
0029   0000             CTRLQ	    .EQU	11H		        ; Control "Q"
0030   0000             CTRLR       .EQU    12H             ; Control "R"
0031   0000             CTRLS       .EQU    13H             ; Control "S"
0032   0000             CTRLU       .EQU    15H             ; Control "U"
0033   0000             ESC         .EQU    1BH             ; Escape
0034   0000             DEL         .EQU    7FH             ; Delete
0035   0000             
0036   0000             BASIC       .EQU    $6000           ; inicio basic 6000H, workspace 9000H
0037   0000             ;
0038   0000             ; BAUD RATE CONSTANTS
0039   0000             ;
0040   0000             B300:	.EQU	0220H	;300 BAUD
0041   0000             B1200:	.EQU	0080H	;1200 BAUD
0042   0000             B2400:	.EQU	003FH	;2400 BAUD
0043   0000             B4800:	.EQU	001BH	;4800 BAUD
0044   0000             B9600:	.EQU	000BH	;9600 BAUD
0045   0000             
0046   0000             BAUD:	 .EQU	0FFC0H	 ;BAUD RATE
0047   0000             PUTCH:   .EQU   0FFAAH   ;OUTPUT A CHARACTER TO SERIAL
0048   0000             GETCH:   .EQU   0FFACH   ;WAIT FOR A CHARACTER FROM SERIAL
0049   0000             
0050   0000             SERIAL_RX_PORT:          .EQU $C0             ; Serial RX port - bit7
0051   0000             SERIAL_TX_PORT:          .EQU $C0             ; Serial TX Port - bit6
0052   0000             
0053   0000             
0054   0000             ; LCD TEXT MODE
0055   0000             LCD_LINE1   .EQU    80H
0056   0000             LCD_LINE2   .EQU    90H
0057   0000             LCD_LINE3   .EQU    88H
0058   0000             LCD_LINE4   .EQU    98H
0059   0000             
0060   0000             
0061   0000             ; RAM MAP
0062   0000             
0063   0000             
0064   0000             
0065   0000             LCD_CHAR            .EQU    $8000   ; 1 byte char ex: 'A'
0066   0000             LCD_CHAR_POINT      .EQU    $8001   ; 2 bytes ponteiro para o mapa de caracteres
0067   0000             LCD_TXT_X           .EQU    $8003   ; 1 byte  0-20 (21 col)
0068   0000             LCD_TXT_Y           .EQU    $8004   ; 1 byte  0-7  (8 row)
0069   0000             LCD_BYTE_INDEX      .EQU    $8005   ; 2 bytes pointer pixel(8)
0070   0000             LCD_BIT_INDEX       .EQU    $8007   ; 1 byte pointer pixel(1)
0071   0000             LCD_TXT_X_TMP       .EQU    $8008   ; 2 bytes = LCD_TXT_X * 6
0072   0000             LCD_TXT_Y_TMP       .EQU    $800A   ; 2 bytes = LCD_TXT_Y * 128
0073   0000             LCD_CHAR_H          .EQU    $800C   ; 1 byte altura do char
0074   0000             LCD_CHAR_W          .EQU    $800D   ; 1 byte largura do char
0075   0000             LCD_TMP_POINT       .EQU    $800E   ; 2 bytes ponteiro do pixel altural do print
0076   0000             
0077   0000             
0078   0000             DISPLAY             .EQU    $8500
0079   0000             
0080   0000             LCD_TEMP        .EQU    $8110
0081   0000             LCD_COOX        .EQU    $8102 ; 1 byte, local onde vai printar
0082   0000             LCD_COOY        .EQU    $8103 ; 1 byte
0083   0000             LCD_PRINT_H     .EQU    $8104 ; 1 byte, tamanho do que vai printar
0084   0000             LCD_PRINT_W     .EQU    $8105 ; 1 byte
0085   0000             LCD_PRINT_IMAGE .EQU    $8106 ; 2 bytes
0086   0000             
0087   0000             
0088   0000                     .ORG 0
0089   0000 F3          RST00	DI
0090   0001 C3 6B 00            JP  INICIO
0091   0004             						
0092   0008                     .ORG     0008H
0093   0008 C3 CF 04    RST08   JP  PRINTCHAR
0094   000B             
0095   0010                     .ORG 0010H
0096   0010 C3 CB 07    RST10   JP KEYREADINIT
0097   0013             
0098   0018                     .ORG 0018H ; check break
0099   0018             RST18   ;LD	A, 0
0100   0018                     ;CP	0
0101   0018                     ;RET
0102   0018 C3 B6 07    	JP CHKKEY
0103   001B             
0104   001B             KEYMAP:
0105   001B 313233343536.BYTE   "1234567890"
0105   0021 37383930
0106   0025 515745525459.BYTE   "QWERTYUIOP"
0106   002B 55494F50
0107   002F 415344464748.BYTE   "ASDFGHJKL", CR
0107   0035 4A4B4C0D
0108   0039 035A58435642.BYTE   CTRLC, "ZXCVBNM ", DEL
0108   003F 4E4D207F
0109   0043             
0110   0043             SHIFTKEYMAP:
0111   0043 21402324255E.BYTE   "!@#$%^&*()"
0111   0049 262A2829
0112   004D 607E2D5F3D2B.BYTE   "`~-_=+;:'"        ; trocar X por " quando for gravar na eeprom
0112   0053 3B3A27
0113   0056 22          .BYTE   22h
0114   0057 7B7D5B5D7C5C.BYTE   "{}[]|",$5C,"<>?/" ; trocar Y por \ quando for gravar na eeprom
0114   005D 3C3E3F2F
0115   0061 032C2E202020.BYTE   CTRLC, ",.     ", VT, LF
0115   0067 20200B0A
0116   006B             
0117   006B             
0118   006B             
0119   006B             
0120   006B             
0121   006B             
0122   006B             
0123   006B             
0124   006B             
0125   006B             
0126   006B             
0127   006B             ; -----------------------------------------------------------------------------
0128   006B             ;   INICIO
0129   006B             ; -----------------------------------------------------------------------------
0130   006B             INICIO:
0131   006B 31 FF 8F        LD  SP, $8FFF
0132   006E             
0133   006E                 ; init serial
0134   006E CD 9E 08        CALL  DELONE     ;WAIT A SEC SO THE HOST SEES TX HIGH  
0135   0071 21 39 08        LD    HL,TXDATA
0136   0074 22 AA FF        LD    (PUTCH),HL ;USE THE BITBANG SERIAL TRANSMIT
0137   0077 21 64 08        LD    HL,RXDATA
0138   007A 22 AC FF        LD    (GETCH),HL  ;USE THE BITBANG SERIAL RECEIVE
0139   007D                 
0140   007D 21 1B 00        LD	HL,B4800
0141   0080 22 C0 FF    	LD	(BAUD),HL	;DEFAULT SERIAL=9600 BAUD
0142   0083             
0143   0083 21 B4 08        LD HL, WELLCOME
0144   0086 CD 1F 08        CALL SNDMSG
0145   0089             
0146   0089                 ; CALL INCH
0147   0089                 ; CALL OUTCH
0148   0089             
0149   0089                 ; Init LCD hardware
0150   0089 CD 2A 06        CALL INIT_LCD
0151   008C CD A7 07        call delay
0152   008F             
0153   008F CD 42 07        call cls_TXT
0154   0092 CD A7 07        call delay
0155   0095             
0156   0095 CD CC 06        CALL enable_grafic
0157   0098 CD A7 07        call delay
0158   009B             
0159   009B CD 48 07        call cls_GRAPHIC
0160   009E CD A7 07        call delay
0161   00A1             
0162   00A1 CD BE 06        call lcd_clear
0163   00A4             
0164   00A4 21 00 85        ld hl, DISPLAY
0165   00A7 CD E5 06        call print_image
0166   00AA             
0167   00AA CD A7 07        call delay
0168   00AD             
0169   00AD                 ; Init LCD logical
0170   00AD CD BC 04        call INIT_TXT_LCD ; set cursor X Y to 0
0171   00B0             
0172   00B0 21 CB 08        LD HL, MGS_INIT_BASIC
0173   00B3 CD 1F 08        CALL SNDMSG
0174   00B6             
0175   00B6 C3 00 60        JP BASIC
0176   00B9             
0177   00B9             KEY:
0178   00B9                 ;CALL KEYREADINIT
0179   00B9                 ;CALL PRINTCHAR
0180   00B9             
0181   00B9 C3 B9 00        JP  KEY
0182   00BC             
0183   00BC             
0184   00BC             
0185   00BC             TABLE:
0186   00BC 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; NUL
0186   00C2 0000
0187   00C4 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; SOH
0187   00CA 0000
0188   00CC 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; STX
0188   00D2 0000
0189   00D4 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; ETX
0189   00DA 0000
0190   00DC 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; EOT
0190   00E2 0000
0191   00E4 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; ENQ
0191   00EA 0000
0192   00EC 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; ACK
0192   00F2 0000
0193   00F4 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; BEL
0193   00FA 0000
0194   00FC 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; BS
0194   0102 0000
0195   0104 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; TAB
0195   010A 0000
0196   010C 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; LF
0196   0112 0000
0197   0114 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; VT
0197   011A 0000
0198   011C 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; FF
0198   0122 0000
0199   0124 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; CR
0199   012A 0000
0200   012C 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; SO
0200   0132 0000
0201   0134 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; SI
0201   013A 0000
0202   013C 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; DLE
0202   0142 0000
0203   0144 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; DC1
0203   014A 0000
0204   014C 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; DC2
0204   0152 0000
0205   0154 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; DC3
0205   015A 0000
0206   015C 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; DC4
0206   0162 0000
0207   0164 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; NAK
0207   016A 0000
0208   016C 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; SYN
0208   0172 0000
0209   0174 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; ETB
0209   017A 0000
0210   017C 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; CAN
0210   0182 0000
0211   0184 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; EM
0211   018A 0000
0212   018C 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; SUB
0212   0192 0000
0213   0194 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; ESC
0213   019A 0000
0214   019C 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; FS
0214   01A2 0000
0215   01A4 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; GS
0215   01AA 0000
0216   01AC 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; RS
0216   01B2 0000
0217   01B4 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; US
0217   01BA 0000
0218   01BC             
0219   01BC             ; DEC 32
0220   01BC 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; SPACE
0220   01C2 0000
0221   01C4 202020202000.db $20, $20, $20, $20, $20, $00, $20, $00 ; !
0221   01CA 2000
0222   01CC 505050000000.db $50, $50, $50, $00, $00, $00, $00, $00 ; "
0222   01D2 0000
0223   01D4 5050F850F850.db $50, $50, $F8, $50, $F8, $50, $50, $00 ; #
0223   01DA 5000
0224   01DC 2078A07028F0.db $20, $78, $A0, $70, $28, $F0, $20, $00 ; $
0224   01E2 2000
0225   01E4 C0C810204098.db $C0, $C8, $10, $20, $40, $98, $18, $00 ; %
0225   01EA 1800
0226   01EC 6090A040A890.db $60, $90, $A0, $40, $A8, $90, $68, $00 ; &
0226   01F2 6800
0227   01F4 202020000000.db $20, $20, $20, $00, $00, $00, $00, $00 ; '
0227   01FA 0000
0228   01FC 102040404020.db $10, $20, $40, $40, $40, $20, $10, $00 ; (
0228   0202 1000
0229   0204 402010101020.db $40, $20, $10, $10, $10, $20, $40, $00 ; )
0229   020A 4000
0230   020C 0020A870A820.db $00, $20, $A8, $70, $A8, $20, $00, $00 ; *
0230   0212 0000
0231   0214 002020F82020.db $00, $20, $20, $F8, $20, $20, $00, $00 ; +
0231   021A 0000
0232   021C 000000006020.db $00, $00, $00, $00, $60, $20, $40, $00 ; ,
0232   0222 4000
0233   0224 000000F80000.db $00, $00, $00, $F8, $00, $00, $00, $00 ; -
0233   022A 0000
0234   022C 000000000060.db $00, $00, $00, $00, $00, $60, $60, $00 ; .
0234   0232 6000
0235   0234 000008102040.db $00, $00, $08, $10, $20, $40, $80, $00 ; /
0235   023A 8000
0236   023C 708898A8C888.db $70, $88, $98, $A8, $C8, $88, $70, $00 ; 0
0236   0242 7000
0237   0244 206020202020.db $20, $60, $20, $20, $20, $20, $70, $00 ; 1
0237   024A 7000
0238   024C 708808102040.db $70, $88, $08, $10, $20, $40, $F8, $00 ; 2
0238   0252 F800
0239   0254 F81020100888.db $F8, $10, $20, $10, $08, $88, $70, $00 ; 3
0239   025A 7000
0240   025C 10305090F810.db $10, $30, $50, $90, $F8, $10, $10, $00 ; 4
0240   0262 1000
0241   0264 F880F0080888.db $F8, $80, $F0, $08, $08, $88, $70, $00 ; 5
0241   026A 7000
0242   026C 304080F08888.db $30, $40, $80, $F0, $88, $88, $70, $00 ; 6
0242   0272 7000
0243   0274 F80810204040.db $F8, $08, $10, $20, $40, $40, $40, $00 ; 7
0243   027A 4000
0244   027C 708888708888.db $70, $88, $88, $70, $88, $88, $70, $00 ; 8
0244   0282 7000
0245   0284 708888780810.db $70, $88, $88, $78, $08, $10, $60, $00 ; 9
0245   028A 6000
0246   028C 000030300030.db $00, $00, $30, $30, $00, $30, $30, $00 ; :
0246   0292 3000
0247   0294 003030003010.db $00, $30, $30, $00, $30, $10, $20, $00 ; ;
0247   029A 2000
0248   029C 102040804020.db $10, $20, $40, $80, $40, $20, $10, $00 ; <
0248   02A2 1000
0249   02A4 0000F800F800.db $00, $00, $F8, $00, $F8, $00, $00, $00 ; =
0249   02AA 0000
0250   02AC 402010081020.db $40, $20, $10, $08, $10, $20, $40, $00 ; >
0250   02B2 4000
0251   02B4 304808102000.db $30, $48, $08, $10, $20, $00, $20, $00 ; ?
0251   02BA 2000
0252   02BC 70880868A8A8.db $70, $88, $08, $68, $A8, $A8, $70, $00 ; @
0252   02C2 7000
0253   02C4             
0254   02C4             ; DEC 65 Maiusculas
0255   02C4 20508888F888.db $20, $50, $88, $88, $F8, $88, $88, $00 ; A
0255   02CA 8800
0256   02CC F08888F08888.db $F0, $88, $88, $F0, $88, $88, $F0, $00 ; B
0256   02D2 F000
0257   02D4 708880808088.db $70, $88, $80, $80, $80, $88, $70, $00 ; C
0257   02DA 7000
0258   02DC E09088888890.db $E0, $90, $88, $88, $88, $90, $E0, $00 ; D
0258   02E2 E000
0259   02E4 F88080F08080.db $F8, $80, $80, $F0, $80, $80, $F8, $00 ; E
0259   02EA F800
0260   02EC F88080F08080.db $F8, $80, $80, $F0, $80, $80, $80, $00 ; F
0260   02F2 8000
0261   02F4 70888080B888.db $70, $88, $80, $80, $B8, $88, $70, $00 ; G
0261   02FA 7000
0262   02FC 888888F88888.db $88, $88, $88, $F8, $88, $88, $88, $00 ; H
0262   0302 8800
0263   0304 702020202020.db $70, $20, $20, $20, $20, $20, $70, $00 ; I
0263   030A 7000
0264   030C 080808088888.db $08, $08, $08, $08, $88, $88, $70, $00 ; J
0264   0312 7000
0265   0314 8890A0C0A090.db $88, $90, $A0, $C0, $A0, $90, $88, $00 ; K
0265   031A 8800
0266   031C 808080808080.db $80, $80, $80, $80, $80, $80, $F8, $00 ; L
0266   0322 F800
0267   0324 88D8A8888888.db $88, $D8, $A8, $88, $88, $88, $88, $00 ; M
0267   032A 8800
0268   032C 8888C8A89888.db $88, $88, $C8, $A8, $98, $88, $88, $00 ; N
0268   0332 8800
0269   0334 708888888888.db $70, $88, $88, $88, $88, $88, $70, $00 ; O
0269   033A 7000
0270   033C F08888F08080.db $F0, $88, $88, $F0, $80, $80, $80, $00 ; P
0270   0342 8000
0271   0344 70888888A898.db $70, $88, $88, $88, $A8, $98, $70, $00 ; Q
0271   034A 7000
0272   034C F08888F08888.db $F0, $88, $88, $F0, $88, $88, $88, $00 ; R
0272   0352 8800
0273   0354 708880700888.db $70, $88, $80, $70, $08, $88, $70, $00 ; S
0273   035A 7000
0274   035C F82020202020.db $F8, $20, $20, $20, $20, $20, $20, $00 ; T
0274   0362 2000
0275   0364 888888888888.db $88, $88, $88, $88, $88, $88, $70, $00 ; U
0275   036A 7000
0276   036C 888888888850.db $88, $88, $88, $88, $88, $50, $20, $00 ; V
0276   0372 2000
0277   0374 88888888A8D8.db $88, $88, $88, $88, $A8, $D8, $88, $00 ; W
0277   037A 8800
0278   037C 888850205088.db $88, $88, $50, $20, $50, $88, $88, $00 ; X
0278   0382 8800
0279   0384 888850202020.db $88, $88, $50, $20, $20, $20, $20, $00 ; Y
0279   038A 2000
0280   038C F80810204080.db $F8, $08, $10, $20, $40, $80, $F8, $00 ; Z
0280   0392 F800
0281   0394             
0282   0394             ; DEC 91
0283   0394 302020202020.db $30, $20, $20, $20, $20, $20, $30, $00 ; [
0283   039A 3000
0284   039C 008040201008.db $00, $80, $40, $20, $10, $08, $00, $00 ; \
0284   03A2 0000
0285   03A4 602020202020.db $60, $20, $20, $20, $20, $20, $60, $00 ; ]
0285   03AA 6000
0286   03AC 205088000000.db $20, $50, $88, $00, $00, $00, $00, $00 ; ^
0286   03B2 0000
0287   03B4 000000000000.db $00, $00, $00, $00, $00, $00, $F8, $00 ; _
0287   03BA F800
0288   03BC 402010000000.db $40, $20, $10, $00, $00, $00, $00, $00 ; `
0288   03C2 0000
0289   03C4             
0290   03C4             ; DEC 97 "Minusculas"
0291   03C4 20508888F888.db $20, $50, $88, $88, $F8, $88, $88, $00 ; A
0291   03CA 8800
0292   03CC F08888F08888.db $F0, $88, $88, $F0, $88, $88, $F0, $00 ; B
0292   03D2 F000
0293   03D4 708880808088.db $70, $88, $80, $80, $80, $88, $70, $00 ; C
0293   03DA 7000
0294   03DC E09088888890.db $E0, $90, $88, $88, $88, $90, $E0, $00 ; D
0294   03E2 E000
0295   03E4 F88080F08080.db $F8, $80, $80, $F0, $80, $80, $F8, $00 ; E
0295   03EA F800
0296   03EC F88080F08080.db $F8, $80, $80, $F0, $80, $80, $80, $00 ; F
0296   03F2 8000
0297   03F4 70888080B888.db $70, $88, $80, $80, $B8, $88, $70, $00 ; G
0297   03FA 7000
0298   03FC 888888F88888.db $88, $88, $88, $F8, $88, $88, $88, $00 ; H
0298   0402 8800
0299   0404 702020202020.db $70, $20, $20, $20, $20, $20, $70, $00 ; I
0299   040A 7000
0300   040C 080808088888.db $08, $08, $08, $08, $88, $88, $70, $00 ; J
0300   0412 7000
0301   0414 8890A0C0A090.db $88, $90, $A0, $C0, $A0, $90, $88, $00 ; K
0301   041A 8800
0302   041C 808080808080.db $80, $80, $80, $80, $80, $80, $F8, $00 ; L
0302   0422 F800
0303   0424 88D8A8888888.db $88, $D8, $A8, $88, $88, $88, $88, $00 ; M
0303   042A 8800
0304   042C 8888C8A89888.db $88, $88, $C8, $A8, $98, $88, $88, $00 ; N
0304   0432 8800
0305   0434 708888888888.db $70, $88, $88, $88, $88, $88, $70, $00 ; O
0305   043A 7000
0306   043C F08888F08080.db $F0, $88, $88, $F0, $80, $80, $80, $00 ; P
0306   0442 8000
0307   0444 70888888A898.db $70, $88, $88, $88, $A8, $98, $70, $00 ; Q
0307   044A 7000
0308   044C F08888F08888.db $F0, $88, $88, $F0, $88, $88, $88, $00 ; R
0308   0452 8800
0309   0454 708880700888.db $70, $88, $80, $70, $08, $88, $70, $00 ; S
0309   045A 7000
0310   045C F82020202020.db $F8, $20, $20, $20, $20, $20, $20, $00 ; T
0310   0462 2000
0311   0464 888888888888.db $88, $88, $88, $88, $88, $88, $70, $00 ; U
0311   046A 7000
0312   046C 888888888850.db $88, $88, $88, $88, $88, $50, $20, $00 ; V
0312   0472 2000
0313   0474 88888888A8D8.db $88, $88, $88, $88, $A8, $D8, $88, $00 ; W
0313   047A 8800
0314   047C 888850205088.db $88, $88, $50, $20, $50, $88, $88, $00 ; X
0314   0482 8800
0315   0484 888850202020.db $88, $88, $50, $20, $20, $20, $20, $00 ; Y
0315   048A 2000
0316   048C F80810204080.db $F8, $08, $10, $20, $40, $80, $F8, $00 ; Z
0316   0492 F800
0317   0494             
0318   0494             ; DEC 123
0319   0494 102020402020.db $10, $20, $20, $40, $20, $20, $10, $00 ; {
0319   049A 1000
0320   049C 202020202020.db $20, $20, $20, $20, $20, $20, $20, $00 ; |
0320   04A2 2000
0321   04A4 402020102020.db $40, $20, $20, $10, $20, $20, $40, $00 ; }
0321   04AA 4000
0322   04AC 000050A00000.db $00, $00, $50, $A0, $00, $00, $00, $00 ; ~
0322   04B2 0000
0323   04B4 000000000000.db $00, $00, $00, $00, $00, $00, $00, $00 ; DEL
0323   04BA 0000
0324   04BC             
0325   04BC             
0326   04BC             INIT_TXT_LCD:
0327   04BC 3E 00           ld a, 0
0328   04BE 32 03 80        ld (LCD_TXT_X), a
0329   04C1 32 04 80        ld (LCD_TXT_Y), a
0330   04C4 21 00 00        ld hl, 0
0331   04C7 22 08 80        ld (LCD_TXT_X_TMP), hl
0332   04CA 23              inc hl
0333   04CB 22 0A 80        ld (LCD_TXT_Y_TMP), hl
0334   04CE C9              RET
0335   04CF             
0336   04CF             
0337   04CF             ; char in A
0338   04CF             PRINTCHAR:
0339   04CF 32 00 80        LD (LCD_CHAR), A ; save char to print
0340   04D2             
0341   04D2 F5              PUSH AF
0342   04D3 C5              PUSH BC
0343   04D4 D5              PUSH DE
0344   04D5 E5              PUSH HL
0345   04D6             
0346   04D6                 ; Verificar Enter, clear, etc... SEM PERDER O reg. A
0347   04D6             ver_enter:       
0348   04D6             
0349   04D6                             ; trata dados para o lcd
0350   04D6 FE 0D                       CP      CR                     ; compara com ENTER
0351   04D8 20 25                       jr      nz, ver_limpa
0352   04DA             
0353   04DA                             ;call    shift_lcd_up
0354   04DA                             ;call    show_lcd_screen
0355   04DA             
0356   04DA 3E 00                       LD A,0
0357   04DC 32 03 80                    LD (LCD_TXT_X), A ; ajusta X para o inicio da linha
0358   04DF             
0359   04DF 3A 04 80                    LD A, (LCD_TXT_Y)
0360   04E2 3C                          inc a
0361   04E3 FE 08                       cp 8
0362   04E5 C2 F9 04                    jp nz, ver_enter_incYOK
0363   04E8                             
0364   04E8 CD BE 06                    call lcd_clear ; se linha > 8 entao limpa buffer da tela
0365   04EB 21 00 85                    ld hl, DISPLAY  
0366   04EE CD E5 06                    call print_image ; mostra tela limpa
0367   04F1 3E 00                       LD A, 0
0368   04F3 32 04 80                    LD (LCD_TXT_Y), A
0369   04F6                             
0370   04F6 C3 09 06                    jp print_char_fim
0371   04F9             
0372   04F9             ver_enter_incYOK:
0373   04F9 32 04 80                    ld (LCD_TXT_Y), a
0374   04FC C3 09 06                    jp print_char_fim
0375   04FF             
0376   04FF             
0377   04FF             ver_limpa:
0378   04FF FE 0C                       CP      $0C                     ; compara com limpar tela
0379   0501 20 14                       jr      NZ, ver_line
0380   0503                             
0381   0503                             ;call    clear_lcd_screen
0382   0503                             ;call    show_lcd_screen
0383   0503 CD BE 06                    call lcd_clear
0384   0506 21 00 85                    ld hl, DISPLAY
0385   0509 CD E5 06                    call print_image
0386   050C 3E 00                       LD A, 0
0387   050E 32 03 80                    LD (LCD_TXT_X), A
0388   0511 32 04 80                    LD (LCD_TXT_Y), A
0389   0514             
0390   0514 C3 09 06                    JP print_char_fim
0391   0517             
0392   0517             ver_line:
0393   0517 FE 0A                       CP      LF                     ; retorna começo da linha
0394   0519 20 03                       jr      NZ, print_lcd      
0395   051B             
0396   051B                                 ;----- verificar se precisa add algo aqui
0397   051B                             ;call    shift_lcd_up
0398   051B                             ;call    show_lcd_screen
0399   051B C3 09 06                    JP print_char_fim
0400   051E             
0401   051E             print_lcd:
0402   051E                 ; pega o ponteiro para o caracter e salva em LCD_CHAR_POINT
0403   051E 26 00           ld H, 0
0404   0520 6F              ld L, A
0405   0521 29              ADD HL, HL ; hl x 8
0406   0522 29              ADD HL, HL
0407   0523 29              ADD HL, HL
0408   0524             
0409   0524 54              LD D, H
0410   0525 5D              LD E, L
0411   0526 21 BC 00        ld hl, TABLE
0412   0529 19              add hl, de
0413   052A 22 01 80        ld (LCD_CHAR_POINT), HL ; table
0414   052D             
0415   052D             
0416   052D                 ; ajusta X
0417   052D 06 06           ld b, 6
0418   052F 3A 03 80        ld a, (LCD_TXT_X)
0419   0532 B7              or A
0420   0533 CA 3D 05        jp z, ajustX
0421   0536 4F              ld c, a
0422   0537 CD 0E 06        call multiplication
0423   053A C3 40 05        jp ajustXOK
0424   053D                 
0425   053D             ajustX:
0426   053D 21 00 00        ld hl, 0
0427   0540             ajustXOK:
0428   0540 22 08 80        ld (LCD_TXT_X_TMP), HL 
0429   0543             
0430   0543             
0431   0543             
0432   0543                 ; ajuste Y
0433   0543 16 04           ld d, 4
0434   0545 1E 00           ld e, 0 ; = 128x8 proxima linha
0435   0547 2A 0A 80        ld hl, (LCD_TXT_Y_TMP)
0436   054A 3A 04 80        ld a, (LCD_TXT_Y)
0437   054D B7              or a
0438   054E CA 5E 05        JP Z, multYfim
0439   0551 21 00 00        ld hl, 0
0440   0554 47              ld b, a
0441   0555             multY:
0442   0555 19              add hl, de
0443   0556 10 FD           DJNZ multY
0444   0558             
0445   0558 22 0A 80        ld (LCD_TXT_Y_TMP), HL
0446   055B C3 64 05        jp multYfimok
0447   055E             
0448   055E             multYfim:
0449   055E 21 00 00        ld hl, 0
0450   0561 22 0A 80        ld (LCD_TXT_Y_TMP), HL
0451   0564             
0452   0564             multYfimok:
0453   0564             
0454   0564 2A 0A 80        ld hl, (LCD_TXT_Y_TMP)
0455   0567 ED 5B 08 80     ld de, (LCD_TXT_X_TMP)
0456   056B             
0457   056B 19              add hl, de  ; hl tem pos do pix 0-8191
0458   056C             
0459   056C 22 0E 80        ld (LCD_TMP_POINT), hl
0460   056F             
0461   056F             
0462   056F 3E 08           ld a, 8 ; altura do caracter
0463   0571 32 0C 80        ld (LCD_CHAR_H), a
0464   0574             printchar_loopH:
0465   0574 2A 01 80        ld hl, (LCD_CHAR_POINT)
0466   0577 7E              ld a, (HL)
0467   0578 32 10 81        ld (LCD_TEMP), a
0468   057B             
0469   057B 3E 06           ld a, 6 ; largura do caracter
0470   057D 32 0D 80        ld (LCD_CHAR_W), a
0471   0580             printchar_loopW:
0472   0580 3A 10 81        ld a, (LCD_TEMP)
0473   0583 E6 80           and 128
0474   0585 FE 00           cp 0
0475   0587 CA 93 05        jp z, printchar_loopWC
0476   058A 2A 0E 80        ld hl, (LCD_TMP_POINT)
0477   058D CD 49 06        call lcd_setPixel
0478   0590 C3 99 05        JP printchar_loopWE
0479   0593             
0480   0593             printchar_loopWC:
0481   0593 2A 0E 80        ld hl, (LCD_TMP_POINT)
0482   0596 CD 82 06        call lcd_clearPixel
0483   0599             
0484   0599             printchar_loopWE:
0485   0599 3A 10 81        ld a, (LCD_TEMP)
0486   059C CB 27           sla a
0487   059E 32 10 81        ld (LCD_TEMP), a
0488   05A1                 
0489   05A1 2A 0E 80        ld hl, (LCD_TMP_POINT)
0490   05A4 23              inc hl
0491   05A5 22 0E 80        ld (LCD_TMP_POINT), hl
0492   05A8             
0493   05A8 3A 0D 80        ld a, (LCD_CHAR_W)
0494   05AB 3D              dec A
0495   05AC 32 0D 80        ld (LCD_CHAR_W), a
0496   05AF FE 00           cp 0
0497   05B1 C2 80 05        JP NZ, printchar_loopW
0498   05B4             
0499   05B4             
0500   05B4             
0501   05B4             
0502   05B4 2A 0E 80        ld hl, (LCD_TMP_POINT)
0503   05B7 2B              dec hl
0504   05B8 2B              dec hl
0505   05B9 2B              dec hl
0506   05BA 2B              dec hl
0507   05BB 2B              dec hl
0508   05BC 2B              dec hl
0509   05BD             
0510   05BD 16 00           ld d, 0
0511   05BF 1E 80           ld e, 128
0512   05C1 19              add hl, de
0513   05C2 22 0E 80        ld (LCD_TMP_POINT), HL
0514   05C5             
0515   05C5 2A 01 80        ld hl, (LCD_CHAR_POINT)
0516   05C8 23              inc hl
0517   05C9 22 01 80        ld (LCD_CHAR_POINT), hl
0518   05CC             
0519   05CC             
0520   05CC 3A 0C 80        ld a, (LCD_CHAR_H)
0521   05CF 3D              dec A
0522   05D0 32 0C 80        ld (LCD_CHAR_H), a
0523   05D3 FE 00           cp 0
0524   05D5 C2 74 05        jp NZ, printchar_loopH
0525   05D8             
0526   05D8 21 00 85        ld hl, DISPLAY
0527   05DB CD E5 06        call print_image
0528   05DE             
0529   05DE                 ; increment X, Y
0530   05DE 3A 03 80        ld a, (LCD_TXT_X)
0531   05E1 3C              inc a
0532   05E2 FE 15           cp 21
0533   05E4 C2 06 06        jp nz, incXOK
0534   05E7 3E 00           ld a, 0
0535   05E9 32 03 80        ld (LCD_TXT_X), a
0536   05EC 3A 04 80        ld a, (LCD_TXT_Y)
0537   05EF 3C              inc a
0538   05F0 FE 08           cp 8
0539   05F2 C2 00 06        jp nz, incYOK
0540   05F5 3E 00           ld a, 0
0541   05F7 32 03 80        ld (LCD_TXT_X), a
0542   05FA 32 04 80        ld (LCD_TXT_Y), a
0543   05FD C3 09 06        jp print_char_fim
0544   0600             
0545   0600             incYOK:
0546   0600 32 04 80        ld (LCD_TXT_Y), a
0547   0603 C3 09 06        jp print_char_fim
0548   0606             
0549   0606             incXOK:
0550   0606 32 03 80        ld (LCD_TXT_X), a
0551   0609             
0552   0609             print_char_fim:
0553   0609 E1              POP HL
0554   060A D1              POP DE
0555   060B C1              POP BC
0556   060C F1              POP AF
0557   060D C9              RET
0558   060E             ;-------- FIM PRINTCHAR ------------------
0559   060E             
0560   060E             
0561   060E             
0562   060E             ; ----------------------------------
0563   060E             
0564   060E             ; INPUT: THE VALUES IN REGISTER B EN C
0565   060E             ; OUTPUT: HL = B * C
0566   060E             ; CHANGES: AF,DE,HL,B
0567   060E             ;
0568   060E             multiplication:
0569   060E 21 00 00    	LD HL,0
0570   0611 78          	LD A,B
0571   0612 B7          	OR A
0572   0613 C8          	RET Z
0573   0614 16 00       	LD D,0
0574   0616 59          	LD E,C
0575   0617 19          multiplicationLOOP:	ADD HL,DE
0576   0618 10 FD       	DJNZ multiplicationLOOP
0577   061A C9          	RET 
0578   061B             
0579   061B             ;-----------------------------------
0580   061B             
0581   061B             Div_HL_D:
0582   061B             ;Inputs:
0583   061B             ;   HL and D
0584   061B             ;Outputs:
0585   061B             ;   HL is the quotient (HL/D)
0586   061B             ;   A is the remainder
0587   061B             ;   B is 0
0588   061B             ;   C,D,E are preserved
0589   061B AF              xor a         ; Clear upper eight bits of AHL
0590   061C 06 10           ld b,16       ; Sixteen bits in dividend
0591   061E             _loop:
0592   061E 29              add hl,hl     ; Do a "SLA HL". If the upper bit was 1, the c flag is set
0593   061F 17              rla           ; This moves the upper bits of the dividend into A
0594   0620 38 03           jr c,_overflow; If D is allowed to be >128, then it is possible for A to overflow here. (Yes future Zeda, 128 is "safe.")
0595   0622 BA              cp d          ; Check if we can subtract the divisor
0596   0623 38 02           jr c,_skip    ; Carry means A < D
0597   0625             _overflow:
0598   0625 92              sub d         ; Do subtraction for real this time
0599   0626 2C              inc l         ; Set the next bit of the quotient (currently bit 0)
0600   0627             _skip:
0601   0627 10 F5           djnz _loop
0602   0629 C9              ret
0603   062A             
0604   062A             
0605   062A             ; -----------------------------------------------------------------------------
0606   062A             ;   LCD DRIVER
0607   062A             ; -----------------------------------------------------------------------------
0608   062A             ; INIT_LCD - Inicia o lcd em mode texto
0609   062A             ; lcd_setPixel - Liga um pixel (0 - 8191) pixel address em HL
0610   062A             ; lcd_clearPixel - Desliga um pixel (0 - 8191) pixel address em HL
0611   062A             ; lcd_clear - Limpa buffer do lcd
0612   062A             ; enable_grafic - Coloca o LCD em modo grafico
0613   062A             ; print_image - Coloca o conteudo de HL (128x64 bits) no LCD
0614   062A             ; cls_TXT - Limpa LCD mode text
0615   062A             ; cls_GRAPHIC - Limpa LCD modo grafico
0616   062A             
0617   062A             INIT_LCD:
0618   062A                 ;Initialisation
0619   062A 3E 30       	ld a, 30H
0620   062C CD 6E 07    	call lcd_send_command
0621   062F             
0622   062F 3E A0       	ld a, 0b00100000
0623   0631 CD 6E 07    	call lcd_send_command
0624   0634             
0625   0634 3E 30       	ld a, 30H
0626   0636 CD 6E 07    	call lcd_send_command
0627   0639             
0628   0639 3E 0C       	ld a, 0CH
0629   063B CD 6E 07    	call lcd_send_command
0630   063E             
0631   063E 3E 01       	ld a, 01H
0632   0640 CD 6E 07    	call lcd_send_command
0633   0643             
0634   0643 3E 02       	ld a, 02H
0635   0645 CD 6E 07    	call lcd_send_command
0636   0648 C9              RET
0637   0649             
0638   0649             
0639   0649             ; pixel index in HL
0640   0649             lcd_setPixel:
0641   0649 E5              push hl
0642   064A C5              push bc
0643   064B D5              push de
0644   064C F5              push af
0645   064D AF              xor A
0646   064E 32 07 80        ld (LCD_BIT_INDEX), A
0647   0651 32 05 80        ld (LCD_BYTE_INDEX), A
0648   0654             
0649   0654 16 08           ld d, 8
0650   0656 CD 1B 06        call Div_HL_D
0651   0659 32 07 80        ld (LCD_BIT_INDEX), A
0652   065C 22 05 80        ld (LCD_BYTE_INDEX), HL
0653   065F ED 4B 05 80     ld BC, (LCD_BYTE_INDEX)
0654   0663 21 00 85        ld hl, DISPLAY
0655   0666 09              add hl, bc
0656   0667                 
0657   0667 06 80           ld b, 128 ; 1000 0000
0658   0669 3A 07 80        ld a, (LCD_BIT_INDEX) ;
0659   066C FE 00           cp 0
0660   066E CA 7A 06        jp z, lcd_setPixel_fim
0661   0671             lcd_setPixel_bit:
0662   0671 CB 38           srl B
0663   0673 3D              dec A
0664   0674 CA 7A 06        jp z, lcd_setPixel_fim
0665   0677                 
0666   0677 C3 71 06        jp lcd_setPixel_bit
0667   067A             lcd_setPixel_fim
0668   067A 7E              ld a, (hl)
0669   067B B0              or b
0670   067C 77              ld (hl), a
0671   067D             
0672   067D F1              pop af
0673   067E C1              pop bc
0674   067F D1              pop de
0675   0680 E1              pop hl
0676   0681 C9              ret
0677   0682             
0678   0682             ;===============================
0679   0682             ; pixel index in HL
0680   0682             lcd_clearPixel:
0681   0682 E5              push hl
0682   0683 C5              push bc
0683   0684 D5              push de
0684   0685 F5              push af
0685   0686 AF              xor A
0686   0687 32 07 80        ld (LCD_BIT_INDEX), A
0687   068A 32 05 80        ld (LCD_BYTE_INDEX), A
0688   068D 16 08           ld d, 8
0689   068F CD 1B 06        call Div_HL_D
0690   0692 32 07 80        ld (LCD_BIT_INDEX), A
0691   0695 22 05 80        ld (LCD_BYTE_INDEX), HL
0692   0698 ED 4B 05 80     ld BC, (LCD_BYTE_INDEX)
0693   069C 21 00 85        ld hl, DISPLAY
0694   069F 09              add hl, bc
0695   06A0                 
0696   06A0 06 80           ld b, 128 ; 1000 0000
0697   06A2 3A 07 80        ld a, (LCD_BIT_INDEX) ;
0698   06A5 FE 00           cp 0
0699   06A7 CA B3 06        jp z, lcd_clearPixel_fim
0700   06AA             lcd_clearPixel_bit:
0701   06AA CB 38           srl B
0702   06AC 3D              dec A
0703   06AD CA B3 06        jp z, lcd_clearPixel_fim
0704   06B0                 
0705   06B0 C3 AA 06        jp lcd_clearPixel_bit
0706   06B3             lcd_clearPixel_fim
0707   06B3 78              ld a, b
0708   06B4 2F              cpl     ; NOT B
0709   06B5 47              ld b, a
0710   06B6             
0711   06B6 7E              ld a, (hl)
0712   06B7 A0              and b
0713   06B8 77              ld (hl), a
0714   06B9             
0715   06B9 F1              pop af
0716   06BA C1              pop bc
0717   06BB D1              pop de
0718   06BC E1              pop hl
0719   06BD C9              ret
0720   06BE             
0721   06BE             
0722   06BE             ;;--------------------------------------------------
0723   06BE             lcd_clear:
0724   06BE                 ;; HL = start address of block
0725   06BE 21 00 85        ld hl, DISPLAY
0726   06C1             
0727   06C1                 ;; DE = HL + 1
0728   06C1 5D              ld e,l
0729   06C2 54              ld d,h
0730   06C3 13              inc de
0731   06C4             
0732   06C4                 ;; initialise first byte of block
0733   06C4                 ;; with data byte (&00)
0734   06C4 36 00           ld (hl), 0
0735   06C6                     
0736   06C6                 ;; BC = length of block in bytes
0737   06C6                 ;; HL+BC-1 = end address of block
0738   06C6             
0739   06C6 01 00 04        ld bc, 1024
0740   06C9             
0741   06C9                 ;; fill memory
0742   06C9 ED B0           ldir
0743   06CB C9              ret
0744   06CC             
0745   06CC             
0746   06CC             ;===================
0747   06CC             
0748   06CC             ; grafic mode - enable
0749   06CC             enable_grafic:
0750   06CC 3E 30       	ld a, 30H
0751   06CE CD 6E 07    	call lcd_send_command
0752   06D1 CD 99 07    	call delayLCD
0753   06D4             	
0754   06D4 3E 34       	ld a, 34H
0755   06D6 CD 6E 07    	call lcd_send_command
0756   06D9 CD 99 07    	call delayLCD
0757   06DC             	
0758   06DC 3E 36       	ld a, 36H
0759   06DE CD 6E 07    	call lcd_send_command
0760   06E1 CD 99 07    	call delayLCD
0761   06E4 C9              ret
0762   06E5             
0763   06E5             
0764   06E5             ;==========================
0765   06E5             
0766   06E5             print_image:						; LOAD 128*64 bits (16*8 Byte) of data into the LCD screen
0767   06E5             									; HL content the data address
0768   06E5 F5              push af
0769   06E6 D5          	push de
0770   06E7 C5          	push bc
0771   06E8             
0772   06E8             
0773   06E8             ; premiere partie : X de 0 à 127 / Y de 0 à 32
0774   06E8             
0775   06E8 3E 20       	ld a,32
0776   06EA 57          	ld d,a							; boucle Y
0777   06EB 3E 00       	ld a,0
0778   06ED 5F          	ld e,a
0779   06EE             	
0780   06EE             boucle_colonne:
0781   06EE 3E 80       		ld a,$80					; coordonnée Y (0)
0782   06F0 83          		add a,e
0783   06F1 CD 6E 07    		call lcd_send_command
0784   06F4             		
0785   06F4 3E 80       		ld a,$80					; coordonnée X (0)		
0786   06F6 CD 6E 07    		call lcd_send_command
0787   06F9             		
0788   06F9 3E 08       		ld a,8
0789   06FB 47          		ld b,a						; boucle X
0790   06FC             		
0791   06FC             boucle_ligne:	
0792   06FC 7E          			ld a,(hl)
0793   06FD CD 78 07    			call lcd_send_data
0794   0700 23          			inc hl
0795   0701 7E          			ld a,(hl)
0796   0702 CD 78 07    			call lcd_send_data		; auto-increment on screen address
0797   0705 23          			inc hl
0798   0706 05          			dec b
0799   0707 AF          			XOR a
0800   0708 B0          			OR b
0801   0709 C2 FC 06    			jp nz,boucle_ligne		; tant qu'on a pas fait 7 
0802   070C             		
0803   070C 15          		dec d
0804   070D 1C          		inc e
0805   070E AF          		XOR a
0806   070F B2          		OR d
0807   0710 C2 EE 06    		jp nz,boucle_colonne
0808   0713             		
0809   0713             
0810   0713             ; seconde partie : X de 128 à 255 / Y de 0 à 32
0811   0713             
0812   0713 3E 20       	ld a,32
0813   0715 57          	ld d,a							; boucle Y
0814   0716 3E 00       	ld a,0
0815   0718 5F          	ld e,a
0816   0719             	
0817   0719             boucle_colonne2:
0818   0719 3E 80       		ld a,$80					; coordonnée Y (0)
0819   071B 83          		add a, e
0820   071C CD 6E 07    		call lcd_send_command
0821   071F             		
0822   071F 3E 88       		ld a,$88					; coordonnée X (8)		
0823   0721 CD 6E 07    		call lcd_send_command
0824   0724             		
0825   0724 3E 08       		ld a,8
0826   0726 47          		ld b,a						; boucle X
0827   0727             		
0828   0727             boucle_ligne2:	
0829   0727 7E          			ld a,(hl)
0830   0728 CD 78 07    			call lcd_send_data
0831   072B 23          			inc hl
0832   072C 7E          			ld a,(hl)
0833   072D CD 78 07    			call lcd_send_data		; auto-increment on screen address
0834   0730 23          			inc hl
0835   0731 05          			dec b
0836   0732 AF          			XOR a
0837   0733 B0          			OR b
0838   0734 C2 27 07    			jp nz,boucle_ligne2		; tant qu'on a pas fait 7 
0839   0737             		
0840   0737 15          		dec d
0841   0738 1C          		inc e
0842   0739 AF          		XOR a
0843   073A B2          		OR d
0844   073B C2 19 07    		jp nz,boucle_colonne2
0845   073E             
0846   073E C1          	pop bc
0847   073F D1          	pop de
0848   0740 F1              pop af
0849   0741             
0850   0741 C9              ret
0851   0742             
0852   0742             
0853   0742             
0854   0742             ; ======================
0855   0742             cls_TXT:
0856   0742             	; # CLEAR DISPLAY IN TEXT MODE # 
0857   0742 3E 01       	ld a,%00000001 					; CLEAR DISPLAY -> " $01 "
0858   0744 CD 6E 07    	call lcd_send_command		; CLEAR DISPLAY	
0859   0747 C9              ret
0860   0748             
0861   0748             ; ========================
0862   0748             
0863   0748             cls_GRAPHIC:		;   Fill entire Graphical screen with value 0
0864   0748             					;	Graphic RAM (GDRAM) use :
0865   0748             					;	1. Set vertical address (Y) for GDRAM
0866   0748             					;	2. Set horizontal address (X) for GDRAM
0867   0748             					;	3. Write D15~D8 to GDRAM (first byte)
0868   0748             					;	4. Write D7~D0 to GDRAM (second byte)
0869   0748 C5          	push bc
0870   0749 D5          	push de
0871   074A             
0872   074A 1E 20       	ld e,$20						; e = 32 
0873   074C 16 00       	ld d,$0							; d = 0
0874   074E             Boucle32X:
0875   074E 7A          		ld a,d
0876   074F F6 80       		OR $80
0877   0751 CD 6E 07    		call lcd_send_command
0878   0754             		
0879   0754 3E 80       		ld a,$80					; Set horizontal address（X） for GDRAM = 0 ($80)
0880   0756 CD 6E 07    		call lcd_send_command
0881   0759             		
0882   0759 AF          		xor a							 	
0883   075A 06 10       		ld b,$10							; b = 17
0884   075C             		
0885   075C             Boucle16X:	 
0886   075C CD 78 07    			call lcd_send_data 			; Write D15〜D8 to GDRAM (first byte)
0887   075F CD 78 07    			call lcd_send_data 			; Write D7〜D0 to GDRAM (second byte)
0888   0762             											; Address counter will automatically increase by one for the next two-byte data												
0889   0762 10 F8       			djnz Boucle16X					; b = b -1 ; jump to label if b not 0
0890   0764             		
0891   0764 1D          		dec e 
0892   0765 14          		inc d
0893   0766 AF          		xor a							; a = 0
0894   0767 B3          		or e
0895   0768 C2 4E 07    		jp nz,Boucle32X
0896   076B             
0897   076B D1          	pop de
0898   076C C1          	pop bc
0899   076D             	
0900   076D C9              ret
0901   076E             
0902   076E             
0903   076E             
0904   076E             
0905   076E             ;******************
0906   076E             ;Send a command byte to the LCD
0907   076E             ;Entry: A= command byte
0908   076E             ;Exit: All preserved
0909   076E             ;******************
0910   076E             lcd_send_command:
0911   076E C5          	push bc				;Preserve
0912   076F 0E 70       	ld c, LCDCTRL   	;Command port
0913   0771             	
0914   0771             lcd_command_wait_loop:	;Busy wait
0915   0771 CD 99 07    	call delayLCD
0916   0774             	
0917   0774 ED 79       	out (c),a			;Send command
0918   0776 C1          	pop bc				;Restore
0919   0777 C9          	ret
0920   0778             	
0921   0778             ;******************
0922   0778             ;Send a data byte to the LCD
0923   0778             ;Entry: A= data byte
0924   0778             ;Exit: All preserved
0925   0778             ;******************
0926   0778             lcd_send_data:
0927   0778 C5          	push bc				;Preserve
0928   0779 0E 70       	ld c, LCDCTRL	    ;Command port
0929   077B             	
0930   077B                 ;Busy wait
0931   077B CD 99 07    	call delayLCD
0932   077E             	
0933   077E 0E 71       	ld c, LCDDATA	;Data port
0934   0780 ED 79       	out (c),a			;Send data
0935   0782 C1          	pop bc				;Restore
0936   0783 C9          	ret
0937   0784             
0938   0784             ;******************
0939   0784             ;Send an asciiz string to the LCD
0940   0784             ;Entry: HL=address of string
0941   0784             ;Exit: HL=address of ending zero of the string. All others preserved
0942   0784             ;******************
0943   0784             lcd_send_asciiz:
0944   0784 F5          	push af
0945   0785 C5          	push bc				;Preserve
0946   0786             lcd_asciiz_char_loop:
0947   0786 0E 70       	ld c, LCDCTRL   	;Command port
0948   0788             	
0949   0788             lcd_asciiz_wait_loop:	;Busy wait
0950   0788 CD 99 07    	call delayLCD
0951   078B             	
0952   078B 7E          	ld a,(hl)			;Get character
0953   078C A7          	and a				;Is it zero?
0954   078D 28 07       	jr z,lcd_asciiz_done	;If so, we're done
0955   078F             	
0956   078F 0E 71       	ld c, LCDDATA	;Data port
0957   0791 ED 79       	out (c),a			;Send data
0958   0793 23          	inc hl				;Next char
0959   0794 18 F0       	jr lcd_asciiz_char_loop
0960   0796             	
0961   0796             lcd_asciiz_done:
0962   0796 C1          	pop bc				;Restore
0963   0797 F1          	pop af
0964   0798 C9          	ret
0965   0799             
0966   0799             ; =========================================================
0967   0799             ; Delay LCD
0968   0799             ; =========================================================
0969   0799             delayLCD:
0970   0799             
0971   0799 00          	NOP
0972   079A 00          	NOP
0973   079B 00          	NOP
0974   079C 00          	NOP
0975   079D 00          	NOP
0976   079E 00          	NOP
0977   079F 00          	NOP
0978   07A0 00          	NOP
0979   07A1 00          	NOP
0980   07A2 00          	NOP
0981   07A3 00          	NOP ; KO
0982   07A4 00          	NOP
0983   07A5 00              NOP
0984   07A6 C9              ret
0985   07A7             
0986   07A7             	
0987   07A7             ; =========================================================
0988   07A7             ; Delay
0989   07A7             ; =========================================================
0990   07A7             delay:
0991   07A7 C5          	push bc                       ; 2.75 us
0992   07A8 06 FF           ld b, 255                     ; 1.75 us
0993   07AA             delay_loop_b:
0994   07AA 0E FF       	ld c, 255                     ; 1.75 us
0995   07AC             delay_loop:
0996   07AC 0D          	dec c                         ; 1 us
0997   07AD C2 AC 07        jp nz, delay_loop             ; true = 3 us, false 1.75 us
0998   07B0 05              dec b                         ; 1 us
0999   07B1 C2 AA 07        jp nz, delay_loop_b           ; true = 3 us, false 1.75 us
1000   07B4 C1              pop bc                        ; 2.50 us
1001   07B5 C9              ret   
1002   07B6             
1003   07B6             
1004   07B6             ; Check break key
1005   07B6 3E 40       CHKKEY: LD  A, $40
1006   07B8 D3 40       	OUT (KEY_OUT), A ; line 4
1007   07BA DB 40       	IN  A, (KEY_IN)
1008   07BC FE 01       	CP  1
1009   07BE C2 C6 07    	JP  NZ, GRET
1010   07C1 3E 03       	LD  A, CTRLC
1011   07C3 FE 00       	CP	0
1012   07C5 C9          	RET
1013   07C6             GRET:
1014   07C6 3E 00       	LD  A, 0
1015   07C8 FE 00       	CP 0
1016   07CA C9          	RET
1017   07CB             
1018   07CB             
1019   07CB             
1020   07CB             
1021   07CB             ; -----------------------------------------------------------------------------
1022   07CB             ;   KEYREAD - KEY In A
1023   07CB             ; -----------------------------------------------------------------------------
1024   07CB             KEYREADINIT:
1025   07CB C5              PUSH    BC
1026   07CC D5          	PUSH	DE
1027   07CD E5          	PUSH    HL
1028   07CE 1E 00       	LD      E, 0                    ; E will be the last pressed key
1029   07D0             READKEY:        
1030   07D0 26 01           LD      H, 1                    ; H is the line register, start with second
1031   07D2 06 00       	LD      B, 0                    ; Count lines for later multiplication	
1032   07D4 16 00       	LD      D, 0                    ; DE will be the adress for mask
1033   07D6             						
1034   07D6             NEXTKEY:        
1035   07D6 7C              LD      A, H						
1036   07D7 FE 00           CP      0                       ; All lines tried? 
1037   07D9 CA 14 08        JP      Z, KEYOUT               ; Then check if there was a key pressed
1038   07DC D3 40       	OUT     (KEY_OUT), A		    ; Put current line to register
1039   07DE DB 40       	IN      A, (KEY_IN)		        ; Input Keys
1040   07E0 E6 1F       	AND     $1F                     ; only 5 bits
1041   07E2 CB 24       	SLA     H                       ; Next line
1042   07E4 04              INC     B
1043   07E5 FE 00           CP      0                       ; Was key zero?
1044   07E7 CA D6 07        JP      Z, NEXTKEY              ; Then try again with next lines
1045   07EA 16 00           LD      D, 0                    ; In D will be the number of the key
1046   07EC             LOGARITHM:      
1047   07EC 14              INC     D	                    ; Add one per shift
1048   07ED CB 3F           SRL     A                       ; Shift key right
1049   07EF C2 EC 07        JP      NZ, LOGARITHM		    ; If not zero shift again
1050   07F2 15              DEC     D                       ; Was too much
1051   07F3 DB 40       	IN      A, (KEY_IN)
1052   07F5 E6 80           AND     $80                     ; Check if first bit set (shift key pressed)
1053   07F7 C2 00 08        JP      NZ, LOADSHIFT		    ; Then jump to read with shift
1054   07FA 7A              LD      A, D                    ; Put read key into accu
1055   07FB C6 1B           ADD     A, KEYMAP               ; Add base of key map array
1056   07FD C3 03 08        JP      ADDOFFSET               ; Jump to load key
1057   0800             LOADSHIFT:
1058   0800 7A              LD      A, D
1059   0801 C6 43           ADD     A, SHIFTKEYMAP          ; In this case add the base for shift		
1060   0803             ADDOFFSET:
1061   0803 C6 05           ADD     A, 5                    ; Add 5 for every line
1062   0805 10 FC           DJNZ    ADDOFFSET               ; Jump back (do while loop)
1063   0807 D6 05       	SUB     5                       ; Since do while is one too much
1064   0809             TRANSKEY:
1065   0809 A8              XOR     B                       ; Empty B
1066   080A 4F          	LD      C, A                    ; A will be address in BC
1067   080B 0A          	LD      A, (BC)	                ; Load key
1068   080C BB          	CP      E                       ; Same key?
1069   080D CA D0 07    	JP      Z, READKEY              ; Then from beginning
1070   0810 5F          	LD      E, A                    ; Otherwise save new key
1071   0811 C3 D0 07    	JP      READKEY	                ; And restart
1072   0814             KEYOUT:
1073   0814 7B              LD      A, E
1074   0815 1E 00           LD      E, 0                    ; empty it
1075   0817 B7              OR      A	                    ; Was a key read?
1076   0818 CA D0 07        JP      Z, READKEY              ; If not restart
1077   081B E1              POP     HL
1078   081C D1              POP     DE
1079   081D C1              POP     BC
1080   081E C9              RET
1081   081F             
1082   081F             
1083   081F             
1084   081F             
1085   081F             
1086   081F             ;-----------------------------------------
1087   081F             ; SEND AN ASCII STRING OUT THE SERIAL PORT
1088   081F             ;-----------------------------------------
1089   081F             ; 
1090   081F             ; SENDS A ZERO TERMINATED STRING OR 
1091   081F             ; 128 CHARACTERS MAX. OUT THE SERIAL PORT
1092   081F             ;
1093   081F             ;      ENTRY : HL = POINTER TO 00H TERMINATED STRING
1094   081F             ;      EXIT  : NONE
1095   081F             ;
1096   081F             ;       MODIFIES : A,B,C
1097   081F             ;          
1098   081F 06 80       SNDMSG: LD    B,128         ;128 CHARS MAX
1099   0821 7E          SDMSG1: LD    A,(HL)        ;GET THE CHAR
1100   0822 FE 00              CP    00H          ;ZERO TERMINATOR?
1101   0824 28 06              JR    Z,SDMSG2      ;FOUND A ZERO TERMINATOR, EXIT  
1102   0826 CD 2D 08           CALL  OUTCH         ;TRANSMIT THE CHAR
1103   0829 23                 INC   HL
1104   082A 10 F5              DJNZ  SDMSG1        ;128 CHARS MAX!    
1105   082C C9          SDMSG2: RET
1106   082D             
1107   082D             
1108   082D             
1109   082D             ;-----------------------------------
1110   082D             ; OUTPUT A CHARACTER TO THE TERMINAL
1111   082D             ;-----------------------------------       
1112   082D DD 2A AA FF OUTCH:  LD   IX,(PUTCH)
1113   0831 DD E9              JP   (IX)
1114   0833             ;------------------------------------
1115   0833             ; INPUT A CHARACTER FROM THE TERMINAL
1116   0833             ;------------------------------------
1117   0833 DD 2A AC FF INCH:  LD   IX,(GETCH)
1118   0837 DD E9             JP   (IX)
1119   0839             
1120   0839             
1121   0839             
1122   0839             ;------------------------
1123   0839             ; SERIAL TRANSMIT ROUTINE
1124   0839             ;------------------------
1125   0839             ;TRANSMIT BYTE SERIALLY ON DOUT
1126   0839             ;
1127   0839             ; ENTRY : A = BYTE TO TRANSMIT
1128   0839             ;  EXIT : NO REGISTERS MODIFIED
1129   0839             ;
1130   0839 F5          TXDATA:	PUSH	AF
1131   083A C5          	PUSH	BC
1132   083B E5          	PUSH	HL
1133   083C 2A C0 FF    	LD	HL,(BAUD)
1134   083F 4F          	LD	C,A
1135   0840             ;
1136   0840             ; TRANSMIT START BIT
1137   0840             ;
1138   0840 AF          	XOR	A
1139   0841 D3 C0       	OUT	(SERIAL_TX_PORT),A
1140   0843 CD 91 08    	CALL	BITIME
1141   0846             ;
1142   0846             ; TRANSMIT DATA
1143   0846             ;
1144   0846 06 08       	LD	B,08H
1145   0848 CB 09       	RRC	C
1146   084A CB 09       NXTBIT:	RRC	C	;SHIFT BITS TO D6,
1147   084C 79          	LD	A,C	;LSB FIRST AND OUTPUT
1148   084D E6 40       	AND	40H	;THEM FOR ONE BIT TIME.
1149   084F D3 C0       	OUT	(SERIAL_TX_PORT),A
1150   0851 CD 91 08    	CALL	BITIME
1151   0854 10 F4       	DJNZ	NXTBIT
1152   0856             ;
1153   0856             ; SEND STOP BITS
1154   0856             ;
1155   0856 3E 40       	LD	A,40H
1156   0858 D3 C0       	OUT	(SERIAL_TX_PORT),A
1157   085A CD 91 08    	CALL	BITIME
1158   085D CD 91 08    	CALL	BITIME
1159   0860 E1          	POP	HL
1160   0861 C1          	POP	BC
1161   0862 F1          	POP	AF
1162   0863 C9          	RET
1163   0864             ;-----------------------
1164   0864             ; SERIAL RECEIVE ROUTINE
1165   0864             ;-----------------------
1166   0864             ;RECEIVE SERIAL BYTE FROM DIN
1167   0864             ;
1168   0864             ; ENTRY : NONE
1169   0864             ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
1170   0864             ;
1171   0864             ; REGISTERS MODIFIED A AND F
1172   0864             ;
1173   0864 C5          RXDATA:	PUSH	BC
1174   0865 E5          	PUSH	HL
1175   0866             ;
1176   0866             ; WAIT FOR START BIT 
1177   0866             ;
1178   0866 DB C0       RXDAT1: IN	A,(SERIAL_RX_PORT)
1179   0868 CB 7F       	    BIT	7,A
1180   086A 20 FA       	    JR	NZ,RXDAT1	;NO START BIT
1181   086C             ;
1182   086C             ; DETECTED START BIT
1183   086C             ;
1184   086C 2A C0 FF    	LD	HL,(BAUD)
1185   086F CB 3C       	SRL	H
1186   0871 CB 1D       	RR	L 	;DELAY FOR HALF BIT TIME
1187   0873 CD 91 08    	CALL 	BITIME
1188   0876 DB C0       	IN	A,(SERIAL_RX_PORT)
1189   0878 CB 7F       	BIT	7,A
1190   087A 20 EA       	JR	NZ,RXDAT1	;START BIT NOT VALID
1191   087C             ;
1192   087C             ; DETECTED VALID START BIT,READ IN DATA
1193   087C             ;
1194   087C 06 08       	LD	B,08H
1195   087E 2A C0 FF    RXDAT2:	LD	HL,(BAUD)
1196   0881 CD 91 08    	CALL	BITIME	;DELAY ONE BIT TIME
1197   0884 DB C0       	IN	A,(SERIAL_RX_PORT)
1198   0886 CB 17       	RL	A
1199   0888 CB 19       	RR	C	;SHIFT BIT INTO DATA REG
1200   088A 10 F2       	DJNZ	RXDAT2
1201   088C 79          	LD	A,C
1202   088D B7          	OR	A	;CLEAR CARRY FLAG
1203   088E E1              POP	HL
1204   088F C1          	POP	BC
1205   0890 C9          	RET
1206   0891             ;---------------
1207   0891             ; BIT TIME DELAY
1208   0891             ;---------------
1209   0891             ;DELAY FOR ONE SERIAL BIT TIME
1210   0891             ;ENTRY : HL = DELAY TIME
1211   0891             ; NO REGISTERS MODIFIED
1212   0891             ;
1213   0891 E5          BITIME:	PUSH	HL
1214   0892 D5          	PUSH	DE
1215   0893 11 01 00    	LD	DE,0001H
1216   0896 ED 52       BITIM1:	SBC	HL,DE
1217   0898 D2 96 08    	JP	NC,BITIM1
1218   089B D1          	POP	DE
1219   089C E1          	POP	HL
1220   089D C9          	RET
1221   089E             
1222   089E             
1223   089E             
1224   089E             ;-----------------
1225   089E             ; ONE SECOND DELAY
1226   089E             ;-----------------
1227   089E             ;
1228   089E             ; ENTRY : NONE
1229   089E             ; EXIT : FLAG REGISTER MODIFIED
1230   089E             ;
1231   089E C5          DELONE:	PUSH	BC
1232   089F D5          	PUSH	DE
1233   08A0 E5          	PUSH	HL
1234   08A1 11 01 00    	LD	DE,0001H
1235   08A4 21 70 08    	LD	HL,0870H
1236   08A7 06 92       DELON1:	LD	B,92H
1237   08A9 10 FE       DELON2:	DJNZ	DELON2	;INNER LOOP
1238   08AB ED 52       	SBC	HL,DE
1239   08AD D2 A7 08    	JP	NC,DELON1	;OUTER LOOP
1240   08B0 E1          	POP	HL
1241   08B1 D1          	POP	DE
1242   08B2 C1          	POP	BC
1243   08B3 C9          	RET
1244   08B4             
1245   08B4             
1246   08B4 0D0D0A5A3830WELLCOME: .db CR, CR, LF,"Z80 Mini Iniciado", CR, LF, 00H
1246   08BA 204D696E6920496E69636961646F0D0A00
1247   08CB 0D0D0A496E69MGS_INIT_BASIC: .db CR, CR, LF,"Iniciando MS Basic", CR, LF, 00H
1247   08D1 6369616E646F204D532042617369630D0A00
1248   08E3             
1249   08E3             .end
tasm: Number of errors = 0
