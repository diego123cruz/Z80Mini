                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.1 #14901 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _pinIn
                                     13 	.globl _delay_ms
                                     14 	.globl _i2c_write
                                     15 	.globl _i2c_close
                                     16 	.globl _i2c_open
                                     17 	.globl _lcd_draw_circle
                                     18 	.globl _lcd_draw_line
                                     19 	.globl _lcd_cursor_off
                                     20 	.globl _lcd_show_buffer
                                     21 	.globl _lcd_clear_buffer
                                     22 	.globl _pontos
                                     23 	.globl _new_ball
                                     24 	.globl _incPontos
                                     25 	.globl _showPontos
                                     26 	.globl _showVidas
                                     27 	.globl _hitSound
                                     28 	.globl _gameoverSound
                                     29 	.globl _fireInvSound
                                     30 ;--------------------------------------------------------
                                     31 ; special function registers
                                     32 ;--------------------------------------------------------
                                     33 ;--------------------------------------------------------
                                     34 ; ram data
                                     35 ;--------------------------------------------------------
                                     36 	.area _DATA
                                     37 ;--------------------------------------------------------
                                     38 ; ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area _INITIALIZED
    00000000                         41 _pontos::
    00000000                         42 	.ds 1
                                     43 ;--------------------------------------------------------
                                     44 ; absolute external ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area _DABS (ABS)
                                     47 ;--------------------------------------------------------
                                     48 ; global & static initialisations
                                     49 ;--------------------------------------------------------
                                     50 	.area _HOME
                                     51 	.area _GSINIT
                                     52 	.area _GSFINAL
                                     53 	.area _GSINIT
                                     54 ;--------------------------------------------------------
                                     55 ; Home
                                     56 ;--------------------------------------------------------
                                     57 	.area _HOME
                                     58 	.area _HOME
                                     59 ;--------------------------------------------------------
                                     60 ; code
                                     61 ;--------------------------------------------------------
                                     62 	.area _CODE
                                     63 ;main.c:15: int main(void) {
                                     64 ;	---------------------------------
                                     65 ; Function main
                                     66 ; ---------------------------------
    00000000                         67 _main::
    00000000 CDr00r00         [17]   68 	call	___sdcc_enter_ix
    00000003 21 FA FF         [10]   69 	ld	hl, #-6
    00000006 39               [11]   70 	add	hl, sp
    00000007 F9               [ 6]   71 	ld	sp, hl
                                     72 ;main.c:16: byte px=60;
    00000008 DD 36 FA 3C      [19]   73 	ld	-6 (ix), #0x3c
                                     74 ;main.c:18: byte count=0;
    0000000C DD 36 FB 00      [19]   75 	ld	-5 (ix), #0x00
                                     76 ;main.c:19: pontos=0;
    00000010 AF               [ 4]   77 	xor	a, a
    00000011 32r00r00         [13]   78 	ld	(_pontos+0), a
                                     79 ;main.c:20: byte erros=3;
    00000014 DD 36 FC 03      [19]   80 	ld	-4 (ix), #0x03
                                     81 ;main.c:22: byte bx=60;
    00000018 DD 36 FD 3C      [19]   82 	ld	-3 (ix), #0x3c
                                     83 ;main.c:23: byte by=3;
    0000001C DD 36 FE 03      [19]   84 	ld	-2 (ix), #0x03
                                     85 ;main.c:25: lcd_cursor_off();
    00000020 CDr00r00         [17]   86 	call	_lcd_cursor_off
                                     87 ;main.c:27: lcd_clear_buffer();
    00000023 CDr00r00         [17]   88 	call	_lcd_clear_buffer
                                     89 ;main.c:30: i2c_open(0x0E);
    00000026 3E 0E            [ 7]   90 	ld	a, #0x0e
    00000028 CDr00r00         [17]   91 	call	_i2c_open
                                     92 ;main.c:31: i2c_write(0x00);
    0000002B AF               [ 4]   93 	xor	a, a
    0000002C CDr00r00         [17]   94 	call	_i2c_write
                                     95 ;main.c:32: i2c_write(0x01); // Liga somente o display LOW (3 e 4)
    0000002F 3E 01            [ 7]   96 	ld	a, #0x01
    00000031 CDr00r00         [17]   97 	call	_i2c_write
                                     98 ;main.c:33: i2c_close();
    00000034 CDr00r00         [17]   99 	call	_i2c_close
                                    100 ;main.c:35: showPontos(pontos);
    00000037 3Ar00r00         [13]  101 	ld	a, (_pontos)
    0000003A CDr4Er01         [17]  102 	call	_showPontos
                                    103 ;main.c:36: showVidas(erros);
    0000003D 3E 03            [ 7]  104 	ld	a, #0x03
    0000003F CDr62r01         [17]  105 	call	_showVidas
                                    106 ;main.c:38: while(TRUE) {
    00000042                        107 00123$:
                                    108 ;main.c:40: byte read = pinIn(#0x40);
    00000042 3E 40            [ 7]  109 	ld	a, #0x40
    00000044 CDr00r00         [17]  110 	call	_pinIn
    00000047 5F               [ 4]  111 	ld	e, a
                                    112 ;main.c:42: byte input = 0;
    00000048 DD 36 FF 00      [19]  113 	ld	-1 (ix), #0x00
                                    114 ;main.c:43: if (read != 0) {
    0000004C 7B               [ 4]  115 	ld	a, e
    0000004D B7               [ 4]  116 	or	a, a
    0000004E 28 03            [12]  117 	jr	Z, 00102$
                                    118 ;main.c:44: input = read;
    00000050 DD 73 FF         [19]  119 	ld	-1 (ix), e
    00000053                        120 00102$:
                                    121 ;main.c:48: if (count >= 10) {
    00000053 DD 7E FB         [19]  122 	ld	a, -5 (ix)
    00000056 D6 0A            [ 7]  123 	sub	a, #0x0a
    00000058 DAr2Br01         [10]  124 	jp	C, 00121$
                                    125 ;main.c:54: if (input == 0x40) {
    0000005B DD 7E FF         [19]  126 	ld	a, -1 (ix)
    0000005E D6 40            [ 7]  127 	sub	a, #0x40
    00000060 20 0F            [12]  128 	jr	NZ, 00106$
                                    129 ;main.c:55: if (px > 2) {
    00000062 3E 02            [ 7]  130 	ld	a, #0x02
    00000064 DD 96 FA         [19]  131 	sub	a, -6 (ix)
    00000067 30 08            [12]  132 	jr	NC, 00106$
                                    133 ;main.c:56: px = px - 3;
    00000069 DD 7E FA         [19]  134 	ld	a, -6 (ix)
    0000006C C6 FD            [ 7]  135 	add	a, #0xfd
    0000006E DD 77 FA         [19]  136 	ld	-6 (ix), a
    00000071                        137 00106$:
                                    138 ;main.c:60: if (input == 0x10) {
    00000071 DD 7E FF         [19]  139 	ld	a, -1 (ix)
    00000074 D6 10            [ 7]  140 	sub	a, #0x10
    00000076 20 0F            [12]  141 	jr	NZ, 00110$
                                    142 ;main.c:61: if (px < 116) {
    00000078 DD 7E FA         [19]  143 	ld	a, -6 (ix)
    0000007B D6 74            [ 7]  144 	sub	a, #0x74
    0000007D 30 08            [12]  145 	jr	NC, 00110$
                                    146 ;main.c:62: px = px + 3;
    0000007F DD 7E FA         [19]  147 	ld	a, -6 (ix)
    00000082 C6 03            [ 7]  148 	add	a, #0x03
    00000084 DD 77 FA         [19]  149 	ld	-6 (ix), a
    00000087                        150 00110$:
                                    151 ;main.c:67: lcd_clear_buffer();
    00000087 CDr00r00         [17]  152 	call	_lcd_clear_buffer
                                    153 ;main.c:68: lcd_draw_line(px, py, px+10, py);
    0000008A DD 7E FA         [19]  154 	ld	a, -6 (ix)
    0000008D DD 77 FF         [19]  155 	ld	-1 (ix), a
    00000090 C6 0A            [ 7]  156 	add	a, #0x0a
    00000092 26 3C            [ 7]  157 	ld	h, #0x3c
    00000094 E5               [11]  158 	push	hl
    00000095 33               [ 6]  159 	inc	sp
    00000096 F5               [11]  160 	push	af
    00000097 33               [ 6]  161 	inc	sp
    00000098 2E 3C            [ 7]  162 	ld	l, #0x3c
    0000009A DD 7E FA         [19]  163 	ld	a, -6 (ix)
    0000009D CDr00r00         [17]  164 	call	_lcd_draw_line
                                    165 ;main.c:69: lcd_draw_circle(bx, by, 1);
    000000A0 3E 01            [ 7]  166 	ld	a, #0x01
    000000A2 F5               [11]  167 	push	af
    000000A3 33               [ 6]  168 	inc	sp
    000000A4 DD 6E FE         [19]  169 	ld	l, -2 (ix)
    000000A7 DD 7E FD         [19]  170 	ld	a, -3 (ix)
    000000AA CDr00r00         [17]  171 	call	_lcd_draw_circle
                                    172 ;main.c:70: lcd_show_buffer();
    000000AD CDr00r00         [17]  173 	call	_lcd_show_buffer
                                    174 ;main.c:74: if (py == by) {
    000000B0 DD 7E FE         [19]  175 	ld	a, -2 (ix)
    000000B3 D6 3C            [ 7]  176 	sub	a, #0x3c
    000000B5 20 37            [12]  177 	jr	NZ, 00115$
                                    178 ;main.c:75: if (bx+1 >= px && bx <= px+10) {
    000000B7 DD 4E FD         [19]  179 	ld	c, -3 (ix)
    000000BA 06 00            [ 7]  180 	ld	b, #0x00
    000000BC 69               [ 4]  181 	ld	l, c
    000000BD 60               [ 4]  182 	ld	h, b
    000000BE 23               [ 6]  183 	inc	hl
    000000BF DD 5E FA         [19]  184 	ld	e, -6 (ix)
    000000C2 AF               [ 4]  185 	xor	a, a
    000000C3 57               [ 4]  186 	ld	d, a
    000000C4 ED 52            [15]  187 	sbc	hl, de
    000000C6 38 26            [12]  188 	jr	C, 00115$
    000000C8 21 0A 00         [10]  189 	ld	hl, #0x000a
    000000CB 19               [11]  190 	add	hl, de
    000000CC 7D               [ 4]  191 	ld	a, l
    000000CD 91               [ 4]  192 	sub	a, c
    000000CE 7C               [ 4]  193 	ld	a, h
    000000CF 98               [ 4]  194 	sbc	a, b
    000000D0 E2rD5r00         [10]  195 	jp	PO, 00217$
    000000D3 EE 80            [ 7]  196 	xor	a, #0x80
    000000D5                        197 00217$:
    000000D5 FArEEr00         [10]  198 	jp	M, 00115$
                                    199 ;main.c:76: incPontos();
    000000D8 CDr44r01         [17]  200 	call	_incPontos
                                    201 ;main.c:77: showPontos(pontos);
    000000DB 3Ar00r00         [13]  202 	ld	a, (_pontos)
    000000DE CDr4Er01         [17]  203 	call	_showPontos
                                    204 ;main.c:78: bx = new_ball();
    000000E1 CDr37r01         [17]  205 	call	_new_ball
    000000E4 DD 77 FD         [19]  206 	ld	-3 (ix), a
                                    207 ;main.c:79: by = 1;
    000000E7 DD 36 FE 01      [19]  208 	ld	-2 (ix), #0x01
                                    209 ;main.c:80: hitSound();
    000000EB CDr76r01         [17]  210 	call	_hitSound
    000000EE                        211 00115$:
                                    212 ;main.c:84: if (by > 65) {
    000000EE 3E 41            [ 7]  213 	ld	a, #0x41
    000000F0 DD 96 FE         [19]  214 	sub	a, -2 (ix)
    000000F3 30 16            [12]  215 	jr	NC, 00117$
                                    216 ;main.c:85: bx = new_ball();
    000000F5 CDr37r01         [17]  217 	call	_new_ball
    000000F8 DD 77 FD         [19]  218 	ld	-3 (ix), a
                                    219 ;main.c:86: by = 1;
    000000FB DD 36 FE 01      [19]  220 	ld	-2 (ix), #0x01
                                    221 ;main.c:87: erros = erros - 1;
                                    222 ;main.c:88: showVidas(erros);
    000000FF DD 35 FC         [23]  223 	dec	-4 (ix)
    00000102 DD 7E FC         [19]  224 	ld	a, -4 (ix)
    00000105 CDr62r01         [17]  225 	call	_showVidas
                                    226 ;main.c:89: fireInvSound();
    00000108 CDr9Ar01         [17]  227 	call	_fireInvSound
    0000010B                        228 00117$:
                                    229 ;main.c:92: if (erros == 0) {
    0000010B DD 7E FC         [19]  230 	ld	a, -4 (ix)
    0000010E B7               [ 4]  231 	or	a, a
    0000010F 20 13            [12]  232 	jr	NZ, 00119$
                                    233 ;main.c:93: erros = 3;
    00000111 DD 36 FC 03      [19]  234 	ld	-4 (ix), #0x03
                                    235 ;main.c:94: pontos = 0;
                                    236 ;main.c:96: showPontos(pontos);
    00000115 AF               [ 4]  237 	xor	a, a
    00000116 32r00r00         [13]  238 	ld	(_pontos+0), a
    00000119 CDr4Er01         [17]  239 	call	_showPontos
                                    240 ;main.c:97: showVidas(erros);
    0000011C 3E 03            [ 7]  241 	ld	a, #0x03
    0000011E CDr62r01         [17]  242 	call	_showVidas
                                    243 ;main.c:98: gameoverSound();
    00000121 CDr88r01         [17]  244 	call	_gameoverSound
    00000124                        245 00119$:
                                    246 ;main.c:100: by=by+1;
    00000124 DD 34 FE         [23]  247 	inc	-2 (ix)
                                    248 ;main.c:101: count=0;
    00000127 DD 36 FB 00      [19]  249 	ld	-5 (ix), #0x00
    0000012B                        250 00121$:
                                    251 ;main.c:103: count = count + 1;
    0000012B DD 34 FB         [23]  252 	inc	-5 (ix)
                                    253 ;main.c:104: delay_ms(1);
    0000012E 21 01 00         [10]  254 	ld	hl, #0x0001
    00000131 CDr00r00         [17]  255 	call	_delay_ms
                                    256 ;main.c:106: }
    00000134 C3r42r00         [10]  257 	jp	00123$
                                    258 ;main.c:108: byte new_ball() {
                                    259 ;	---------------------------------
                                    260 ; Function new_ball
                                    261 ; ---------------------------------
    00000137                        262 _new_ball::
                                    263 ;main.c:109: while(1) {
    00000137                        264 00105$:
                                    265 ;main.c:110: byte x = rand();
    00000137 CDr00r00         [17]  266 	call	_rand
    0000013A 7B               [ 4]  267 	ld	a, e
                                    268 ;main.c:111: if (x > 3 && x < 124) {
    0000013B FE 04            [ 7]  269 	cp	a, #0x04
    0000013D 38 F8            [12]  270 	jr	C, 00105$
    0000013F FE 7C            [ 7]  271 	cp	a, #0x7c
    00000141 30 F4            [12]  272 	jr	NC, 00105$
                                    273 ;main.c:112: return x;
                                    274 ;main.c:115: }
    00000143 C9               [10]  275 	ret
                                    276 ;main.c:117: void incPontos(void) __naked {
                                    277 ;	---------------------------------
                                    278 ; Function incPontos
                                    279 ; ---------------------------------
    00000144                        280 _incPontos::
                                    281 ;main.c:124: __endasm;
    00000144 3Ar00r00         [13]  282 	ld	a, (_pontos) ; carrega o valor atual em A
    00000147 C6 01            [ 7]  283 	add	a, #1 ; incrementa 1
    00000149 27               [ 4]  284 	daa	; ajusta para BCD
    0000014A 32r00r00         [13]  285 	ld	(_pontos), a ; salva de volta
    0000014D C9               [10]  286 	ret
                                    287 ;main.c:125: }
                                    288 ;main.c:127: void showPontos(byte p) {
                                    289 ;	---------------------------------
                                    290 ; Function showPontos
                                    291 ; ---------------------------------
    0000014E                        292 _showPontos::
    0000014E 4F               [ 4]  293 	ld	c, a
                                    294 ;main.c:128: i2c_open(0x0E);
    0000014F C5               [11]  295 	push	bc
    00000150 3E 0E            [ 7]  296 	ld	a, #0x0e
    00000152 CDr00r00         [17]  297 	call	_i2c_open
    00000155 3E 01            [ 7]  298 	ld	a, #0x01
    00000157 CDr00r00         [17]  299 	call	_i2c_write
    0000015A C1               [10]  300 	pop	bc
                                    301 ;main.c:130: i2c_write(p);
    0000015B 79               [ 4]  302 	ld	a, c
    0000015C CDr00r00         [17]  303 	call	_i2c_write
                                    304 ;main.c:131: i2c_close();
                                    305 ;main.c:132: }
    0000015F C3r00r00         [10]  306 	jp	_i2c_close
                                    307 ;main.c:134: void showVidas(byte v) {
                                    308 ;	---------------------------------
                                    309 ; Function showVidas
                                    310 ; ---------------------------------
    00000162                        311 _showVidas::
    00000162 4F               [ 4]  312 	ld	c, a
                                    313 ;main.c:135: i2c_open(0x0E);
    00000163 C5               [11]  314 	push	bc
    00000164 3E 0E            [ 7]  315 	ld	a, #0x0e
    00000166 CDr00r00         [17]  316 	call	_i2c_open
    00000169 3E 03            [ 7]  317 	ld	a, #0x03
    0000016B CDr00r00         [17]  318 	call	_i2c_write
    0000016E C1               [10]  319 	pop	bc
                                    320 ;main.c:137: i2c_write(v);
    0000016F 79               [ 4]  321 	ld	a, c
    00000170 CDr00r00         [17]  322 	call	_i2c_write
                                    323 ;main.c:138: i2c_close();
                                    324 ;main.c:139: }
    00000173 C3r00r00         [10]  325 	jp	_i2c_close
                                    326 ;main.c:141: void hitSound() {
                                    327 ;	---------------------------------
                                    328 ; Function hitSound
                                    329 ; ---------------------------------
    00000176                        330 _hitSound::
                                    331 ;main.c:142: i2c_open(0x0E);
    00000176 3E 0E            [ 7]  332 	ld	a, #0x0e
    00000178 CDr00r00         [17]  333 	call	_i2c_open
                                    334 ;main.c:143: i2c_write(0x05);
    0000017B 3E 05            [ 7]  335 	ld	a, #0x05
    0000017D CDr00r00         [17]  336 	call	_i2c_write
                                    337 ;main.c:144: i2c_write(0x12);
    00000180 3E 12            [ 7]  338 	ld	a, #0x12
    00000182 CDr00r00         [17]  339 	call	_i2c_write
                                    340 ;main.c:145: i2c_close();
                                    341 ;main.c:146: }
    00000185 C3r00r00         [10]  342 	jp	_i2c_close
                                    343 ;main.c:148: void gameoverSound() {
                                    344 ;	---------------------------------
                                    345 ; Function gameoverSound
                                    346 ; ---------------------------------
    00000188                        347 _gameoverSound::
                                    348 ;main.c:149: i2c_open(0x0E);
    00000188 3E 0E            [ 7]  349 	ld	a, #0x0e
    0000018A CDr00r00         [17]  350 	call	_i2c_open
                                    351 ;main.c:150: i2c_write(0x05);
    0000018D 3E 05            [ 7]  352 	ld	a, #0x05
    0000018F CDr00r00         [17]  353 	call	_i2c_write
                                    354 ;main.c:151: i2c_write(0x10);
    00000192 3E 10            [ 7]  355 	ld	a, #0x10
    00000194 CDr00r00         [17]  356 	call	_i2c_write
                                    357 ;main.c:152: i2c_close();
                                    358 ;main.c:153: }
    00000197 C3r00r00         [10]  359 	jp	_i2c_close
                                    360 ;main.c:155: void fireInvSound() {
                                    361 ;	---------------------------------
                                    362 ; Function fireInvSound
                                    363 ; ---------------------------------
    0000019A                        364 _fireInvSound::
                                    365 ;main.c:156: i2c_open(0x0E);
    0000019A 3E 0E            [ 7]  366 	ld	a, #0x0e
    0000019C CDr00r00         [17]  367 	call	_i2c_open
                                    368 ;main.c:157: i2c_write(0x05);
    0000019F 3E 05            [ 7]  369 	ld	a, #0x05
    000001A1 CDr00r00         [17]  370 	call	_i2c_write
                                    371 ;main.c:158: i2c_write(0x01);
    000001A4 3E 01            [ 7]  372 	ld	a, #0x01
    000001A6 CDr00r00         [17]  373 	call	_i2c_write
                                    374 ;main.c:159: i2c_close();
                                    375 ;main.c:160: }
    000001A9 C3r00r00         [10]  376 	jp	_i2c_close
                                    377 	.area _CODE
                                    378 	.area _INITIALIZER
    00000000                        379 __xinit__pontos:
    00000000 00                     380 	.db #0x00	; 0
                                    381 	.area _CABS (ABS)
