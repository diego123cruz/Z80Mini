              	; --------------------------------------
              	; zasm: assemble "Main.asm"
              	; date: 2025-06-15 23:21:23
              	; --------------------------------------


              	; **********************************************************************
              	; **  Z80 Mini GameCore - API - Public functions                      **
              	; **********************************************************************
              	;----------------------------------------------------------------------------------------------------------
              	;	Display LCD
              	;----------------------------------------------------------------------------------------------------------
0100:         	INIT_LCD			        .EQU	$0100			;Initalise the LCD
0103:         	CLEAR_GBUF			        .EQU	$0103			;Clear the Graphics Buffer
0106:         	CLEAR_GR_LCD			    .EQU	$0106			;Clear the Graphics LCD Screen
0109:         	CLEAR_TXT_LCD			    .EQU	$0109			;Clear the Text LCD Screen
010C:         	SET_GR_MODE			        .EQU	$010C			;Set Graphics Mode
010F:         	SET_TXT_MODE			    .EQU	$010F			;Set Text Mode
0112:         	DRAW_BOX			        .EQU	$0112			;Draw a rectangle between two points
0115:         	DRAW_LINE			        .EQU	$0115			;Draw a line between two points
0118:         	DRAW_CIRCLE			        .EQU	$0118			;Draw a circle from Mid X,Y to Radius
011B:         	DRAW_PIXEL			        .EQU	$011B			;Draw one pixel at X,Y
011E:         	FILL_BOX			        .EQU	$011E			;Draw a filled rectangle between two points
0121:         	FILL_CIRCLE			        .EQU	$0121			;Draw a filled circle from Mid X,Y to Radius
0124:         	PLOT_TO_LCD			        .EQU	$0124			;Display the Graphics Buffer to the LCD Screen
0127:         	PRINT_STRING			    .EQU	$0127			;Print Text on the screen in a given row
012A:         	PRINT_CHARS			        .EQU	$012A			;Print Characters on the screen in a given row and column
012D:         	DELAY_US			        .EQU	$012D			;Microsecond delay for LCD updates
0130:         	DELAY_MS             		.EQU	$0130			;Millisecond delay for LCD updates
0133:         	SET_BUF_CLEAR			    .EQU	$0133			;Clear the Graphics buffer on after Plotting to the screen
0136:         	SET_BUF_NO_CLEAR     		.EQU	$0136			;Retain the Graphics buffer on after Plotting to the screen
0139:         	CLEAR_PIXEL          		.EQU	$0139			;Remove a Pixel at X,Y
013C:         	FLIP_PIXEL			        .EQU	$013C			;Flip a Pixel On/Off at X,Y
013F:         	LCD_INST             		.EQU	$013F			;Send a parallel or serial instruction to LCD
0142:         	LCD_DATA             		.EQU	$0142			;Send a parallel or serial datum to LCD
0145:         	SER_SYNC             		.EQU	$0145			;Send serial synchronise byte to LCD
0148:         	DRAW_GRAPHIC         		.EQU	$0148			;Draw an ASCII charcter or Sprite to the LCD
014B:         	INV_GRAPHIC          		.EQU	$014B			;Inverse graphics printing
014E:         	INIT_TERMINAL        		.EQU	$014E			;Initialize the LCD for terminal emulation
0151:         	SEND_CHAR_TO_GLCD    		.EQU	$0151			;Send an ASCII Character to the LCD
0154:         	SEND_STRING_TO_GLCD 		.EQU	$0154			;Send an ASCII String to the LCD
0157:         	SEND_A_TO_GLCD       		.EQU	$0157			;Send register A to the LCD
015A:         	SEND_HL_TO_GLCD      		.EQU	$015A			;Send register HL to the LCD
015D:         	SET_CURSOR           		.EQU	$015D			;Set the graphics cursor
0160:         	GET_CURSOR           		.EQU	$0160			;Get the current cursor
0163:         	DISPLAY_CURSOR       		.EQU	$0163			;Set Cursor on or off
              	;----------------------------------------------------------------------------------------------------------
              	;	UTIL
              	;----------------------------------------------------------------------------------------------------------
0166:         	H_Delay              		.EQU	$0166			;Delay in milliseconds (DE in millis)
0169:         	LCD_PRINT_STRING            .EQU    $0169           ;Print string HL, end with 0 EX: "Test", $00
              	;----------------------------------------------------------------------------------------------------------
              	;	I2C Board
              	;----------------------------------------------------------------------------------------------------------
016C:         	I2C_Open     			    .EQU	$016C			;Start i2c (Device address in A)
016F:         	I2C_Close             		.EQU	$016F			;Close i2c 
0172:         	I2C_Read              		.EQU	$0172			;I2C Read (data in A)
0175:         	I2C_Write 			        .EQU	$0175			;I2C Write (data in A)
0178:         	I2CLIST                     .EQU    $0178           ;I2C List devices on lcd
              	
017B:         	CLEAR_COLLISION             .EQU    $017B           ; lampa a flag de colisao
017E:         	CHECK_COLLISION             .EQU    $017E           ; JP Z, SEM_COLISAO. JP NZ, COLISAO.
              	
0181:         	INIT_GAME_WAIT_START        .EQU   $0181        ; Chamar no setup, aguarda press start e returna, dar um (LD HL, setup) e (PUSH HL).
0184:         	CHECK_GAMEOVER_WAIT_START   .EQU    $0184   ; Chamar no loop para verificar gameover e depois aguarda press start e ret para o inicio
0187:         	SET_GAMEOVER                .EQU    $0187                 ; Seta a flag de gameover....
              	
              	
              	;----------------------------------------------------------------------------------------------------------
              	;	FIM
              	;----------------------------------------------------------------------------------------------------------
              	
              	
              	;         - Ports:
              	;               - Onboard IN/OUT: 40H
              	;					- Controle - pullDown (Input)
              	;						- bit0 - A
              	;						- bit1 - B
              	;						- bit2 - Start
              	;						- bit3 - Select
              	;						- bit4 - Right
              	;						- bit5 - Down
              	;						- bit6 - Left
              	;						- bit7 - Up
              	
              	
8000:         	.org $8000
8000:         	inicio:
              	    ;liga display
8000: 3E0E    	    ld a, 0x0e
8002: CD6C01  	    call I2C_Open
8005: 3E00    	    ld a, 0x00
8007: CD7501  	    call I2C_Write
800A: 3E03    	    ld a, 0x03
800C: CD7501  	    call I2C_Write
800F: CD6F01  	    call I2C_Close
              	
              	
8012:         	loop:
              	    ; le ricoh223 - segundos
8012: 3E64    	    ld a, 0x64
8014: CD6C01  	    call I2C_Open
8017: 3E00    	    ld a, 0x00 ; segundos
8019: CD7501  	    call I2C_Write
801C: 3E65    	    ld a, 0x64+1 ; read is addrr + 1
801E: CD6C01  	    call I2C_Open
8021: CD7201  	    call I2C_Read
8024: 32C080  	    ld (segundos), a
8027: CD6F01  	    call I2C_Close
              	    
802A: 113200  	    ld de, $0032
802D: CD6601  	    call H_Delay
              	    
              	    ; le ricoh223 - minutos
8030: 3E64    	    ld a, 0x64
8032: CD6C01  	    call I2C_Open
8035: 3E10    	    ld a, 0x10 ; minutos
8037: CD7501  	    call I2C_Write
803A: 3E65    	    ld a, 0x64+1 ; read is addrr + 1
803C: CD6C01  	    call I2C_Open
803F: CD7201  	    call I2C_Read
8042: E67F    	    and 0b01111111
8044: 32BF80  	    ld (minutos), a
8047: CD6F01  	    call I2C_Close
              	    
804A: 113200  	    ld de, $0032
804D: CD6601  	    call H_Delay
              	    
              	    ; le ricoh223 - hora
8050: 3E64    	    ld a, 0x64
8052: CD6C01  	    call I2C_Open
8055: 3E20    	    ld a, 0x20 ; hora
8057: CD7501  	    call I2C_Write
805A: 3E65    	    ld a, 0x64+1 ; read is addrr + 1
805C: CD6C01  	    call I2C_Open
805F: CD7201  	    call I2C_Read
8062: E61F    	    and 0b00011111
8064: 32BE80  	    ld (horas), a
8067: CD6F01  	    call I2C_Close
              	
806A: 113200  	    ld de, $0032
806D: CD6601  	    call H_Delay
              	
              	
              	    ;display escreve low
8070: 3E0E    	    ld a, 0x0e
8072: CD6C01  	    call I2C_Open
8075: 3E01    	    ld a, 0x01
8077: CD7501  	    call I2C_Write
807A: 3ABF80  	    ld a, (minutos)
807D: CD7501  	    call I2C_Write
8080: CD6F01  	    call I2C_Close
              	    
8083: 113200  	    ld de, $0032
8086: CD6601  	    call H_Delay
              	    
              	    ;display escreve high
8089: 3E0E    	    ld a, 0x0e
808B: CD6C01  	    call I2C_Open
808E: 3E02    	    ld a, 0x02
8090: CD7501  	    call I2C_Write
8093: 3ABE80  	    ld a, (horas)
8096: CD7501  	    call I2C_Write
8099: CD6F01  	    call I2C_Close
              	    
809C: 119603  	    ld de, $0396
809F: CD6601  	    call H_Delay
              	
80A2: 3E0E    	    ld a, 0x0e
80A4: CD6C01  	    call I2C_Open
80A7: 3E00    	    ld a, 0x00
80A9: CD7501  	    call I2C_Write
80AC: 3ABD80  	    ld a, (status)
80AF: EE04    	    xor 4
80B1: 32BD80  	    ld (status), a
80B4: CD7501  	    call I2C_Write
80B7: CD6F01  	    call I2C_Close
              	    
80BA: C31280  	    jp loop
              	
80BD: 03      	status .db 0x03
80BE: 00      	horas .db 0x00
80BF: 00      	minutos .db 0x00
80C0: 00      	segundos .db 0x00
              	


; +++ segments +++

#CODE          = $8000 = 32768,  size = $00C1 =   193

; +++ global symbols +++

CHECK_COLLISION     = $017E =   382          Main.asm:56 (unused)
CHECK_GAMEOVER_WAIT_START = $0184 =   388          Main.asm:59 (unused)
CLEAR_COLLISION     = $017B =   379          Main.asm:55 (unused)
CLEAR_GBUF          = $0103 =   259          Main.asm:8 (unused)
CLEAR_GR_LCD        = $0106 =   262          Main.asm:9 (unused)
CLEAR_PIXEL         = $0139 =   313          Main.asm:26 (unused)
CLEAR_TXT_LCD       = $0109 =   265          Main.asm:10 (unused)
DELAY_MS            = $0130 =   304          Main.asm:23 (unused)
DELAY_US            = $012D =   301          Main.asm:22 (unused)
DISPLAY_CURSOR      = $0163 =   355          Main.asm:40 (unused)
DRAW_BOX            = $0112 =   274          Main.asm:13 (unused)
DRAW_CIRCLE         = $0118 =   280          Main.asm:15 (unused)
DRAW_GRAPHIC        = $0148 =   328          Main.asm:31 (unused)
DRAW_LINE           = $0115 =   277          Main.asm:14 (unused)
DRAW_PIXEL          = $011B =   283          Main.asm:16 (unused)
FILL_BOX            = $011E =   286          Main.asm:17 (unused)
FILL_CIRCLE         = $0121 =   289          Main.asm:18 (unused)
FLIP_PIXEL          = $013C =   316          Main.asm:27 (unused)
GET_CURSOR          = $0160 =   352          Main.asm:39 (unused)
H_Delay             = $0166 =   358          Main.asm:44
I2CLIST             = $0178 =   376          Main.asm:53 (unused)
I2C_Close           = $016F =   367          Main.asm:50
I2C_Open            = $016C =   364          Main.asm:49
I2C_Read            = $0172 =   370          Main.asm:51
I2C_Write           = $0175 =   373          Main.asm:52
INIT_GAME_WAIT_START = $0181 =   385          Main.asm:58 (unused)
INIT_LCD            = $0100 =   256          Main.asm:7 (unused)
INIT_TERMINAL       = $014E =   334          Main.asm:33 (unused)
INV_GRAPHIC         = $014B =   331          Main.asm:32 (unused)
LCD_DATA            = $0142 =   322          Main.asm:29 (unused)
LCD_INST            = $013F =   319          Main.asm:28 (unused)
LCD_PRINT_STRING    = $0169 =   361          Main.asm:45 (unused)
PLOT_TO_LCD         = $0124 =   292          Main.asm:19 (unused)
PRINT_CHARS         = $012A =   298          Main.asm:21 (unused)
PRINT_STRING        = $0127 =   295          Main.asm:20 (unused)
SEND_A_TO_GLCD      = $0157 =   343          Main.asm:36 (unused)
SEND_CHAR_TO_GLCD   = $0151 =   337          Main.asm:34 (unused)
SEND_HL_TO_GLCD     = $015A =   346          Main.asm:37 (unused)
SEND_STRING_TO_GLCD = $0154 =   340          Main.asm:35 (unused)
SER_SYNC            = $0145 =   325          Main.asm:30 (unused)
SET_BUF_CLEAR       = $0133 =   307          Main.asm:24 (unused)
SET_BUF_NO_CLEAR    = $0136 =   310          Main.asm:25 (unused)
SET_CURSOR          = $015D =   349          Main.asm:38 (unused)
SET_GAMEOVER        = $0187 =   391          Main.asm:60 (unused)
SET_GR_MODE         = $010C =   268          Main.asm:11 (unused)
SET_TXT_MODE        = $010F =   271          Main.asm:12 (unused)
_end                = $80C1 = 32961          Main.asm:81 (unused)
_size               = $00C1 =   193          Main.asm:81 (unused)
_z80_               = $0001 =     1          Main.asm:1 (unused)
horas               = $80BE = 32958          Main.asm:176
inicio              = $8000 = 32768          Main.asm:82 (unused)
loop                = $8012 = 32786          Main.asm:93
minutos             = $80BF = 32959          Main.asm:177
segundos            = $80C0 = 32960          Main.asm:178
status              = $80BD = 32957          Main.asm:175


total time: 0.0243 sec.
no errors
