              	; --------------------------------------
              	; zasm: assemble "Z80MiniGame.asm"
              	; date: 2025-05-27 15:17:21
              	; --------------------------------------


              	; Z80Mini - GameCore
              	; 05/2025
              	; Requerimento: Placa base + Game core - Face.
              	;
              	;
              	;
              	;   ============== COMPILADOR ===================
              	;
              	;   Compilador (https://k1.spdns.de/Develop/Projects/zasm/Distributions/):
              	;
              	;       Win(CMD):           zasm.exe --z80 -w -u --bin  Z80MiniGame.asm
              	;       Win(Powershell):    ./zasm.exe --z80 -w -u --bin  Z80MiniGame.asm
              	;       Macos:              ./zasm --z80 -w -u --bin  Z80MiniGame.asm
              	;
              	;
              	;   =============== GRAVAÇÃO ====================
              	;
              	;     GRAVAÇÃO (32kb) (TL866 2 Plus - MacOS):
              	;	    minipro -p AT28C64B -w Z80MiniGame.rom -s	
              	;
              	;
              	;   =============== HARDWARE ====================
              	;         - CPU Z80@7.37280Mhz
              	;         - Rom 32k 0000h - 7FFFh
              	;         - Ram 32k 8000h - FFFFh
              	;			
              	;		  - Display Grafico - 70h
              	;		  		- 128x64
              	;         
              	;         - Ports:
              	;               - Onboard IN/OUT: 40H
              	;					- Controle - pullDown (Input)
              	;						- bit0 - A
              	;						- bit1 - B
              	;						- bit2 - Start
              	;						- bit3 - Select
              	;						- bit4 - Right
              	;						- bit5 - Down
              	;						- bit6 - Left
              	;						- bit7 - Up
              	;
              	;               - User IN/OUT: C0H
              	;
              	;   =============== LCD LIB ======================
              	;   ; Graphical LCD 128 x 64 Library
              	;   ------------------------------
              	;   By B. Chiha May-2023
              	;   https://github.com/bchiha/Z80_LCD_128x64_Graphics_Library/tree/
              	;
              	;
              	;
              	; -----------------------------------------------------------------------------
              	; PORTS
              	; -----------------------------------------------------------------------------
0070:         	LCDCTRL	    .EQU    $70
0071:         	LCDDATA     .EQU    $71
0040:         	GAMEPAD     .EQU    $40
              	; SIO/2 - 115200
0000:         	SIOA_D		.EQU	$00 ; USB - SERIAL
0002:         	SIOA_C		.EQU	$02 ; USB - SERIAL
0001:         	SIOB_D		.EQU	$01 ; SERIAL - P2
0003:         	SIOB_C		.EQU	$03 ; SERIAL - P2
              	
              	; -----------------------------------------------------------------------------
              	; H_Delay CONFIG
              	; -----------------------------------------------------------------------------
708000:         	kCPUClock:  .EQU 7372800       ;CPU clock speed in Hz
0024:         	kDelayOH:   .EQU 36             ;Overhead for each 1ms in Tcycles
001A:         	kDelayLP:   .EQU 26             ;Inner loop time in Tcycles
1CCC:         	kDelayTA:   .EQU kCPUClock / 1000 ;CPU clock cycles per millisecond
1CA8:         	kDelayTB:   .EQU kDelayTA - kDelayOH  ;Cycles required for inner loop
011A:         	kDelayCnt:  .EQU kDelayTB / kDelayLP  ;Loop counter for inner loop
              	
              	; -----------------------------------------------------------------------------
              	; SYSTEM SETTINGS
              	; -----------------------------------------------------------------------------
FFF0:         	SYSTEM_SP:	.EQU 	$FFF0	;INITIAL STACK POINTER
              	
              	
              	; -----------------------------------------------------------------------------
              	; I2C SETTINGS
              	; -----------------------------------------------------------------------------
00AE:         	I2CA_BLOCK: .EQU $AE            ;I2C device addess: 24LC256 (Copy from/to Mem)
2710:         	TIMEOUT:    .EQU 10000          ;Timeout loop counter
              	
              	
              	; -----------------------------------------------------------------------------
              	; INIT SYSTEM 
              	; -----------------------------------------------------------------------------
0000:         	    .ORG $0000
0000: F3      	RST00:	DI			    ;Disable INTerrupts
0001: C38A01  			JP	INIT		;Initialize Hardware and go
              	
              	;------------------------------------------------------------------------------
              	; TX a character over RS232 wait for TXDONE first.
              	;------------------------------------------------------------------------------
0004: FFFFFFFF	    .ORG $0008
0008: C35D05  	RST08:	JP	conout
              	
              	;------------------------------------------------------------------------------
              	; RX a character from buffer wait until char ready.
              	;------------------------------------------------------------------------------
000B: FFFFFFFF	    .ORG $0010
000F: FF      	
0010: C36705  	RST10:		JP	conin
              	
              	; =========================================================
              	; Int 38h - Monitor 
              	; =========================================================
0013: FFFFFFFF		.org    $0038
0017: FF...   	
0038:         	RST38:
0038: F3      	    DI
0039: E5      		PUSH HL
003A: 2A97FB  	    LD HL, (INT_VEC)
003D: E9      	    JP (HL)
              	
              	; -----------------------------------------------------------------------------
              	; API
              	; -----------------------------------------------------------------------------
003E: FFFFFFFF		.ORG $0100 ; API POINTER
0042: FF...   	
              	; LCD
0100: C39E06  	    JP INIT_LCD             ;Initalise the LCD
0103: C3B306  	    JP CLEAR_GBUF           ;Clear the Graphics Buffer
0106: C3C306  	    JP CLEAR_GR_LCD         ;Clear the Graphics LCD Screen
0109: C3EA06  	    JP CLEAR_TXT_LCD        ;Clear the Text LCD Screen
010C: C30107  	    JP SET_GR_MODE          ;Set Graphics Mode
010F: C30B07  	    JP SET_TXT_MODE         ;Set Text Mode
0112: C31007  	    JP DRAW_BOX             ;Draw a rectangle between two points
0115: C34B07  	    JP DRAW_LINE            ;Draw a line between two points
0118: C3F607  	    JP DRAW_CIRCLE          ;Draw a circle from Mid X,Y to Radius
011B: C3CB08  	    JP DRAW_PIXEL           ;Draw one pixel at X,Y
011E: C33B07  	    JP FILL_BOX             ;Draw a filled rectangle between two points
0121: C3BD08  	    JP FILL_CIRCLE          ;Draw a filled circle from Mid X,Y to Radius
0124: C32A09  	    JP PLOT_TO_LCD          ;Display the Graphics Buffer to the LCD Screen
0127: C35C09  	    JP PRINT_STRING         ;Print Text on the screen in a given row
012A: C37E09  	    JP PRINT_CHARS          ;Print Characters on the screen in a given row and column
012D: C39D09  	    JP DELAY_US             ;Microsecond delay for LCD updates
0130: C3A009  	    JP DELAY_MS             ;Millisecond delay for LCD updates
0133: C3A609  	    JP SET_BUF_CLEAR        ;Clear the Graphics buffer on after Plotting to the screen
0136: C3AE09  	    JP SET_BUF_NO_CLEAR     ;Retain the Graphics buffer on after Plotting to the screen
0139: C3E808  	    JP CLEAR_PIXEL          ;Remove a Pixel at X,Y
013C: C3FA08  	    JP FLIP_PIXEL           ;Flip a Pixel On/Off at X,Y
013F: C3960B  	    JP LCD_INST             ;Send a parallel or serial instruction to LCD
0142: C39B0B  	    JP LCD_DATA             ;Send a parallel or serial datum to LCD
0145: C3AE0B  	    JP SER_SYNC             ;Send serial synchronise byte to LCD
0148: C33A0B  	    JP DRAW_GRAPHIC         ;Draw an ASCII charcter or Sprite to the LCD
014B: C3320B  	    JP INV_GRAPHIC          ;Inverse graphics printing
014E: C3B309  	    JP INIT_TERMINAL        ;Initialize the LCD for terminal emulation
0151: C3C709  	    JP SEND_CHAR_TO_GLCD    ;Send an ASCII Character to the LCD
0154: C3360A  	    JP SEND_STRING_TO_GLCD  ;Send an ASCII String to the LCD
0157: C34F0A  	    JP SEND_A_TO_GLCD       ;Send register A to the LCD
015A: C36C0A  	    JP SEND_HL_TO_GLCD      ;Send register HL to the LCD
015D: C3780A  	    JP SET_CURSOR           ;Set the graphics cursor
0160: C3290B  	    JP GET_CURSOR           ;Get the current cursor
0163: C32E0B  	    JP DISPLAY_CURSOR       ;Set Cursor on or off
0166: C3E305  	    JP DELAY_DE             ;Delay in milliseconds (DE in millis)
0169: C33A06  		JP LCD_PRINT_STRING		;Print string HL, end with 0 EX: "Test", $00
              		; I2C Board
016C: C3D011  	    JP I2C_Open              ;Start i2c (Device address in A)
016F: C3D711  	    JP I2C_Close             ;Close i2c 
0172: C31712  	    JP I2C_Read              ;I2C Read
0175: C3DA11  	    JP I2C_Write             ;I2C Write
0178: C39012  		JP I2CLIST				 ;I2C List devices on lcd
017B: C38A02  	    JP CLEAR_COLLISION       ; Limpa flag de colisao
017E: C38F02  	    JP CHECK_COLLISION       ; JP Z, SEM_COLISAO. JP NZ, COLISAO.
0181: C34C02  	    JP INIT_GAME_WAIT_START         ; Chamar no setup, aguarda press start e returna, dar um (LD HL, setup) e (PUSH HL).
0184: C34702  	    JP CHECK_GAMEOVER_WAIT_START    ; Chamar no loop para verificar gameover e depois aguarda press start e ret para o inicio
0187: C34102  	    JP SET_GAMEOVER                 ; Seta a flag de gameover....
              	
              	
018A:         	INIT:
018A: 31F0FF  	    LD SP, SYSTEM_SP
              		; Init Serial
018D: CD2905  	    CALL setup_serial
0190: 21C013  		LD HL, WELLCOME
0193: CD4F05  	    CALL PRINT
              	
              		; Init LCD
0196: 116400  		LD DE, $0064 ; 100ms
0199: CDE305  	    CALL DELAY_DE
              	
019C: CDB309  	    CALL INIT_TERMINAL
019F: CD0107  	    CALL SET_GR_MODE
01A2: CDAE09  	    CALL SET_BUF_NO_CLEAR
              	
01A5: AF      		XOR A
01A6: 329AFB  	    LD (CURSOR_MENU), A
01A9: 329CFB  	    LD (VAR_GAMEOVER), A
              	
01AC:         	start:
01AC: CDB306  		CALL CLEAR_GBUF
              	
01AF: 010000  	    LD BC, $0000
01B2: CD780A  	    CALL SET_CURSOR
              	
01B5: AF      		XOR A
01B6: 11DA13  		LD DE, WELLCOME_LCD
01B9: CD360A  		CALL SEND_STRING_TO_GLCD
              	
01BC: CD1C04  		CALL NEW_LINE_LCD
              	
01BF: 3A9AFB  	    LD A, (CURSOR_MENU)
01C2: FE00    	    CP 0
01C4: CDDC03  	    CALL MENU1 
              	
01C7: 3A9AFB  	    LD A, (CURSOR_MENU)
01CA: FE01    	    CP 1
01CC: CDEC03  	    CALL MENU2
              	
01CF: 3A9AFB  	    LD A, (CURSOR_MENU)
01D2: FE02    	    CP 2
01D4: CDFC03  	    CALL MENU3
              	
01D7: 3A9AFB  	    LD A, (CURSOR_MENU)
01DA: FE03    	    CP 3
01DC: CD0C04  	    CALL MENU4
              	
01DF: 212204  		LD  HL, INT38
01E2: 2297FB  	    LD  (INT_VEC), HL
              	    ;IM  1
              	    ;EI
              	
01E5:         	monitor:
01E5: 21E501  		LD HL, monitor ; point to return to monitor
01E8: E5      		PUSH HL
01E9:         	monitor0:
01E9: CD5605  		CALL TXCRLF	; Entry point for Monitor, Normal	
01EC: 3E3E    		LD   A,'>'	; Get a ">"	
01EE: CF      		RST 08H		; print it
              	
01EF:         	monitor1:
01EF: D7      		RST 10H	; Get a character from serial
01F0: FE20    		CP   ' '	; <spc> or less? 	
01F2: 38FB    		JR   C, monitor1	; Go back
              	
01F4: FE3A    		CP   ':'	; ":"?
01F6: CAF805  		JP   Z,LOAD	; First character of a HEX load
              	
01F9: CF      		RST 08H	; Print char on console
              	
01FA: FE3F    		CP   '?'
01FC: CA4805  		JP   Z,HELP
              	
01FF: E65F    		AND  $5F	; Make character uppercase
              	
0201: FE52    		CP   'R' 	; reset
0203: CA0000  		JP   Z, RST00
              	
0206: FE47    		CP   'G'
0208: CA4205  		JP   Z,GOTO
              	
020B: 3E3F    		LD   A,'?'	; Get a "?"	
020D: CF      		RST 08H		; Print it
              	
020E: C3E901  	    jp monitor0
              	
              	
007E:         	VTELA_X     .EQU    $7E ; Tela virtal 
003E:         	VTELA_Y     .EQU    $3E ; Tela virtal
              	
0211:         	randomHL:
              	    ; 3F = 126/2
              	    ; 1F = 62/2
0211: CD2702  	    CALL prng16
0214: 7C      	    LD A, H
0215: E67D    	    AND VTELA_X-1
0217: FE00    	    CP 0
0219: CA1102  	    JP Z, randomHL
021C: 67      	    LD H, A
              	
021D: 7D      	    LD A, L
021E: E63D    	    AND VTELA_Y-1
0220: FE00    	    CP 0
0222: CA1102  	    JP Z, randomHL
0225: 6F      	    LD L, A
0226: C9      	    RET
              	
              	
0227:         	prng16:
              	; Site: https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
              	;Inputs:
              	;   (seed1) contains a 16-bit seed value
              	;   (seed2) contains a NON-ZERO 16-bit seed value
              	;Outputs:
              	;   HL is the result
              	;   BC is the result of the LCG, so not that great of quality
              	;   DE is preserved
              	;Destroys:
              	;   AF
              	;cycle: 4,294,901,760 (almost 4.3 billion)
              	;160cc
              	;26 bytes
0227: 2A6E14  	    ld hl,(seed1)
022A: 44      	    ld b,h
022B: 4D      	    ld c,l
022C: 29      	    add hl,hl
022D: 29      	    add hl,hl
022E: 2C      	    inc l
022F: 09      	    add hl,bc
0230: 226E14  	    ld (seed1),hl
0233: 2A7014  	    ld hl,(seed2)
0236: 29      	    add hl,hl
0237: 9F      	    sbc a,a
0238: E62D    	    and %00101101
023A: AD      	    xor l
023B: 6F      	    ld l,a
023C: 227014  	    ld (seed2),hl
023F: 09      	    add hl,bc
0240: C9      	    ret
              	
              	
              	; Seta flag de gameover...
0241:         	SET_GAMEOVER:
0241: 3E01    	    LD A, 1
0243: 329CFB  	    LD (VAR_GAMEOVER), A
0246: C9      	    RET
              	
              	
              	; Check flag gameover or return
0247:         	CHECK_GAMEOVER_WAIT_START:
0247: 3A9CFB  	    LD A, (VAR_GAMEOVER)
024A: B7      	    OR A
024B: C8      	    RET Z
024C:         	INIT_GAME_WAIT_START:
024C: 011A20  	    LD BC, $201A
024F: CD780A  	    CALL SET_CURSOR
              	    
0252: 215914  	    LD HL, MSG_START_GAME
0255: CD3A06  	    CALL LCD_PRINT_STRING
0258: 3A9CFB  	    LD A, (VAR_GAMEOVER)
025B: B7      	    OR A
025C: CA7D02  	    JP Z, start_loop
025F: 012224  	    LD BC, $2422
0262: CD780A  	    CALL SET_CURSOR
              	    
0265: 216514  	    LD HL, MSG_END_GAME
0268: CD3A06  	    CALL LCD_PRINT_STRING
026B:         	gameover_loop:
026B: DB40    	    IN A, (GAMEPAD)
026D: CB5F    	    bit 3, A
026F: C28A01  	    JP NZ, INIT
0272: CB57    	    bit 2, A
0274: CA6B02  	    JP Z, gameover_loop
0277: AF      	    XOR A
0278: 329CFB  	    LD (VAR_GAMEOVER), A
027B: E1      	    POP HL
027C: C9      	    ret
027D:         	start_loop:
027D: DB40    	    IN A, (GAMEPAD)
027F: CB5F    	    bit 3, A
0281: C28A01  	    JP NZ, INIT
0284: CB57    	    bit 2, A
0286: CA7D02  	    JP Z, start_loop
0289: C9      	    ret
              	
              	
028A:         	CLEAR_COLLISION:
028A: AF      	    XOR A
028B: 329BFB  	    LD (DRAW_PIXEL_COLLISION), A
028E: C9      	    RET
              	
              	; FLAG ZERO, 
              	; JP Z, SEM_COLISAO. 
              	; JP NZ, COLISAO.
028F:         	CHECK_COLLISION:
028F: 3A9BFB  	    LD A, (DRAW_PIXEL_COLLISION)
0292: B7      	    OR A
0293: C9      	    RET
              	
              	
0294:         	LOAD_GAME:
0294:         	READ_MEM_FILES:
0294: 110000  	    LD DE, $0000 ; start "D"? File
0297:         	READ_MEM_NEXT:
0297: CD8003  	    CALL READ_IIC_DE
029A: B7      	    OR A
029B: FE44    	    CP 'D'
029D: CAAC02  	    JP Z, READ_FILE
02A0: 210614  	    LD HL, MSG_EOF
02A3: CD5006  	    CALL LCD_CR
02A6: CD3A06  	    CALL LCD_PRINT_STRING
02A9: 3E0D    	    LD A, CR
02AB: C9      	    RET
              	
02AC:         	READ_FILE:
02AC: CD5006  	    CALL LCD_CR ; new line
02AF: CD5006  	    CALL LCD_CR ; new line
02B2: 0610    	    LD B, 16
02B4:         	READ_NAME:
02B4: 13      	    INC DE
02B5: CD8003  	    CALL READ_IIC_DE
02B8: B7      	    OR A
02B9: FE00    	    CP 0
02BB: C45606  	    CALL NZ, LCD_PRINT_A
02BE: 05      	    DEC B
02BF: C2B402  	    JP NZ, READ_NAME
              	
02C2:         	READ_MEM_KEY:
              	    ; Show commands
02C2: D5      	    PUSH DE
02C3: 13      	    INC DE
02C4: CD8003  	    CALL READ_IIC_DE
02C7: B7      	    OR A
02C8: FE00    	    CP 0
02CA: CC6B03  	    CALL Z, SHOW_MSG_EXE
02CD: FE01    	    CP 1
02CF: CC7203  	    CALL Z, SHOW_MSG_IMG
02D2: FE02    	    CP 2
02D4: CC7903  	    CALL Z, SHOW_MSG_TXT
02D7: D1      	    POP DE
              	    ; wait command
02D8:         	read_loop:
02D8: DB40    	    IN A, (GAMEPAD)
02DA: FE00    		cp 0
02DC: CAD802  		JP Z, read_loop
02DF: CB4F    	    bit 1, A ; Next - B
02E1: C2FE02  	    JP    NZ, READ_MEM_STEP
02E4: CB47    	    bit 0, A  ; key Enter, execute - A
02E6: CAC202  	    JP    Z, READ_MEM_KEY
              	    ;read type
02E9: 13      	    INC DE
02EA: CD8003  	    CALL READ_IIC_DE
02ED: B7      	    OR A
02EE: FE00    	    CP 0
02F0: CA1503  	    JP Z, READ_FILE_EXE
02F3: FE01    	    CP 1
02F5: CA2B03  	    JP Z, READ_FILE_IMG
02F8: FE02    	    CP 2
02FA: CA4D03  	    JP Z, READ_FILE_TXT
02FD: C9      	    RET
              	
02FE:         	READ_MEM_STEP:
02FE: 13      	    INC DE ; type
02FF: 13      	    INC DE ; size H
0300: CD8003  	    CALL READ_IIC_DE
0303: 67      	    LD H, A
0304: 13      	    INC DE ; size L
0305: CD8003  	    CALL READ_IIC_DE
0308: 6F      	    LD L, A
0309:         	READ_MEM_STEP_L:
0309: 13      	    INC DE ; step file
030A: 2B      	    DEC HL
030B: 7C      	    LD A, H
030C: B5      	    OR L
030D: C20903  	    JP NZ, READ_MEM_STEP_L
0310: 13      	    INC DE ; end
0311: 13      	    INC DE ; nex start
0312: C39702  	    JP READ_MEM_NEXT
              	
              	
0315:         	READ_FILE_EXE:
              	    ; read size H
0315: 13      	    INC DE
0316: CD8003  	    CALL READ_IIC_DE
0319: 47      	    LD B, A
              	
              	    ; read size L
031A: 13      	    INC DE
031B: CD8003  	    CALL READ_IIC_DE
031E: 4F      	    LD C, A
              	
031F: 13      	    INC DE ; first byte file
0320: 210080  	    LD HL, $8000 ; memory user
              	
0323: CDBF12  	    CALL I2C_MemRd
0326: E1      	    POP HL ; return
0327: C30080  	    JP $8000
032A: C9      	    RET
              	
032B:         	READ_FILE_IMG:
              	    ; read size H
032B: 13      	    INC DE
032C: CD8003  	    CALL READ_IIC_DE
032F: 47      	    LD B, A
              	
              	    ; read size L
0330: 13      	    INC DE
0331: CD8003  	    CALL READ_IIC_DE
0334: 4F      	    LD C, A
              	
0335: 13      	    INC DE ; first byte file
0336: 210080  	    LD HL, $8000 ; memory user
              	
0339: CDBF12  	    CALL I2C_MemRd
              	
033C: 2680    	    LD H, $80
033E: 2E00    	    LD L, $00
0340: CD8506  	    CALL LCD_IMAGE_128x64
              	
0343:         	READ_FILE_IMG_K:
0343: DB40    	    IN A, (GAMEPAD)
0345: CB5F    	    bit 3, A
0347: CA4303  	    JP    Z, READ_FILE_IMG_K
034A: 3E0C    	    LD A, CS
034C: C9      	    RET
              	
034D:         	READ_FILE_TXT:
034D: CD4A06  	    CALL LCD_CLEAR
              	
              	    ; read size H
0350: 13      	    INC DE
0351: CD8003  	    CALL READ_IIC_DE
0354: 47      	    LD B, A
              	
              	    ; read size L
0355: 13      	    INC DE
0356: CD8003  	    CALL READ_IIC_DE
0359: 4F      	    LD C, A
              	
035A: 13      	    INC DE ; first byte file
035B:         	READ_FILE_TXT_L:
035B: CD8003  	    CALL READ_IIC_DE
035E: CD5606  	    CALL LCD_PRINT_A
0361: 13      	    INC DE ; step file
0362: 0B      	    DEC BC
0363: 78      	    LD A, B
0364: B1      	    OR C
0365: C25B03  	    JP NZ, READ_FILE_TXT_L
0368: 13      	    INC DE ; end
0369: 13      	    INC DE ; next start    
036A: C9      	    RET
              	
              	
036B:         	SHOW_MSG_EXE:
036B: 211814  	    LD HL, MSG_READFILE_EXE
036E: CD3A06  	    CALL LCD_PRINT_STRING
0371: C9      	    RET
              	
0372:         	SHOW_MSG_IMG:
0372: 211D14  	    LD HL, MSG_READFILE_IMG
0375: CD3A06  	    CALL LCD_PRINT_STRING
0378: C9      	    RET
              	
0379:         	SHOW_MSG_TXT:
0379: 212214  	    LD HL, MSG_READFILE_TXT
037C: CD3A06  	    CALL LCD_PRINT_STRING
037F: C9      	    RET
              	
              	
              	; Read byte in i2c, address in DE, return byte in A
0380:         	READ_IIC_DE:
0380: C5      	    PUSH BC
0381: D5      	    PUSH DE
0382: E5      	    PUSH HL
0383: 3EAE    	    LD   A, I2CA_BLOCK   ;I2C address to write to
0385: CDD011  	    CALL I2C_Open
0388: 7A      	    LD   A, D           ;Address (hi) in I2C memory
0389: CDDA11  	    CALL I2C_Write      ;Write address
038C: 7B      	    LD   A,E            ;Address (lo) in I2C memory
038D: CDDA11  	    CALL I2C_Write      ;Write address
0390: 3EAF    	    LD   A,I2CA_BLOCK+1 ;I2C device to be read from
0392: CDD011  	    CALL I2C_Open       ;Open for read
0395: CD1712  	    CALL I2C_Read
0398: F5      	    PUSH AF
0399: CD4F12  	    CALL I2C_Stop       ;Generate I2C stop
039C: F1      	    POP AF
039D: E1      	    POP HL
039E: D1      	    POP DE
039F: C1      	    POP BC
03A0: C9      	    RET
              	
              	
03A1:         	KEYUP:
03A1: DB40    	    IN A, (GAMEPAD)
03A3: FE00    	    CP 0
03A5: C2A103  	    JP NZ, KEYUP
03A8: 3A9AFB  	    LD A, (CURSOR_MENU)
03AB: FE00    	    CP 0
03AD: CAB703  	    JP Z, KEYUP_RES
03B0: 3D      	    DEC A
03B1: 329AFB  	    LD (CURSOR_MENU), A
03B4: C3AC01  	    JP start
03B7:         	KEYUP_RES:
03B7: 3E03    	    LD A, 3
03B9: 329AFB  	    LD (CURSOR_MENU), A
03BC: C3AC01  	    JP start
              	
03BF:         	KEYDOWN:
03BF: DB40    	    IN A, (GAMEPAD)
03C1: FE00    	    CP 0
03C3: C2BF03  	    JP NZ, KEYDOWN
03C6: 3A9AFB  	    LD A, (CURSOR_MENU)
03C9: FE03    	    CP 3
03CB: CAD503  	    JP Z, KEYDOWN_RES
03CE: 3C      	    INC A
03CF: 329AFB  	    LD (CURSOR_MENU), A
03D2: C3AC01  	    JP start
03D5:         	KEYDOWN_RES:
03D5: AF      	    XOR A
03D6: 329AFB  	    LD (CURSOR_MENU), A
03D9: C3AC01  	    JP start
              	
03DC:         	MENU1:
03DC: C2E403  	    JP NZ, $+8
03DF: 3E06    	    LD A, 6; >
03E1: CDC709  	    CALL SEND_CHAR_TO_GLCD
03E4: 112714  	    LD DE, MENU_LCD_1
03E7: AF      	    XOR A
03E8: CD360A  		CALL SEND_STRING_TO_GLCD
03EB: C9      	    RET
              	
03EC:         	MENU2:
03EC: C2F403  	    JP NZ, $+8
03EF: 3E06    	    LD A, 6; >
03F1: CDC709  	    CALL SEND_CHAR_TO_GLCD
03F4: 113414  	    LD DE, MENU_LCD_2
03F7: AF      	    XOR A
03F8: CD360A  		CALL SEND_STRING_TO_GLCD
03FB: C9      	    RET
              	
03FC:         	MENU3:
03FC: C20404  	    JP NZ, $+8
03FF: 3E06    	    LD A, 6; >
0401: CDC709  	    CALL SEND_CHAR_TO_GLCD
0404: 114514  	    LD DE, MENU_LCD_3
0407: AF      	    XOR A
0408: CD360A  		CALL SEND_STRING_TO_GLCD
040B: C9      	    RET
              	
040C:         	MENU4:
040C: C21404  	    JP NZ, $+8
040F: 3E06    	    LD A, 6; >
0411: CDC709  	    CALL SEND_CHAR_TO_GLCD
0414: 115114  	    LD DE, MENU_LCD_4
0417: AF      	    XOR A
0418: CD360A  		CALL SEND_STRING_TO_GLCD
041B: C9      	    RET
              	
              	
              	
041C:         	NEW_LINE_LCD:
041C: 3E0D    		LD A, CR
041E: CDC709  		CALL SEND_CHAR_TO_GLCD
0421: C9      		RET
              	
              	
0422:         	INT38:
0422: F3      		DI
0423: F5      		PUSH AF
0424: DB40    		IN A, (GAMEPAD)
0426: CA2C04  		JP Z, INT38_END
0429: 3299FB  		LD (GAMEPAD_KEY), A
042C:         	INT38_END:
042C: F1      		POP AF
042D: E1      		POP HL
042E: FB      		EI
042F: ED4D    		RETI
              	
0431:         	check_keypad:
0431: DB40    		in A, (GAMEPAD)
0433: CB7F    	    BIT 7, A ; up
0435: C2A103  	    JP NZ, KEYUP
0438: CB6F    	    BIT 5, A ; down
043A: C2BF03  	    JP NZ, KEYDOWN
043D: CB47    		BIT 0, A ; A
043F: C24304  	    JP NZ, KEY_A
0442: C9      		RET
              	
0443:         	KEY_A:
0443: DB40    	    IN A, (GAMEPAD)
0445: FE00    	    CP 0
0447: C24304  	    JP NZ, KEY_A
044A: 3A9AFB  		LD A, (CURSOR_MENU)
044D: FE00    		CP 0
044F: CA0080  		JP Z, $8000 ; Start game JP $8000
0452: FE01    		CP 1
0454: CA9402  		JP Z, LOAD_GAME
0457: FE02    		CP 2
0459: CA6404  		JP Z, TEST_KEYS
045C: FE03    		CP 3
045E: CA0000  		JP Z, 0 ; reset
0461: C30000  		JP 0
              	
              	
0464:         	TEST_KEYS:
0464: CDB306  	    CALL CLEAR_GBUF
              	
              	    ; select
0467: 0638    	    LD B, 56
0469: 0E07    	    LD C, 7
046B: 1E06    	    LD E, $06
046D: DB40    	    IN A, ($40)
046F: CB5F    	    BIT 3, A
0471: CA7A04  	    JP Z, $+9
0474: CDBD08  	    CALL FILL_CIRCLE
0477: C37D04  	    JP $+6
047A: CDF607  	    CALL DRAW_CIRCLE
              	    
              	    ; Start
047D: 0649    	    LD B, 73
047F: 0E07    	    LD C, 7
0481: 1E06    	    LD E, $06
0483: DB40    	    IN A, ($40)
0485: CB57    	    BIT 2, A
0487: CA9004  	    JP Z, $+9
048A: CDBD08  	    CALL FILL_CIRCLE
048D: C39304  	    JP $+6
0490: CDF607  	    CALL DRAW_CIRCLE
              	    
              	
              	    ; A
0493: 0659    	    LD B, 89
0495: 0E28    	    LD C, 40
0497: 1E06    	    LD E, $06
0499: DB40    	    IN A, ($40)
049B: CB47    	    BIT 0, A
049D: CAA604  	    JP Z, $+9
04A0: CDBD08  	    CALL FILL_CIRCLE
04A3: C3A904  	    JP $+6
04A6: CDF607  	    CALL DRAW_CIRCLE
              	    
              	    
              	    ; B
04A9: 0669    	    LD B, 105
04AB: 0E18    	    LD C, 24
04AD: 1E06    	    LD E, $06
04AF: DB40    	    IN A, ($40)
04B1: CB4F    	    BIT 1, A
04B3: CABC04  	    JP Z, $+9
04B6: CDBD08  	    CALL FILL_CIRCLE
04B9: C3BF04  	    JP $+6
04BC: CDF607  	    CALL DRAW_CIRCLE
              	    
              	    
              	    ; Up
04BF: 0618    	    LD B, 24
04C1: 0E18    	    LD C, 24
04C3: 1E06    	    LD E, $06
04C5: DB40    	    IN A, ($40)
04C7: CB7F    	    BIT 7, A
04C9: CAD204  	    JP Z, $+9
04CC: CDBD08  	    CALL FILL_CIRCLE
04CF: C3D504  	    JP $+6
04D2: CDF607  	    CALL DRAW_CIRCLE
              	    
              	    ; Down
04D5: 0618    	    LD B, 24
04D7: 0E39    	    LD C, 57
04D9: 1E06    	    LD E, $06
04DB: DB40    	    IN A, ($40)
04DD: CB6F    	    BIT 5, A
04DF: CAE804  	    JP Z, $+9
04E2: CDBD08  	    CALL FILL_CIRCLE
04E5: C3EB04  	    JP $+6
04E8: CDF607  	    CALL DRAW_CIRCLE
              	    
              	    ; Left
04EB: 0607    	    LD B, 7
04ED: 0E29    	    LD C, 41
04EF: 1E06    	    LD E, $06
04F1: DB40    	    IN A, ($40)
04F3: CB77    	    BIT 6, A
04F5: CAFE04  	    JP Z, $+9
04F8: CDBD08  	    CALL FILL_CIRCLE
04FB: C30105  	    JP $+6
04FE: CDF607  	    CALL DRAW_CIRCLE
              	    
              	    ; Right
0501: 0628    	    LD B, 40
0503: 0E28    	    LD C, 40
0505: 1E06    	    LD E, $06
0507: DB40    	    IN A, ($40)
0509: CB67    	    BIT 4, A
050B: CA1405  	    JP Z, $+9
050E: CDBD08  	    CALL FILL_CIRCLE
0511: C31705  	    JP $+6
0514: CDF607  	    CALL DRAW_CIRCLE
              	    
0517: CD2A09  		CALL PLOT_TO_LCD
              	
              		; check select+start to exit
051A: DB40    	    IN A, (GAMEPAD)
051C: CB57    	    BIT 2, A
051E: CA6404  		JP Z, TEST_KEYS
0521: CB5F    	    BIT 3, A
0523: CA6404  	    JP Z, TEST_KEYS
0526: C38A01  	    jp INIT
              	
              	
0529:         	setup_serial:
              	    ;	Initialise SIO/2 A
0529: 3E04    		LD	A,$04
052B: D302    		OUT	(SIOA_C),A
052D: 3EC4    		LD	A,$C4
052F: D302    		OUT	(SIOA_C),A
              	
0531: 3E03    		LD	A,$03
0533: D302    		OUT	(SIOA_C),A
0535: 3EE1    		LD	A,$E1
0537: D302    		OUT	(SIOA_C),A
              	
0539: 3E05    		LD	A,$05
053B: D302    		OUT	(SIOA_C),A
053D: 3E68    		LD	A, $68
053F: D302    		OUT	(SIOA_C),A
0541: C9      	    RET
              	
              	
              	
              	
              	; GOTO command
0542:         	GOTO:
0542: CD9905  		CALL GETHL		; ENTRY POINT FOR <G>oto addr. Get XXXX from user.
0545: D8      		RET  C			; Return if invalid       	
0546: E5      		PUSH HL
0547: C9      		RET			; Jump to HL address value
              	
              	
              	; HELP
0548:         	HELP:
0548: 214313  		LD HL, msg_help
054B: CD4F05  		CALL PRINT
054E: C9      		RET
              	
              	
              	;------------------------------------------------------------------------------
              	; Print string of characters to Serial A until byte=$00, WITH CR, LF
              	;------------------------------------------------------------------------------
054F: 7E      	PRINT:  LD   A,(HL)	; Get character
0550: B7      			OR   A		; Is it $00 ?
0551: C8      			RET  Z		; Then RETurn on terminator
0552: CF      			RST  08H	; Print it
0553: 23      			INC  HL		; Next Character
0554: 18F9    			JR   PRINT	; Continue until $00
              	
0556: 3E0D    	TXCRLF:	LD   A,$0D	; 
0558: CF      			RST  08H	; Print character 
0559: 3E0A    			LD   A,$0A	; 
055B: CF      			RST  08H	; Print character
055C: C9      			RET
              	
              	;------------------------------------------------------------------------------
              	; Console output routine - Serial
              	; Output port to send a character.
              	;------------------------------------------------------------------------------
055D: F5      	conout:		PUSH	AF		; Store character
055E: CD7605  	conoutA1:	CALL	CKSIOA		; See if SIO channel A is finished transmitting
0561: 28FB    			JR	Z, conoutA1	; Loop until SIO flag signals ready
0563: F1      			POP	AF		; RETrieve character
0564: D300    			OUT	(SIOA_D),A	; OUTput the character
0566: C9      			RET
              	
0567:         	conin:
0567:         	waitForChar:
0567: CD3104  		CALL check_keypad ; Enquanto aguarda serial, verifica check_keypad
              		; Check if there is a char in channel A
056A: 97      		SUB	A
056B: D302    		OUT 	(SIOA_C),A
056D: DB02    		IN   	A,(SIOA_C)	; Status byte D2=TX Buff Empty, D0=RX char ready	
056F: 0F      		RRCA			; Rotates RX status into Carry Flag,	
0570: 30F5    		JR	NC, waitForChar
0572: DB00    		IN	A,(SIOA_D)
0574: B7      		OR A ; clear carry
0575: C9      		RET
              		
              	
0576:         	CKSIOA:
0576: 97      			SUB	A
0577: D302    			OUT 	(SIOA_C),A
0579: DB02    			IN   	A,(SIOA_C)	; Status byte D2=TX Buff Empty, D0=RX char ready	
057B: 0F      			RRCA			; Rotates RX status into Carry Flag,	
057C: CB4F    			BIT  	1,A		; Set Zero flag if still transmitting character	
057E: C9      	        RET
              	
              	
              	;------------------------------------------------------------------------------
              	; Get a character from the console, must be $20-$7F to be valid (no control characters)
              	; <Ctrl-c> and <SPACE> breaks with the Zero Flag set
              	;------------------------------------------------------------------------------	
057F: D7      	GETCHR	RST 10H	; RX a Character
0580: FE03    			CP   $03	; <ctrl-c> User break?
0582: C8      			RET  Z			
0583: FE20    			CP   $20	; <space> or better?
0585: 38F8    			JR   C,GETCHR	; Do it again until we get something usable
0587: C9      			RET
              	
              	;------------------------------------------------------------------------------
              	; Gets two ASCII characters from the console (assuming them to be HEX 0-9 A-F)
              	; Moves them into B and C, converts them into a byte value in A and updates a
              	; Checksum value in E
              	;------------------------------------------------------------------------------
0588: CD7F05  	GET2	CALL GETCHR	; Get us a valid character to work with
058B: 47      			LD   B,A	; Load it in B
058C: CD7F05  			CALL GETCHR	; Get us another character
058F: 4F      			LD   C,A	; load it in C
0590: CDC705  			CALL BCTOA	; Convert ASCII to byte
0593: 4F      			LD   C,A	; Build the checksum
0594: 7B      			LD   A,E
0595: 91      			SUB  C		; The checksum should always equal zero when checked
0596: 5F      			LD   E,A	; Save the checksum back where it came from
0597: 79      			LD   A,C	; Retrieve the byte and go back
0598: C9      			RET
              	
              	;------------------------------------------------------------------------------
              	; Gets four Hex characters from the console, converts them to values in HL
              	;------------------------------------------------------------------------------
0599: 210000  	GETHL		LD   HL,$0000	; Gets xxxx but sets Carry Flag on any Terminator
059C: CDE005  			CALL ECHO	; RX a Character
059F: FE0D    			CP   $0D	; <CR>?
05A1: 200E    			JR   NZ,GETX2	; other key		
05A3: 37      	SETCY		SCF		; Set Carry Flag
05A4: C9      			RET             ; and Return to main program		
              	;------------------------------------------------------------------------------
              	; This routine converts last four hex characters (0-9 A-F) user types into a value in HL
              	; Rotates the old out and replaces with the new until the user hits a terminating character
              	;------------------------------------------------------------------------------
05A5: 210000  	GETX		LD   HL,$0000	; CLEAR HL
05A8: CDE005  	GETX1		CALL ECHO	; RX a character from the console
05AB: FE0D    			CP   $0D	; <CR>
05AD: C8      			RET  Z		; quit
05AE: FE2C    			CP   $2C	; <,> can be used to safely quit for multiple entries
05B0: C8      			RET  Z		; (Like filling both DE and HL from the user)
05B1: FE03    	GETX2		CP   $03	; Likewise, a <ctrl-C> will terminate clean, too, but
05B3: 28EE    			JR   Z,SETCY	; It also sets the Carry Flag for testing later.
05B5: 29      			ADD  HL,HL	; Otherwise, rotate the previous low nibble to high
05B6: 29      			ADD  HL,HL	; rather slowly
05B7: 29      			ADD  HL,HL	; until we get to the top
05B8: 29      			ADD  HL,HL	; and then we can continue on.
05B9: D630    			SUB  $30	; Convert ASCII to byte	value
05BB: FE0A    			CP   $0A	; Are we in the 0-9 range?
05BD: 3802    			JR   C,GETX3	; Then we just need to sub $30, but if it is A-F
05BF: D607    			SUB  $07	; We need to take off 7 more to get the value down to
05C1: E60F    	GETX3		AND  $0F	; to the right hex value
05C3: 85      			ADD  A,L	; Add the high nibble to the low
05C4: 6F      			LD   L,A	; Move the byte back to A
05C5: 18E1    			JR   GETX1	; and go back for next character until he terminates
              	;------------------------------------------------------------------------------
              	; Convert ASCII characters in B C registers to a byte value in A
              	;------------------------------------------------------------------------------
05C7: 78      	BCTOA		LD   A,B	; Move the hi order byte to A
05C8: D630    			SUB  $30	; Take it down from Ascii
05CA: FE0A    			CP   $0A	; Are we in the 0-9 range here?
05CC: 3802    			JR   C,BCTOA1	; If so, get the next nybble
05CE: D607    			SUB  $07	; But if A-F, take it down some more
05D0: 07      	BCTOA1		RLCA		; Rotate the nybble from low to high
05D1: 07      			RLCA		; One bit at a time
05D2: 07      			RLCA		; Until we
05D3: 07      			RLCA		; Get there with it
05D4: 47      			LD   B,A	; Save the converted high nybble
05D5: 79      			LD   A,C	; Now get the low order byte
05D6: D630    			SUB  $30	; Convert it down from Ascii
05D8: FE0A    			CP   $0A	; 0-9 at this point?
05DA: 3802    			JR   C,BCTOA2	; Good enough then, but
05DC: D607    			SUB  $07	; Take off 7 more if it's A-F
05DE: 80      	BCTOA2		ADD  A,B	; Add in the high order nybble
05DF: C9      			RET
              	
              	;------------------------------------------------------------------------------
              	; Get a character and echo it back to the user
              	;------------------------------------------------------------------------------
05E0: D7      	ECHO	RST 10H ; rx
05E1: CF      			RST 08H ; tx
05E2: C9      			RET
              	
              	
              	
              	; **********************************************************************
              	; Delay by DE milliseconds
              	;   On entry: DE = Delay time in milliseconds
              	;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved
05E3: F5      	DELAY_DE:    	PUSH AF
05E4: C5      	            PUSH BC
05E5: D5      	            PUSH DE
              	; 1 ms loop, DE times...        ;[=36]   [=29]    Overhead for each 1ms
05E6: 011A01  	LoopDE:    LD   BC, kDelayCnt   ;[10]    [9]
              	; Inner loop, BC times...       ;[=26]   [=20]    Loop time in Tcycles
05E9: 0B      	LoopBC:    DEC  BC             ;[6]     [4]
05EA: 79      	            LD   A,C            ;[4]     [4]
05EB: B0      	            OR   B              ;[4]     [4]
05EC: C2E905  	            JP   NZ,LoopBC     ;[12/7]  [8/6] 
              	; Have we looped once for each millisecond requested?
05EF: 1B      	            DEC  DE             ;[6]     [4]
05F0: 7B      	            LD   A,E            ;[4]     [4]
05F1: B2      	            OR   D              ;[4]     [4]
05F2: 20F2    	            JR   NZ, LoopDE     ;[12/7]  [8/6]
05F4: D1      	            POP  DE
05F5: C1      	            POP  BC
05F6: F1      	            POP  AF
05F7: C9      	            RET
              	
              	
              	
              	;------------------------------------------------------------------------------
              	; LOAD Intel Hex format file from the console.
              	; [Intel Hex Format is:
              	; 1) Colon (Frame 0)
              	; 2) Record Length Field (Frames 1 and 2)
              	; 3) Load Address Field (Frames 3,4,5,6)
              	; 4) Record Type Field (Frames 7 and 8)
              	; 5) Data Field (Frames 9 to 9+2*(Record Length)-1
              	; 6) Checksum Field - Sum of all byte values from Record Length to and 
              	;   including Checksum Field = 0 ]
              	;------------------------------------------------------------------------------	
05F8: 1E00    	LOAD:	LD   E,0	; First two Characters is the Record Length Field
05FA: CD8805  			CALL GET2	; Get us two characters into BC, convert it to a byte <A>
05FD: 57      			LD   D,A	; Load Record Length count into D
05FE: CD8805  			CALL GET2	; Get next two characters, Memory Load Address <H>
0601: 67      			LD   H,A	; put value in H register.
0602: CD8805  			CALL GET2	; Get next two characters, Memory Load Address <L>
0605: 6F      			LD   L,A	; put value in L register.
0606: CD8805  			CALL GET2	; Get next two characters, Record Field Type
0609: FE01    			CP   $01	; Record Field Type 00 is Data, 01 is End of File
060B: 2009    			JR   NZ,LOAD2	; Must be the end of that file
060D: CD8805  			CALL GET2	; Get next two characters, assemble into byte
0610: 7B      			LD   A,E	; Recall the Checksum byte
0611: A7      			AND  A		; Is it Zero?
0612: 281E    			JR   Z,LOAD00	; Print footer reached message
0614: 1815    			JR   LOADERR	; Checksums don't add up, Error out
              			
0616: 7A      	LOAD2		LD   A,D	; Retrieve line character counter	
0617: A7      			AND  A		; Are we done with this line?
0618: 280B    			JR   Z,LOAD3	; Get two more ascii characters, build a byte and checksum
061A: CD8805  			CALL GET2	; Get next two chars, convert to byte in A, checksum it
061D: 77      			LD   (HL),A	; Move converted byte in A to memory location
061E: 23      			INC  HL		; Increment pointer to next memory location	
061F: 3E2E    			LD   A,'.'	; Print out a "." for every byte loaded
0621: CF      			RST  08H	;
0622: 15      			DEC  D		; Decrement line character counter
0623: 18F1    			JR   LOAD2	; and keep loading into memory until line is complete
              			
0625: CD8805  	LOAD3		CALL GET2	; Get two chars, build byte and checksum
0628: 7B      			LD   A,E	; Check the checksum value
0629: A7      			AND  A		; Is it zero?
062A: C8      			RET  Z
              	
062B: 219E13  	LOADERR		LD   HL,CKSUMERR  ; Get "Checksum Error" message
062E: CD4F05  			CALL PRINT	; Print Message from (HL) and terminate the load
0631: C9      			RET
              	
0632: 21AF13  	LOAD00  	LD   HL,LDETXT	; Print load complete message
0635: CD4F05  			CALL PRINT
0638: C9      			RET
              	
              	
              	
              	
              	
              	#include "LCD.asm"
              	; Graphical LCD 128 x 64 Library
              	; ------------------------------
              	; By B. Chiha May-2023
              	;
              	; This is a native Z80 Graphics library to be used with 128x64 Graphical LCD Screens
              	;
              	; There are a few variants of these LCD screens, but they must all must use the ST7920
              	; LCD Controller.  The LCD Screen that I used is the QC12864B.  This screen has two
              	; ST7921 Panels (128 x 32) stacked one above the other.  Other LCD boards might not do
              	; this.  If so the PLOT_TO_LCD function will need to be modified. (future work)
              	;
              	; These screens have DDRAM (Graphics) and CGRAM (Text) areas.  Both RAM areas can 
              	; be displayed at the same time.
              	;
              	; The Pinout for the QC12864B board is as follows:
              	;
              	; Pin	Name	Desc                    Serial  Parallel
              	; ---   ----    -------------           ------  -------------
              	; 1     VSS     Ground                  GND     GND
              	; 2     VDD     Power                   5v      5v
              	; 3     V0      Contrast                N/A     N/A
              	; 4     D/I     IR/DR (CS)              5v      A7
              	; 5     R/W     R/W (SID)               D0      RD (inverted)
              	; 6     E       Enable (SCLK)           D1      Port 7 (inverted)
              	; 7     DB0     Data                    N/A     D0
              	; 8     DB1     Data                    N/A     D1
              	; 9     DB2     Data                    N/A     D2
              	; 10    DB3     Data                    N/A     D3
              	; 11    DB4     Data                    N/A     D4
              	; 12    DB5     Data                    N/A     D5
              	; 13    DB6     Data                    N/A     D6
              	; 14    DB7     Data                    N/A     D7
              	; 15    PSB     Serial/Para             GND     5v
              	; 16    NC
              	; 17    RST     Reset                   RST     RST
              	; 18    VEE     LCD Drive               N/A     N/A
              	; 19    A       Backlight               5v/NC   5v/NC
              	; 20    K       Backlight               GND/NC  GND/NC
              	;
              	;
              	;        ORG 2000H               ;Start location
              	        
              	; Modifiable values.  Thse three values can be modified to suit your own set up
              	; LCD_IR and LCD_DR are the output ports to send an Instruction or Data value.
              	; V_DELAY_US is the minimum delay needed for a command to be processed by the
              	; LCD board.  If only some of the data is being sent, make this value larger
              	        
              	;Port 7 on TEC is connected to LCD Enable (Pin 6)
              	;A7 is connected to Register select (Pin 4).  (A7=0 for Instruction, A7=1 for Data)
0070:         	LCD_IR:	EQU 70H         ;Instruction Register
0071:         	LCD_DR:	EQU 71H         ;Data Register (A7)
0000:         	LCD_SER: EQU 00H        ;Serial Port if used
0007:         	V_DELAY_US: EQU $0007   ;Delay for 76us on your system $0004
              	
              	;Serial or Parallel communications to the LCD Screen.  Comment one of 
              	;the labels below based on the LCD connections. 00H = FALSE, 01H = TRUE
              	;COMMS_MODE: EQU 00H     ;Using PARALLEL Data connection
              	;COMMS_MODE: EQU 01H     ;Using SERIAL Data connection
              	
              	; Dont need to modify anything else below.
00F8:         	SER_BT: EQU 11111000B           ;Serial Synchronisation Byte
00B5:         	UP:     EQU $B5                 ; Up Arrow, change Z80 Mini
00B6:         	DN:     EQU $B6                 ; Down Arrow, change Z80Mini
0008:         	BKSP:   EQU 08H                 ; Back space 08H
0009:         	TAB:    EQU 09H                 ; Horizontal TAB
000A:         	LF:     EQU 0AH                 ; Line feed
000C:         	CS:     EQU 0CH                 ; Clear screen
000D:         	CR:     EQU 0DH                 ; Carriage return
0020:         	SPACE:  EQU 20H                 ; Space
008F:         	CURSOR: EQU 8FH                 ; Cursor
007F:         	DEL     EQU    7FH              ; Delete
0639: 00      	BDEL:     DB    00H
0003:         	CTRLC       .EQU    03H             ; Control "C"
              	
              	;-----------------
              	; LCD_PRINT_STRING
              	; Entry: HL
              	; String terminada com 0
              	;-----------------
063A:         	LCD_PRINT_STRING:
063A: F5      	        PUSH AF
063B: C5      		PUSH BC
063C: D5      	        PUSH DE
063D: E5      	        PUSH HL
063E: 3E00    	        LD A, 0 ; terminador da string..
0640: 545D    	        LD DE, HL
0642: CD360A  		CALL SEND_STRING_TO_GLCD
0645: E1      	        POP HL
0646: D1      	        POP DE
0647: C1      	        POP BC 
0648: F1      	        POP AF
0649: C9      		RET
              	
              	
              	;-----------------
              	; Claer screen - reset terminal
              	;-----------------
064A:         	LCD_CLEAR:
064A: 3E0C    	        LD A, CS
064C: CD5606  	        CALL LCD_PRINT_A
064F: C9      	        RET
              	        
              	;-----------------
              	; NEW LINE
              	;-----------------
0650:         	LCD_CR:
0650: 3E0D    		LD A, CR
0652: CD5606  		CALL LCD_PRINT_A
0655: C9      		RET
              	
              	;-----------------
              	; LCD_PRINT_A
              	; Destroy only AF
              	;-----------------
0656:         	LCD_PRINT_A:
0656: F5      	        PUSH AF
0657: C5      		PUSH BC
0658: D5      	        PUSH DE
0659: E5      	        PUSH HL
              	        
              	        ; check delete (MSBasic)
065A: F5      	        PUSH AF
065B: 3A3906  	        LD A, (BDEL)
065E: B7      	        or a
065F: FEFF    	        CP $FF
0661: CC7A06  	        call z, DELETE_CHAR
0664: F1      	        POP AF
0665: B7      	        or a
0666: FE00    	        CP $0
0668: 2008    	        jr nz, LCD_PRINT_A_OK
066A: 3EFF    	        LD A, $FF ; delete proximo char
066C: 323906  	        LD (BDEL), A
066F: C37506  	        jp LCD_PRINT_A_FIM
0672:         	LCD_PRINT_A_OK:
0672: CDC709  		CALL SEND_CHAR_TO_GLCD
0675:         	LCD_PRINT_A_FIM:
0675: E1      	        POP HL
0676: D1      	        POP DE
0677: C1      	        POP BC 
0678: F1      	        POP AF
0679: C9      		RET
              	
067A:         	DELETE_CHAR:
067A: F1      	        POP AF ; AF
067B: E1      	        POP HL ; CALL
067C: AF      	        XOR A
067D: 323906  	        LD (BDEL), A
              	        
0680: 3E7F    	        LD A, DEL ; delete char
0682: C37206  	        JP LCD_PRINT_A_OK
              	
              	;-----------------
              	; LCD_IMAGE_128x64 - Print image 128x64, CURSOR 0,0
              	; Entry: HL
              	;-----------------
0685:         	LCD_IMAGE_128x64: 
0685: F5      	        PUSH AF
0686: C5      		PUSH BC
0687: D5      	        PUSH DE
0688: E5      	        PUSH HL
0689: 010000  	        LD BC, $0000
068C: CD780A  	        CALL SET_CURSOR
068F: 0680    	        LD B, 128
0691: 0E40    	        LD C, 64
0693: CD4D0B  		CALL PLOT_GRAPHIC
0696: CD2A09  	        CALL PLOT_TO_LCD
0699: E1      	        POP HL
069A: D1      	        POP DE
069B: C1      	        POP BC 
069C: F1      	        POP AF
069D: C9      		RET
              	
              	
              	
              	; Initialise LCD
069E:         	INIT_LCD:
069E: 21C60B  	        LD HL, INIT_BASIC       ;POINT HL TO LCD INITIALIZE TABLE
06A1: 0606    	        LD B, 06H               ;B=4 BYTES
06A3:         	NEXT_CMD:
06A3: 7E      	        LD A, (HL)
06A4: CD960B  	        CALL LCD_INST
06A7: 23      	        INC HL
06A8: 10F9    	        DJNZ NEXT_CMD
06AA: 118002  	        LD DE, $0280            ;1.6 ms $0140@4Mhz
06AD: CDA009  	        CALL DELAY_MS
              	        
06B0: CDC306  	        CALL CLEAR_GR_LCD
              	        
              	; Clears the Graphics Memory Buffer
06B3:         	CLEAR_GBUF:
06B3: 2A80FB  	        LD HL, (VPORT)
06B6: ED5B80FB	        LD DE, (VPORT)
06BA: 13      	        INC DE
06BB: AF      	        XOR A
06BC: 77      	        LD (HL), A
06BD: 01FF03  	        LD BC, 03FFH
06C0: EDB0    	        LDIR
06C2: C9      	        RET
              	        
              	; Clears the Graphics LCD Buffer
06C3:         	CLEAR_GR_LCD:
06C3: CD0107  	        CALL SET_GR_MODE
06C6: 0E00    	        LD C, 00H
06C8:         	CLR_X:
06C8: 3E80    	        LD A, 80H
06CA: B1      	        OR C
06CB: CD960B  	        CALL LCD_INST
06CE: 3E80    	        LD A, 80H
06D0: CD960B  	        CALL LCD_INST
06D3: 3E02    	        LD A, 02H 
06D5: CDAE0B  	        CALL SER_SYNC           ;Data Block Sync
06D8: AF      	        XOR A                   ;Clear Byte
06D9: 0610    	        LD B, 10H
06DB:         	CLR_Y:
06DB: CD9B0B  	        CALL LCD_DATA
06DE: CD9B0B  	        CALL LCD_DATA
06E1: 10F8    	        DJNZ CLR_Y
06E3: 0C      	        INC C
06E4: 79      	        LD A, C
06E5: FE20    	        CP 20H
06E7: 20DF    	        JR NZ, CLR_X        
06E9: C9      	        RET
              	
              	; Clears the ASCII Text LCD
06EA:         	CLEAR_TXT_LCD:
06EA: CD0B07  	        CALL SET_TXT_MODE
06ED: 3E80    	        LD A, 80H
06EF: CD960B  	        CALL LCD_INST
06F2: 3E02    	        LD A, 02H 
06F4: CDAE0B  	        CALL SER_SYNC           ;Data Block Sync
06F7: 0640    	        LD B, 40H
06F9:         	CLR_ROWS:
06F9: 3E20    	        LD A,  " "
06FB: CD9B0B  	        CALL LCD_DATA
06FE: 10F9    	        DJNZ CLR_ROWS
0700: C9      	        RET
              	        
              	; Set Graphics Mode
0701:         	SET_GR_MODE:
0701: 3E34    	        LD A, 34H
0703: CD960B  	        CALL LCD_INST
0706: 3E36    	        LD A, 36H
0708: C3960B  	        JP LCD_INST
              	        
              	; Set Text Mode
070B:         	SET_TXT_MODE:
070B: 3E30    	        LD A, 30H
070D: C3960B  	        JP LCD_INST
              	        
              	;Draw Box
              	;Inputs: BC = X0,Y0
              	;        DE = X1,Y1
              	;Destroys: HL
0710:         	DRAW_BOX:
0710: C5      	        PUSH BC
0711:         	GTOP:
0711: CDCB08  	        CALL DRAW_PIXEL
0714: 7A      	        LD A, D
0715: 04      	        INC B
0716: B8      	        CP B
0717: 30F8    	        JR NC, GTOP
0719: C1      	        POP BC
              	        
071A: C5      	        PUSH BC
071B: 4B      	        LD C, E
071C:         	GBOTTOM:
071C: CDCB08  	        CALL DRAW_PIXEL
071F: 7A      	        LD A, D
0720: 04      	        INC B
0721: B8      	        CP B
0722: 30F8    	        JR NC, GBOTTOM
0724: C1      	        POP BC
              	        
0725: C5      	        PUSH BC
0726:         	GLEFT:
0726: CDCB08  	        CALL DRAW_PIXEL
0729: 7B      	        LD A, E
072A: 0C      	        INC C
072B: B9      	        CP C
072C: 30F8    	        JR NC, GLEFT
072E: C1      	        POP BC
              	        
072F: C5      	        PUSH BC
0730: 42      	        LD B, D
0731:         	GRIGHT:
0731: CDCB08  	        CALL DRAW_PIXEL
0734: 7B      	        LD A, E
0735: 0C      	        INC C
0736: B9      	        CP C
0737: 30F8    	        JR NC, GRIGHT
0739: C1      	        POP BC
073A: C9      	        RET
              	        
              	;Fill Box
              	;Draws vertical lines from X0,Y0 to X0,Y1 and increase X0 to X1 until X0=X1
              	;Inputs: BC = X0,Y0
              	;        DE = X1,Y1
              	;Destroys: HL
073B:         	FILL_BOX:
073B: C5      	        PUSH BC
073C:         	NEXT_PIXEL:
073C: CDCB08  	        CALL DRAW_PIXEL
073F: 7B      	        LD A, E
0740: 0C      	        INC C
0741: B9      	        CP C
0742: 30F8    	        JR NC, NEXT_PIXEL
0744: C1      	        POP BC
0745: 7A      	        LD A, D
0746: 04      	        INC B
0747: B8      	        CP B
0748: 30F1    	        JR NC, FILL_BOX
074A: C9      	        RET
              	        
              	;Draw a line between two points using Bresenham Line Algorithm
              	; void plotLine(int x0, int y0, int x1, int y1)
              	; {
              	;    int dx =  abs(x1-x0), sx = x0<x1 ? 1 : -1;
              	;    int dy = -abs(y1-y0), sy = y0<y1 ? 1 : -1;
              	;    int err = dx+dy, e2; /* error value e_xy */
              	        
              	;    for(;;){  /* loop */
              	;       setPixel(x0,y0);
              	;       if (x0==x1 && y0==y1) break;
              	;       e2 = 2*err;
              	;       if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
              	;       if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
              	;    }
              	; }
              	;Inputs: BC = X0,Y0
              	;        DE = X1,Y1
074B:         	DRAW_LINE:
              	;check that points are in range
074B: 79      	        LD A, C
074C: FE40    	        CP 40H
074E: D0      	        RET NC
074F: 78      	        LD A, B
0750: FE80    	        CP 80H
0752: D0      	        RET NC
0753: 7B      	        LD A, E
0754: FE40    	        CP 40H
0756: D0      	        RET NC
0757: 7A      	        LD A, D
0758: FE80    	        CP 80H
075A: D0      	        RET NC
              	        
              	;sx = x0<x1 ? 1 : -1
075B: 2601    	        LD H, 01H
075D: 78      	        LD A, B
075E: BA      	        CP D
075F: 3802    	        JR C, $ + 4
0761: 26FF    	        LD H, 0FFH
0763: 7C      	        LD A, H
0764: 3286FB  	        LD (SX), A
              	        
              	;sy = y0<y1 ? 1 : -1
0767: 2601    	        LD H, 01H
0769: 79      	        LD A, C
076A: BB      	        CP E
076B: 3802    	        JR C, $ + 4
076D: 26FF    	        LD H, 0FFH
076F: 7C      	        LD A, H
0770: 3287FB  	        LD (SY), A
              	        
0773: ED5384FB	        ld (ENDPT), DE
              	        
              	;dx =  abs(x1-x0)
0777: C5      	        PUSH BC
0778: 6A      	        LD L, D
0779: 2600    	        LD H, 0
077B: 48      	        LD C, B
077C: 0600    	        LD B, 0
077E: B7      	        OR A
077F: ED42    	        SBC HL, BC
0781: CDEC07  	        CALL ABSHL
0784: 2288FB  	        LD (DX), HL
0787: C1      	        POP BC
              	        
              	;dy = -abs(y1-y0)
0788: C5      	        PUSH BC
0789: 6B      	        LD L, E
078A: 2600    	        LD H, 0
078C: 0600    	        LD B, 0
078E: B7      	        OR A
078F: ED42    	        SBC HL, BC
0791: CDEC07  	        CALL ABSHL
0794: AF      	        XOR A
0795: 95      	        SUB L
0796: 6F      	        LD L, A
0797: 9F      	        SBC A, A
0798: 94      	        SUB H
0799: 67      	        LD H, A
079A: 228AFB  	        LD (DY), HL
079D: C1      	        POP BC
              	        
              	;err = dx+dy,
079E: ED5B88FB	        LD DE, (DX)
07A2: 19      	        ADD HL, DE
07A3: 228CFB  	        LD (ERR), HL
              	        
07A6:         	LINE_LOOP:
              	;setPixel(x0,y0)
07A6: CDCB08  	        CALL DRAW_PIXEL
              	        
              	;if (x0==x1 && y0==y1) break;
07A9: 3A85FB  	        LD A, (ENDPT + 1)
07AC: B8      	        CP B
07AD: 2005    	        JR NZ, $ + 7
07AF: 3A84FB  	        LD A, (ENDPT)
07B2: B9      	        CP C
07B3: C8      	        RET Z
              	        
              	;e2 = 2*err;
07B4: 2A8CFB  	        LD HL, (ERR)
07B7: 29      	        ADD HL, HL              ;E2
              	        
              	;if (e2 >= dy)  err += dy; x0 += sx;
07B8: ED5B8AFB	        LD DE, (DY)
07BC: B7      	        OR A
07BD: ED52    	        SBC HL, DE
07BF: 19      	        ADD HL, DE
07C0: FAD107  	        JP M, LL2
              	        
07C3: E5      	        PUSH HL
07C4: 2A8CFB  	        LD HL, (ERR)
07C7: 19      	        ADD HL, DE
07C8: 228CFB  	        LD (ERR), HL
07CB: 3A86FB  	        LD A, (SX)
07CE: 80      	        ADD A, B
07CF: 47      	        LD B, A
07D0: E1      	        POP HL
              	        
07D1:         	LL2:
              	;if (e2 <= dx)  err += dx; y0 += sy;
07D1: ED5B88FB	        LD DE, (DX)
07D5: B7      	        OR A
07D6: ED52    	        SBC HL, DE
07D8: 19      	        ADD HL, DE
07D9: 2803    	        JR Z, LL3
07DB: F2A607  	        JP P, LINE_LOOP
07DE:         	LL3:
07DE: 2A8CFB  	        LD HL, (ERR)
07E1: 19      	        ADD HL, DE
07E2: 228CFB  	        LD (ERR), HL
07E5: 3A87FB  	        LD A, (SY)
07E8: 81      	        ADD A, C
07E9: 4F      	        LD C, A
              	        
07EA: 18BA    	        JR LINE_LOOP
              	        
07EC:         	ABSHL:
07EC: CB7C    	        BIT 7, H
07EE: C8      	        RET Z
07EF: AF      	        XOR A
07F0: 95      	        SUB L
07F1: 6F      	        LD L, A
07F2: 9F      	        SBC A, A
07F3: 94      	        SUB H
07F4: 67      	        LD H, A
07F5: C9      	        RET
              	        
              	;Draw a circle from a midpoint to a radius using Bresenham Line Algorithm
              	; void plotCircle(int xm, int ym, int r)
              	; {
              	;    int x = -r, y = 0, err = 2-2*r, i = 0; /* II. Quadrant */
              	;    printf("Midpoint = (%X,%X), Radius = %X\n", xm, ym, r);
              	;    do {
              	;       printf("(%X,%X) ", xm-x, ym+y); /*   I. Quadrant */
              	;       printf("(%X,%X) ", xm-y, ym-x); /*  II. Quadrant */
              	;       printf("(%X,%X) ", xm+x, ym-y); /* III. Quadrant */
              	;       printf("(%X,%X) ", xm+y, ym+x); /*  IV. Quadrant */
              	;       r = err;
              	;       if (r <= y) err += ++y*2+1;           /* e_xy+e_y < 0 */
              	;       if (r > x || err > y) err += ++x*2+1; /* e_xy+e_x > 0 or no 2nd y-step */
              	;       printf("x = %d, r = %d, y = %d, err =%d\n", x, r, y, err);
              	;    } while (x < 0);
              	; }
              	;Inputs BC = xm,ym (Midpoint)
              	;       E = radius
07F6:         	DRAW_CIRCLE:
              	;   int x = -r, err = 2-2*r; /* II. Quadrant */
07F6: AF      	        XOR A
07F7: 93      	        SUB E
07F8: 3286FB  	        LD (SX), A              ;x
              	;   y = 0
07FB: AF      	        XOR A
07FC: 3287FB  	        LD (SY), A              ;y
              	;   RAD = r
07FF: 1600    	        LD D, 00H
0801: 7B      	        LD A, E
0802: ED538EFB	        LD (RAD), DE            ;r
              	;   err = 2-2*r
0806: EB      	        EX DE, HL
0807: 29      	        ADD HL, HL
0808: EB      	        EX DE, HL
0809: 210200  	        LD HL, 0002H
080C: B7      	        OR A
080D: ED52    	        SBC HL, DE              ;err
080F: 228CFB  	        LD (ERR), HL
              	        
0812:         	CIRCLE_LOOP:
              	;       setPixel(xm-x, ym+y); /*   I. Quadrant */
0812: C5      	        PUSH BC
0813: 3A86FB  	        LD A, (SX)
0816: ED44    	        NEG
0818: 80      	        ADD A, B
0819: 47      	        LD B, A
081A: 3A87FB  	        LD A, (SY)
081D: 81      	        ADD A, C
081E: 4F      	        LD C, A
081F: CDCB08  	        CALL DRAW_PIXEL
0822: C1      	        POP BC
              	;       setPixel(xm+x, ym-y); /* III. Quadrant */
0823: C5      	        PUSH BC
0824: 3A86FB  	        LD A, (SX)
0827: 80      	        ADD A, B
0828: 47      	        LD B, A
0829: 3A87FB  	        LD A, (SY)
082C: ED44    	        NEG
082E: 81      	        ADD A, C
082F: 4F      	        LD C, A
0830: CDCB08  	        CALL DRAW_PIXEL
0833: C1      	        POP BC
              	;       setPixel(xm-y, ym-x); /*  II. Quadrant */
0834: C5      	        PUSH BC
0835: 3A87FB  	        LD A, (SY)
0838: ED44    	        NEG
083A: 80      	        ADD A, B
083B: 47      	        LD B, A
083C: 3A86FB  	        LD A, (SX)
083F: ED44    	        NEG
0841: 81      	        ADD A, C
0842: 4F      	        LD C, A
0843: CDCB08  	        CALL DRAW_PIXEL
0846: C1      	        POP BC
              	;       setPixel(xm+y, ym+x); /*  IV. Quadrant */
0847: C5      	        PUSH BC
0848: 3A87FB  	        LD A, (SY)
084B: 80      	        ADD A, B
084C: 47      	        LD B, A
084D: 3A86FB  	        LD A, (SX)
0850: 81      	        ADD A, C
0851: 4F      	        LD C, A
0852: CDCB08  	        CALL DRAW_PIXEL
0855: C1      	        POP BC
              	;       r = err;
0856: 2A8CFB  	        LD HL, (ERR)
0859: 228EFB  	        LD (RAD), HL
              	;       if (r <= y) err += ++y*2+1;           /* e_xy+e_y < 0 */
085C: 3A87FB  	        LD A, (SY)
085F: 5F      	        LD E, A
0860: 1600    	        LD D, 0
0862: B7      	        OR A
0863: ED52    	        SBC HL, DE
0865: 19      	        ADD HL, DE
0866: 2803    	        JR Z, $ + 5
0868: F27E08  	        JP P, DS1
086B: 3A87FB  	        LD A, (SY)
086E: 3C      	        INC A
086F: 3287FB  	        LD (SY), A
0872: 87      	        ADD A, A
0873: 3C      	        INC A
0874: 5F      	        LD E, A
0875: 1600    	        LD D, 0
0877: 2A8CFB  	        LD HL, (ERR)
087A: 19      	        ADD HL, DE
087B: 228CFB  	        LD (ERR), HL
              	;       if (r > x || err > y) err += ++x*2+1; /* e_xy+e_x > 0 or no 2nd y-step */
087E:         	DS1:
087E: 2A8EFB  	        LD HL, (RAD)
0881: 3A86FB  	        LD A, (SX)
0884: 16FF    	        LD D, 0FFH
0886: 5F      	        LD E, A
0887: B7      	        OR A
0888: ED52    	        SBC HL, DE
088A: 19      	        ADD HL, DE
088B: 2803    	        JR Z, $ + 5
088D: F2A208  	        JP P, DS2
0890: 2A8CFB  	        LD HL, (ERR)
0893: 3A87FB  	        LD A, (SY)
0896: 1600    	        LD D, 0
0898: 5F      	        LD E, A
0899: B7      	        OR A
089A: ED52    	        SBC HL, DE
089C: 19      	        ADD HL, DE
089D: 2816    	        JR Z, DS3
089F: FAB508  	        JP M, DS3
08A2:         	DS2:
08A2: 3A86FB  	        LD A, (SX)
08A5: 3C      	        INC A
08A6: 3286FB  	        LD (SX), A
08A9: 87      	        ADD A, A
08AA: 3C      	        INC A
08AB: 5F      	        LD E, A
08AC: 16FF    	        LD D, 0FFH
08AE: 2A8CFB  	        LD HL, (ERR)
08B1: 19      	        ADD HL, DE
08B2: 228CFB  	        LD (ERR), HL
              	;   } while (x < 0);
08B5:         	DS3:
08B5: 3A86FB  	        LD A, (SX)
08B8: B7      	        OR A
08B9: C21208  	        JP NZ, CIRCLE_LOOP
08BC: C9      	        RET
              	        
              	;Fill Circle
              	;Fills a circle by increasing radius until Radius = Original Radius E
              	;Inputs BC = xm,ym (Midpoint)
              	;       E = radius
08BD:         	FILL_CIRCLE:
08BD: 1601    	        LD D, 01H               ;Start radius
08BF:         	NEXT_CIRCLE:
08BF: D5      	        PUSH DE                 ;Save end Radius
08C0: 5A      	        LD E, D
08C1: CDF607  	        CALL DRAW_CIRCLE
08C4: D1      	        POP DE                  ;Restore Radius
08C5: 7B      	        LD A, E
08C6: 14      	        INC D
08C7: BA      	        CP D
08C8: 30F5    	        JR NC, NEXT_CIRCLE
08CA: C9      	        RET
              	        
              	;Draw Pixel in position X Y
              	;Input B = column/X (0-127), C = row/Y (0-63)
              	;destroys HL
08CB:         	DRAW_PIXEL:
08CB: 79      	        LD A, C
08CC: FE40    	        CP 40H
08CE: D0      	        RET NC
08CF: 78      	        LD A, B
08D0: FE80    	        CP 80H
08D2: D0      	        RET NC
              	        
08D3: D5      	        PUSH DE
08D4: CD0B09  	        CALL SET_GBUF
              	
08D7: 7A      	        LD A, D
08D8: B6      	        OR (HL)
08D9: BE      	        CP (HL)
08DA: CCE208  	        call z, set_collision
              	
08DD: 7A      	        LD A, D
08DE: AE      	        XOR (HL) ; OR ou XOR ???? Ou deixou configuravel???
08DF: 77      	        LD (HL), A
08E0: D1      	        POP DE
08E1: C9      	        RET
              	
              	; Quando tenta ligar um pixel que ja esta ligado...
08E2:         	set_collision:
08E2: 3E01    	        LD A, 1
08E4: 329BFB  	        LD (DRAW_PIXEL_COLLISION), A
08E7: C9      	        ret
              	
              	
              	
              	;Clear Pixel in position X Y
              	;Input B = column/X (0-127), C = row/Y (0-63)
              	;destroys HL
08E8:         	CLEAR_PIXEL:
08E8: 79      	        LD A, C
08E9: FE40    	        CP 40H
08EB: D0      	        RET NC
08EC: 78      	        LD A, B
08ED: FE80    	        CP 80H
08EF: D0      	        RET NC
              	        
08F0: D5      	        PUSH DE
08F1: CD0B09  	        CALL SET_GBUF
              	
08F4: 7A      	        LD A, D
08F5: 2F      	        CPL
08F6: A6      	        AND (HL)
08F7: 77      	        LD (HL), A
08F8: D1      	        POP DE
08F9: C9      	        RET
              	
              	;Flip Pixel in position X Y
              	;Input B = column/X (0-127), C = row/Y (0-63)
              	;destroys HL
08FA:         	FLIP_PIXEL:
08FA: 79      	        LD A, C
08FB: FE40    	        CP 40H
08FD: D0      	        RET NC
08FE: 78      	        LD A, B
08FF: FE80    	        CP 80H
0901: D0      	        RET NC
              	        
0902: D5      	        PUSH DE
0903: CD0B09  	        CALL SET_GBUF
              	
0906: 7A      	        LD A, D
0907: AE      	        XOR (HL)
0908: 77      	        LD (HL), A
0909: D1      	        POP DE
090A: C9      	        RET
              	
              	;Helper routine to set HL to the correct GBUF address given X and Y
              	;Input B = column/X (0-127), C = row/Y (0-63)
              	;Output HL = address of GBUF X,Y byte, D = Byte with Pixel Bit Set
              	;Destroys E
090B:         	SET_GBUF:
090B: 69      	        LD L, C
090C: 2600    	        LD H, 00H
090E: 29      	        ADD HL, HL
090F: 29      	        ADD HL, HL
0910: 29      	        ADD HL, HL
0911: 29      	        ADD HL, HL
0912: ED5B80FB	        LD DE, (VPORT)
0916: 1B      	        DEC DE
0917: 19      	        ADD HL, DE
              	        
0918: 78      	        LD A, B
0919: 1608    	        LD D, 08H
091B:         	BASE_COL:
091B: 23      	        INC HL
091C: 92      	        SUB D
091D: 30FC    	        JR NC, BASE_COL
              	        
091F: 2F      	        CPL
0920: 1601    	        LD D, 01H
0922: B7      	        OR A
0923: C8      	        RET Z
0924:         	SHIFT_BIT:
0924: CB22    	        SLA D
0926: 3D      	        DEC A
0927: 20FB    	        JR NZ, SHIFT_BIT
0929: C9      	        RET
              	
              	;Main draw routine.  Moves GBUF to LCD and clears buffer
              	;Destroys all
092A:         	PLOT_TO_LCD:
092A: 2A80FB  	        LD HL, (VPORT)
092D: 0E80    	        LD C, 80H
092F:         	PLOT_ROW:
092F: 79      	        LD A, C
0930: E69F    	        AND 9FH
0932: CD960B  	        CALL LCD_INST           ;Vertical
0935: 3E80    	        LD A, 80H
0937: CB69    	        BIT 5, C
0939: 2802    	        JR Z, $ + 4
093B: F608    	        OR 08H
093D: CD960B  	        CALL LCD_INST           ;Horizontal
0940: 3E02    	        LD A, 02H 
0942: CDAE0B  	        CALL SER_SYNC           ;Data Block Sync
0945: 0610    	        LD B, 10H               ;send eight double bytes (16 bytes)
0947:         	PLOT_COLUMN:
0947: 7E      	        LD A, (HL)
0948: CD9B0B  	        CALL LCD_DATA
094B: 3A90FB  	        LD A, (CLRBUF)
094E: B7      	        OR A
094F: 2802    	        JR Z, $ + 4
0951: 3600    	        LD (HL), 00H            ;Clear Buffer if CLRBUF is non zero
0953: 23      	        INC HL
0954: 10F1    	        DJNZ PLOT_COLUMN
0956: 0C      	        INC C
0957: CB71    	        BIT 6, C                ;Is Row = 64?
0959: 28D4    	        JR Z, PLOT_ROW
095B: C9      	        RET
              	        
              	; Print ASCII text on a given row
              	; Inputs: A = 0 to 3 Row Number
              	;         DB "String" on next line, terminate with 0
              	; EG:
              	;   LD A,2
              	;   CALL PRINT_STRING
              	;   DB "This Text",0
              	;
095C:         	PRINT_STRING:
095C: 47      	        LD B, A
095D: CD0B07  	        CALL SET_TXT_MODE
0960: 21C20B  	        LD HL, ROWS
0963: 78      	        LD A, B
0964: 85      	        ADD A, L
0965: 3001    	        JR NC, $ + 3
0967: 24      	        INC H
0968: 6F      	        LD L, A
0969: 7E      	        LD A, (HL)
096A: CD960B  	        CALL LCD_INST
096D: 3E02    	        LD A, 02H 
096F: CDAE0B  	        CALL SER_SYNC           ;Data Block Sync
0972: E1      	        POP HL
0973:         	DS_LOOP:
0973: 7E      	        LD A, (HL)
0974: 23      	        INC HL
0975: B7      	        OR A
0976: 2805    	        JR Z, DS_EXIT
0978: CD9B0B  	        CALL LCD_DATA
097B: 18F6    	        JR DS_LOOP
097D:         	DS_EXIT:
097D: E9      	        JP (HL)
              	        
              	;Print Characters at a position X,Y
              	;Eventhough there are 16 columns, only every second column can be written
              	;to and two characters are to be printed.  IE: if you want to print one
              	;character in column 2, then you must set B=0 and print " x", putting
              	;a space before the chracter.
              	;Input B = column/X (0-7), C = row/Y (0-3)
              	;      HL = Start address of text to display, terminate with 0
097E:         	PRINT_CHARS:
097E: CD0B07  	        CALL SET_TXT_MODE
0981: 11C20B  	        LD DE, ROWS
0984: 79      	        LD A, C
0985: 83      	        ADD A, E
0986: 3001    	        JR NC, $ + 3
0988: 14      	        INC D
0989: 5F      	        LD E, A
098A: 1A      	        LD A, (DE)
098B: 80      	        ADD A, B
098C: CD960B  	        CALL LCD_INST
098F: 3E02    	        LD A, 02H 
0991: CDAE0B  	        CALL SER_SYNC           ;Data Block Sync
0994:         	PC_LOOP:
0994: 7E      	        LD A, (HL)
0995: 23      	        INC HL
0996: B7      	        OR A
0997: C8      	        RET Z
0998: CD9B0B  	        CALL LCD_DATA
099B: 18F7    	        JR PC_LOOP
              	        
              	; Delay for LCD write
099D:         	DELAY_US:
099D: 110700  	        LD DE, V_DELAY_US       ;DELAY BETWEEN, was 0010H
09A0:         	DELAY_MS:
09A0: 1B      	        DEC DE                  ;EACH BYTE
09A1: 7A      	        LD A, D                 ;AS PER
09A2: B3      	        OR E                    ;LCD MANUFACTER'S
09A3: 20FB    	        JR NZ, DELAY_MS         ;INSTRUCTIONS
09A5: C9      	        RET
              	        
              	; Set Buffer Clearing after outputting to LCD
              	; Input: A = 0 Buffer to be cleared, A <> 0 Buffer kept
09A6:         	SET_BUF_CLEAR:
09A6: 3EFF    	        LD A, 0FFH
09A8: 3290FB  	        LD (CLRBUF), A
09AB: C3B306  	        JP CLEAR_GBUF
              	        
09AE:         	SET_BUF_NO_CLEAR:
09AE: AF      	        XOR A
09AF: 3290FB  	        LD (CLRBUF), A
09B2: C9      	        RET
              	
              	;Initialise the GLCD Terminal
              	;Clears the GBUF, sets cursor to top left and displays cursor.
              	;This must be called prior to any Terminal routine.  This routine
              	;will as call INIT_LCD.
09B3:         	INIT_TERMINAL:
09B3: 2180F7  	        LD HL,TGBUF              ;Reset VPORT and BUFF_TOP to TGBUF
09B6: 2280FB  	        LD (VPORT),HL           ;to GBUF
09B9: 2282FB  	        LD (TBUF),HL
09BC: CD9E06  	        CALL INIT_LCD           ;Clear LCD GBUF
09BF: 010000  	        LD BC,0000H
09C2: CD780A  	        CALL SET_CURSOR         ;Move cursor to top left
09C5: 185F    	        JR DRAW_CURSOR          ;Draw Cursor and exit
              	
              	;Send or handle ASCII characters to the GLCD screen.  This routines displays
              	;ASCII charcters to the GLCD screen and handles some special control characters
              	;It also handles srolling history of 10 lines.  Characters are drawn at the 
              	;current cursor position.  Cursor increments if characger is drawn.
              	;       CR / 0DH = will move the cursor down and reset it column
              	;       LF / 0AH = is ignored
              	;       FF / 0CH = clears the terminal (restarts)
              	;       BS / 08H = will delete the character at the cursor and move cursor back one
              	;       HT / 09H = will TAB 4 spaces
              	;       UP / 05H = will scroll up one line if any
              	;       DN / 06H = will scroll down one line if any
              	;Input: A = ASCII charcter to send to the GLCD screen.
              	;       A = 0  cursor drawn only
09C7:         	SEND_CHAR_TO_GLCD:
              	        ;Check for special characters
09C7: B7      	        OR A                    ;Zero?
09C8: 285C    	        JR Z,DRAW_CURSOR
09CA:         	DO_SCRL_UP:
09CA: FEB5    	        CP UP                   ;Up Arrow
09CC: 2007    	        JR NZ,DO_SCRL_DN
09CE: AF      	        XOR A
09CF: CDE40A  	        CALL MOVE_VPORT
09D2: C32A09  	        JP PLOT_TO_LCD
09D5:         	DO_SCRL_DN:
09D5: FEB6    	        CP DN                   ;Down Arrow
09D7: 2004    	        JR NZ,DO_CR
09D9: 3E01    	        LD A,1
09DB: 18F2    	        JR $-12                 ;Move VPORT above
09DD:         	DO_CR:
              	        ;Key is now a drawing character, reset VPORT first
09DD: 2180F7  	        LD HL,TGBUF
09E0: 2280FB  	        LD (VPORT),HL
09E3: FE0A    	        CP LF      ;LF
09E5: C8      	        RET Z
09E6: FE0D    	        CP CR      ;CR
09E8: 200D    	        JR NZ,DO_FF
09EA: 3E20    	        LD A,SPACE              ;Clear Cursor
09EC: CD3A0B  	        CALL DRAW_GRAPHIC
09EF: CD960A  	        CALL INC_ROW
09F2: 3293FB  	        LD (CURSOR_YS),A        ;Save start row
09F5: 182F    	        JR DRAW_CURSOR
09F7:         	DO_FF:
09F7: FE0C    	        CP CS                   ;Form Feed / Clear Screen
09F9: 28B8    	        JR Z,INIT_TERMINAL      ;Reset All.
09FB:         	DO_BS:
09FB: FE7F    	        CP DEL                 ;Backspace BKSP
09FD: 200A    	        JR NZ,DO_TAB
09FF: 3E20    	        LD A,SPACE              ;Space
0A01: CD3A0B  	        CALL DRAW_GRAPHIC
0A04: CD040B  	        CALL DEC_CURSOR
0A07: 181D    	        JR DRAW_CURSOR
0A09:         	DO_TAB:
0A09: FE09    	        CP TAB                  ;Horizontal Tab
0A0B: 2013    	        JR NZ,DO_CHAR
0A0D: 3E20    	        LD A,SPACE              ;Space
0A0F: CD3A0B  	        CALL DRAW_GRAPHIC
0A12: CD890A  	        CALL INC_CURSOR
0A15: CD890A  	        CALL INC_CURSOR
0A18: CD890A  	        CALL INC_CURSOR
0A1B: CD890A  	        CALL INC_CURSOR
0A1E: 1806    	        JR DRAW_CURSOR
0A20:         	DO_CHAR:
0A20: CD3A0B  	        CALL DRAW_GRAPHIC
0A23: CD890A  	        CALL INC_CURSOR
0A26:         	DRAW_CURSOR:
0A26: 3A94FB  	        LD A,(CURSOR_ON)
0A29: B7      	        OR A
0A2A: 3E20    	        LD A,SPACE              ;Space
0A2C: 2002    	        JR NZ,$+4               ;Skip cursor draw
0A2E: 3E8F    	        LD A,CURSOR             ;Cursor
0A30: CD3A0B  	        CALL DRAW_GRAPHIC
0A33: C32A09  	        JP PLOT_TO_LCD          ;Plot screen and exit
              	
              	
              	
              	;Send a string of characters to the GLCD.  Prints a string pointed 
              	;by DE.  It stops printing and returns when either a CR is printed or
              	;when the next byte is the same as what is in register A
              	;Inputs: DE = address of string to print
              	;        A = character to stop printing.
              	;Destroy: All
0A36:         	SEND_STRING_TO_GLCD:
0A36: 47      	        LD B,A                  ;Save cp in B
0A37:         	PS1:
0A37: 1A      	        LD A,(DE)               ;Get character
0A38: 13      	        INC DE                  ;Move pointer
0A39: B8      	        CP B                    ;Same as B?
0A3A: 28EA    	        JR Z,DRAW_CURSOR        ;Yes exit and plot LCD screen
0A3C: FE0D    	        CP CR                   ;Is it a CR?
0A3E: 289D    	        JR Z,DO_CR              ;Yes do a CR and plot LCD screen and exit
0A40: FE0C    	        CP CS                   ;Is it a FF?
0A42: 28B3    	        JR Z,DO_FF              ;Yes do a Form Feed and plot LCD screen and exit
0A44: D9      	        EXX                     ;Save bulk registers
0A45: CD3A0B  	        CALL DRAW_GRAPHIC       ;Draw the character
0A48: CD890A  	        CALL INC_CURSOR         ;Move cursor by one
0A4B: D9      	        EXX                     ;Restore bulk registers
0A4C: 18E9    	        JR PS1                  ;Repeat for next character
0A4E: C9      	        RET     
              	
              	;Display the register A in ASCII on the GLCD
              	;Input: A = value to convert and display
0A4F:         	SEND_A_TO_GLCD:
0A4F: CD540A  	        CALL DRAW_A             ;Do the conversion
0A52: 18D2    	        JR DRAW_CURSOR          ;exit and plot LCD screen
0A54:         	DRAW_A:
0A54: F5      	        PUSH AF                 ;Save AF
0A55: 0F      	        RRCA                    ;move high
0A56: 0F      	        RRCA                    ;nibble to low nibble
0A57: 0F      	        RRCA
0A58: 0F      	        RRCA
0A59: CD5D0A  	        CALL NIBBLE_TO_GLCD     ;Convert and display
0A5C: F1      	        POP AF                  ;Restore AF
0A5D:         	NIBBLE_TO_GLCD:
0A5D: E60F    	        AND 0FH                 ;mask out high nibble
0A5F: C690    	        ADD A,90H               ;convert to 
0A61: 27      	        DAA                     ;ASCII
0A62: CE40    	        ADC A,40H               ;using this
0A64: 27      	        DAA                     ;amazing routine
0A65: CD3A0B  	        CALL DRAW_GRAPHIC       ;Draw the character
0A68: CD890A  	        CALL INC_CURSOR         ;Move cursor by one
0A6B: C9      	        RET
              	
              	;Display the register HL in ASCII on the GLCD
              	;Input: HL = value to convert and display
0A6C:         	SEND_HL_TO_GLCD:
0A6C: E5      	        PUSH HL                 ;Save HL
0A6D: 7C      	        LD A,H                  ;get H
0A6E: CD540A  	        CALL DRAW_A             ;Do the conversion
0A71: E1      	        POP HL
0A72: 7D      	        LD A,L                  ;get L
0A73: CD540A  	        CALL DRAW_A             ;Do the conversion
0A76: 18AE    	        JR DRAW_CURSOR          ;exit and plot LCD screen
              	
              	;Set the Graphic cursor position
              	;Inputs: BC = X,Y where X = 0..127, Y = 0..63
              	;Ignores update if one of the X,Y values are out of range
              	;Destroys: A
0A78:         	SET_CURSOR:
              	        ;Check range. Exit if X,Y out of range
0A78: 79      	        LD A, C
0A79: FE40    	        CP 40H
0A7B: D0      	        RET NC
0A7C: 78      	        LD A, B
0A7D: FE80    	        CP 80H
0A7F: D0      	        RET NC
              	        ;Set Cursor and initial start row
0A80: ED4391FB	        LD (CURSOR_XY),BC       ;Save cursor
0A84: 79      	        LD A,C
0A85: 3293FB  	        LD (CURSOR_YS),A        ;And initial Y Start
0A88: C9      	        RET
              	
              	;Increment the cursor by one font character
              	;A Font Character is 6x6 Pixels.  Move column 6 across until it can't then reset
              	;column back to 0 and move 6 down.
              	;If can't go down any further then keep on last row but move column back to 0
              	;Font Characters maximum 20 across and 10 down
              	;Output: Carry Set = No screen overflow
              	;Destroys: A
0A89:         	INC_CURSOR:
0A89: 3A92FB  	        LD A,(CURSOR_X)         ;Get X
0A8C: C606    	        ADD A,6                 ;Add 6
0A8E: FE7E    	        CP 126                  ;Is it >= 126?
0A90: 3004    	        JR NC,INC_ROW           ;Yes, reset column and increment row
0A92: 3292FB  	        LD (CURSOR_X),A         ;Save new column
0A95: C9      	        RET
0A96:         	INC_ROW:
0A96: AF      	        XOR A
0A97: 3292FB  	        LD (CURSOR_X),A         ;reset column to 0
0A9A: 3A91FB  	        LD A,(CURSOR_Y)         ;get row
0A9D: C606    	        ADD A,6                 ;Add 6
0A9F: FE3C    	        CP 60                   ;Is it >= 60
0AA1: 3807    	        JR C,SAVE_ROW           ;No, save new row
0AA3: F5      	        PUSH AF
0AA4: CDAE0A  	        CALL SHIFT_BUFFER       ;Shift buffer up one row
0AA7: F1      	        POP AF
0AA8: D606    	        SUB 6                   ;overflow, just leave the same
0AAA:         	SAVE_ROW:
0AAA: 3291FB  	        LD (CURSOR_Y),A         ;Save new row
0AAD: C9      	        RET
              	
              	;Shift the graphics buffer (GBUF) into the scroll buffer (SBUF) by
              	;one row (6 lines).  Move the top buffer address to the new top of 
              	;the scroll buffer
0AAE:         	SHIFT_BUFFER:
              	        ;Check if anymore buffer left
0AAE: 2A82FB  	        LD HL,(TBUF)        ;Get top buffer address
0AB1: 1100F0  	        LD DE,TGBUF-SBUF    ;Get scroll buffer address
0AB4: B7      	        OR A                ;Clear carry
0AB5: ED52    	        SBC HL,DE           ;TBUF-SBUF
0AB7: 2809    	        JR Z,SKIP_TBUF
0AB9: 19      	        ADD HL,DE           ;restore HL
0ABA: 116000  	        LD DE,16*6          ;Six pixel rows
0ABD: ED52    	        SBC HL,DE           ;Move TBUF down by 6 rows
0ABF: 2282FB  	        LD (TBUF),HL        ;Save new TBUF
0AC2:         	SKIP_TBUF:
0AC2: 2160F0  	        LD HL,TGBUF-SBUF+(16*6) ;Top of scroll buffer less one row
0AC5: 1100F0  	        LD DE,TGBUF-SBUF    ;Top of scroll buffer
0AC8: 01E00A  	        LD BC,16*6*29       ;19 rows (change to 20 lines 19 to 29 (+10)) Z80 Mini
0ACB: EDB0    	        LDIR
0ACD: 21E0FA  	        LD HL,TGBUF+0360H   ;clear last row (9*16)
0AD0: 11E1FA  	        LD DE,TGBUF+0361H
0AD3: 015F00  	        LD BC,5FH
0AD6: AF      	        XOR A
0AD7: 77      	        LD (HL),A
0AD8: EDB0    	        LDIR
              	        ;Move Y Start up one row
0ADA: 3A93FB  	        LD A,(CURSOR_YS)    ;Get Y Start row
0ADD: D606    	        SUB 6
0ADF: D8      	        RET C               ;Ignore if less than zero
0AE0: 3293FB  	        LD (CURSOR_YS),A    
0AE3: C9      	        RET
              	
              	;Move the VPORT vertically between TBUF and end of GBUB.  VPORT will be 
              	;shifted by a standard termial row of 6 lines.
              	;input: A = 0 shift up else shift down
0AE4:         	MOVE_VPORT:
0AE4: 2A80FB  	        LD HL,(VPORT)       ;get viewport
0AE7: EB      	        EX DE,HL
0AE8: B7      	        OR A                ;check move
0AE9: 200E    	        JR NZ,MOVE_DOWN     ;shift down
0AEB:         	MOVE_UP:
0AEB: 2A82FB  	        LD HL,(TBUF)        ;get top of buffer
0AEE: ED52    	        SBC HL,DE           ;
0AF0: C8      	        RET Z               ;if the same, then at top already
0AF1: 21A0FF  	        LD HL,0-60H         ;one row up 60
0AF4:         	SAVE_VPORT:
0AF4: 19      	        ADD HL,DE           ;get new VPORT value
0AF5: 2280FB  	        LD (VPORT),HL
0AF8: C9      	        RET
0AF9:         	MOVE_DOWN:
0AF9: 2180F7  	        LD HL,TGBUF         ;get top of graphics buffer
0AFC: ED52    	        SBC HL,DE           ;
0AFE: C8      	        RET Z               ;if the same, then at top already
0AFF: 216000  	        LD HL,60H           ;one row down 60
0B02: 18F0    	        JR SAVE_VPORT
              	
              	;Decrement the cursor by one font character up to the current row start
              	;Used to help with Backspace character or left arrow?
              	;Destroys: A
0B04:         	DEC_CURSOR:
0B04: 3A92FB  	        LD A,(CURSOR_X)         ;Get X
0B07: D606    	        SUB 6                   ;subract 6
0B09:         	SAVE_COL:
0B09: 3292FB  	        LD (CURSOR_X),A         ;Save new column
              	        ;if < 0 then just make 0 or 20 depending on Y Start
0B0C: D0      	        RET NC
0B0D: C5      	        PUSH BC
0B0E: 3A93FB  	        LD A,(CURSOR_YS)        ;Get Y Start
0B11: 47      	        LD B,A
0B12: 3A91FB  	        LD A,(CURSOR_Y)         ;Get Y
0B15: 90      	        SUB B
0B16: C1      	        POP BC
0B17: 3E00    	        LD A,0                  ;reset to 0
0B19: 28EE    	        JR Z,SAVE_COL
0B1B: 3E78    	        LD A,6*20               ;last column 20
0B1D: 3292FB  	        LD (CURSOR_X),A         ;Save new column
0B20: 3A91FB  	        LD A,(CURSOR_Y)
0B23: D606    	        SUB 6                   ;move row one line up
0B25: 3291FB  	        LD (CURSOR_Y),A         ;Save new row
0B28: C9      	        RET
              	
              	;Get cursor position
              	;Outputs: BC = X,Y where X = 0..127, Y = 0..63
0B29:         	GET_CURSOR:
0B29: ED4B91FB	        LD BC,(CURSOR_XY)
0B2D: C9      	        RET
              	
              	;Display Cursor
              	;Input: A = 0, Turn cursor on, A = non zero, Turn cursor off
              	;Default is Cursor ON
0B2E:         	DISPLAY_CURSOR:
0B2E: 3294FB  	        LD (CURSOR_ON),A
0B31: C9      	        RET
              	
              	;Inverse Graphic Drawing
              	;Initial state is normal.  Calling this routine will TOGGLE the inverse drawing flag
              	;Destroys: A
0B32:         	INV_GRAPHIC:
0B32: 3A95FB  	        LD A,(INVERSE)
0B35: 2F      	        CPL                 ;flip bits
0B36: 3295FB  	        LD (INVERSE),A
0B39: C9      	        RET
              	
              	;Draw Graphic at the current cursor.  Draw either an ASCII character or
              	;a custom sprite/picture
              	;Input: A = ASCII number or 
              	;    if A=0 Then 
              	;       HL = Address of graphic data
              	;       B = width of graphic in pixels (1-128)
              	;       C = height of graphic in pixels (1-64)
              	;Destroys: All
0B3A:         	DRAW_GRAPHIC:
0B3A: B7      	        OR A                ;is A=0
0B3B: 2810    	        JR Z,PLOT_GRAPHIC   ;yes, use data pointing to HL
              	        ;Use internal font table and index it to value in A
0B3D: 3D      	        DEC A               ;fix for A = 0..255
0B3E: 2600    	        LD H,0
0B40: 6F      	        LD L,A
0B41: 29      	        ADD HL,HL           ;Multipy A by 2
0B42: 54      	        LD D,H
0B43: 5D      	        LD E,L              ;Save in DE
0B44: 29      	        ADD HL,HL           ;Multipy A by 4
0B45: 19      	        ADD HL,DE           ;Multiply by 6
0B46: 11D00B  	        LD DE,FONT_DATA     ;Font Table
0B49: 19      	        ADD HL,DE           ;Add index (A*8) to HL
0B4A: 010606  	        LD BC,0606H         ;Six pixels across, Six pixels down
0B4D:         	PLOT_GRAPHIC:
0B4D: 50      	        LD D,B              ;D=Column pixel count
0B4E: 7A      	        LD A,D
0B4F: 3296FB  	        LD (PIXEL_X),A      ;Save original pixel length
0B52: 59      	        LD E,C              ;E=Row pixel count
0B53: ED4B91FB	        LD BC,(CURSOR_XY)   ;Get graphics cursor position
0B57:         	PLOT_BYTE:
0B57: 7A      	        LD A,D              ;Get column bit count
0B58: D608    	        SUB 8
0B5A: 57      	        LD D,A
0B5B: D5      	        PUSH DE        
0B5C: 1608    	        LD D,8
0B5E: 5E      	        LD E,(HL)           ;get pixel data
0B5F: 3009    	        JR NC,INV_BIT
0B61: 82      	        ADD A,D             ;Restore column bit count
0B62: 57      	        LD D,A
0B63: 7A      	        LD A,D
              	        ;D = Rotate adjust count
0B64: CB0B    	        RRC E               ;rotate it to get first bit in bit 7
0B66: 15      	        DEC D
0B67: 20FB    	        JR NZ,$-3
0B69: 57      	        LD D,A              ;reset D to actual bit count
0B6A:         	INV_BIT:
0B6A: 3E00    	        LD A, 0      ;check inverse flag
0B6C: AB      	        XOR E               ;flip bits
0B6D: 5F      	        LD E,A              ;save new data
0B6E:         	PLOT_BIT:
0B6E: CB03    	        RLC E
0B70: E5      	        PUSH HL
0B71: 3005    	        JR NC,REMOVE_PIXEL
0B73: CDCB08  	        CALL DRAW_PIXEL
0B76: 1803    	        JR $+5
0B78:         	REMOVE_PIXEL:
              	        ;CALL CLEAR_PIXEL
0B78: 00      	        NOP 
0B79: 00      	        NOP 
0B7A: 00      	        NOP 
0B7B: E1      	        POP HL
0B7C: 04      	        INC B               ;move X to the right by one
0B7D: 15      	        DEC D
0B7E: 20EE    	        JR NZ,PLOT_BIT
              	        ;All bits are plotted check if D <= 0
0B80: 23      	        INC HL              ;move to next pixel byte
0B81: D1      	        POP DE              ;restore Column/Row bit count
0B82: 7A      	        LD A,D
0B83: B7      	        OR A                ;check for zero or lessor
0B84: 2803    	        JR Z,$+5
0B86: F2570B  	        JP P,PLOT_BYTE      ;its greater or zero, do next byte
              	        ;Move down a row and set column to the start
0B89: 1D      	        DEC E               ;move column pixel count down by one
0B8A: C8      	        RET Z               ;if its zero no more to do, just exit
0B8B: 0C      	        INC C               ;move down a row
0B8C: 3A92FB  	        LD A,(CURSOR_X)
0B8F: 47      	        LD B,A              ;reset column
0B90: 3A96FB  	        LD A,(PIXEL_X)
0B93: 57      	        LD D,A              ;reset pixel length per row
0B94: 18C1    	        JR PLOT_BYTE
              	
              	;Serial/Paralled Communication routines
              	;Send information to the LCD screen via SERIAL or PARALLEL connection.  Parallel is straight
              	;forward.  Just send the Byte in the Accumilator to the relevante Instruction or Data port.
              	;Then call a delay for that byte to be processed by the LCD.
              	;For Serial communication, three Bytes are to be sent using the SPI protocol.
              	;The first byte is a synchronise/configuration byte.  This sets
              	;the Data/Instruction register bit.  The second and third bytes is the actual data to send.
              	;It is split into two bytes with 4 bits of data set at the upper nibble and zeros for the rest.
              	;A maximum of 256 Bytes of Data information can be send with only one Synchronise Byte.  The
              	;LCD Data routine doesn't send the sync byte.  It needs to be done prior by calling SER_SYNC first.
              	;
              	;The two routines to use are:
              	;LCD_DATA, Sends Data information.  Along with SER_SYNC called prior and
              	;LCD_INST, Sends Instruction information
              	
              	;Send to LCD Instruction register
              	;If serial connection it will send the byte with a synchronise byte.
              	;If parallel byte is sent to the Instruction register port and a delay is triggered
              	;Input: A = Byte to send
0B96:         	LCD_INST:
              	;IF COMMS_MODE
              	;        PUSH AF
              	;        XOR A
              	;        CALL SER_SYNC
              	;        POP AF
              	;        JP SER_BYTE
              	;ELSE
0B96: D370    	        OUT (LCD_IR), A
0B98: C39D09  	        JP DELAY_US
              	;ENDIF
              	
              	;Send to LCD Data register
              	;If serial connection it will send the byte with no synchronise byte.  The
              	;synchronise byte is to be sent separately.
              	;If parallel byte is sent to the Data register port and a delay is triggered
              	;Input: A = Byte to send
0B9B:         	LCD_DATA:
              	;IF COMMS_MODE
              	;        JP SER_BYTE
              	;ELSE
0B9B: D371    	        OUT (LCD_DR), A
0B9D: C39D09  	        JP DELAY_US
              	;ENDIF
              	
              	;Serial Byte Send
              	;Send a Byte in two halfs,  First half is the upper nibble with 4 zeros and second
              	;byte is the lower nibble shifted to the upper nibble with 4 zeros.
              	;   EG: if Byte to send is 10010110B, then
              	;   BYTE 1 = 10010000b and
              	;   BYTE 2 = 01100000b
              	;Input: A = byte to send
0BA0:         	SER_BYTE:
0BA0: F5      	        PUSH AF
0BA1: CDA90B  	        CALL SEND_PART
0BA4: F1      	        POP AF
0BA5: 07      	        RLCA
0BA6: 07      	        RLCA
0BA7: 07      	        RLCA
0BA8: 07      	        RLCA
0BA9:         	SEND_PART:
0BA9: E6F0    	        AND 0F0H                ;Mask out lower nibble
0BAB: C3AF0B  	        JP SPI_WR               ;Send First Half of Command/Data byte
              	
              	;Serial Synchronise Byte
              	;Send 5 consecutive '1's then '000's for instruction or '010' for data.
              	;Input: A = 0x00 for instruction register and 0x02 if data register
0BAE:         	SER_SYNC:
              	;IF COMMS_MODE
              	;        OR SER_BT
              	;ELSE
0BAE: C9      	        RET
              	;ENDIF
              	
              	;SPI Write Routine.
              	;Send a byte to the LCD using the SPI protocol
              	;Inputs: A = Byte to be sent
0BAF:         	SPI_WR:
0BAF: C5      	        PUSH BC
0BB0: 0608    	        LD B, 08H       ;Eight Bits to send
0BB2: 4F      	        LD C, A         ;SPI Byte
0BB3: AF      	        XOR A           ;Clear A
0BB4:         	CLK_LOOP:
0BB4: CB01    	        RLC C           ;Put Bit 7 in Carry Flag
0BB6: 8F      	        ADC A,A         ;Set Bit 0 with Carry Flag
0BB7: F602    	        OR 02H          ;Set SCLK high (pulse clock)
0BB9: D300    	        OUT (LCD_SER),A ;Output to LCD
0BBB: AF      	        XOR A           ;Set SCLK low (and SID)
0BBC: D300    	        OUT (LCD_SER),A ;Output to LCD
0BBE: 10F4    	        DJNZ CLK_LOOP   ;Get next Bit
0BC0: C1      	        POP BC
0BC1: C9      	        RET
              	
              	; Contstants
0BC2: 80908898	ROWS:   DB      80H,90H,88H,98H ;Text Row start position
              	        
0BC6:         	INIT_BASIC:
0BC6: 30      	        DB  30H
0BC7: 20      	        DB  20H
0BC8: 30      	        DB  30H
0BC9: 0C      	        DB  0CH
0BCA: 01      	        DB  01H
0BCB: 02      	        DB  02H
              	        ;fim
              	
              	
              	
              	
0BCC: 30      	        DB      30H             ;8 Bit interface, basic instruction
0BCD: 0C      	        DB      0CH             ;display on, cursor & blink off
0BCE: 06      	        DB      06H             ;cursor move to right ,no shift
0BCF: 01      	        DB      01H             ;clear RAM
              	
              	;General Graphic Data
              	;Byte 1 = X pixel length, Byte 2 = Y pixel length
              	;Byte n = Pixel data where bits represent pixels.  Read from LSB
0BD0:         	FONT_DATA:
              	        ;001
0BD0: 1E      	        DB 00011110b   ;  ####
0BD1: 21      	        DB 00100001b   ; #    #
0BD2: 21      	        DB 00100001b   ; #    #
0BD3: 21      	        DB 00100001b   ; #    #
0BD4: 21      	        DB 00100001b   ; #    #
0BD5: 1E      	        DB 00011110b   ;  ####
              	        ;002
0BD6: 1E      	        DB 00011110b   ;  ####
0BD7: 3F      	        DB 00111111b   ; ######
0BD8: 3F      	        DB 00111111b   ; ######
0BD9: 3F      	        DB 00111111b   ; ######
0BDA: 3F      	        DB 00111111b   ; ######
0BDB: 1E      	        DB 00011110b   ;  ####
              	        ;003 Up Arrow
0BDC: 0C      	        DB 00001100b   ;   ##
0BDD: 1E      	        DB 00011110b   ;  ####
0BDE: 3F      	        DB 00111111b   ; ######
0BDF: 0C      	        DB 00001100b   ;   ##
0BE0: 0C      	        DB 00001100b   ;   ##
0BE1: 0C      	        DB 00001100b   ;   ##
              	        ;004 Down Arrow
0BE2: 0C      	        DB 00001100b   ;   ##
0BE3: 0C      	        DB 00001100b   ;   ##
0BE4: 0C      	        DB 00001100b   ;   ##
0BE5: 3F      	        DB 00111111b   ; ######
0BE6: 1E      	        DB 00011110b   ;  ####
0BE7: 0C      	        DB 00001100b   ;   ##
              	        ;005 Left Arrow
0BE8: 08      	        DB 00001000b   ;   #
0BE9: 18      	        DB 00011000b   ;  ##
0BEA: 3F      	        DB 00111111b   ; ######
0BEB: 3F      	        DB 00111111b   ; ######
0BEC: 18      	        DB 00011000b   ;  ##
0BED: 08      	        DB 00001000b   ;   #
              	        ;006 Right Arrow
0BEE: 04      	        DB 00000100b   ;    #
0BEF: 06      	        DB 00000110b   ;    ##
0BF0: 3F      	        DB 00111111b   ; ######
0BF1: 3F      	        DB 00111111b   ; ######
0BF2: 06      	        DB 00000110b   ;    ##
0BF3: 04      	        DB 00000100b   ;    #
              	        ;007 Up Hat
0BF4: 0C      	        DB 00001100b   ;   ##
0BF5: 1E      	        DB 00011110b   ;  ####
0BF6: 3F      	        DB 00111111b   ; ######
0BF7: 00      	        DB 00000000b   ;
0BF8: 00      	        DB 00000000b   ;
0BF9: 00      	        DB 00000000b   ;
              	        ;008 Down Hat
0BFA: 00      	        DB 00000000b   ;
0BFB: 00      	        DB 00000000b   ;
0BFC: 00      	        DB 00000000b   ;
0BFD: 3F      	        DB 00111111b   ; ######
0BFE: 1E      	        DB 00011110b   ;  ####
0BFF: 0C      	        DB 00001100b   ;   ##
              	        ;009 Left Hat
0C00: 08      	        DB 00001000b   ;   #
0C01: 18      	        DB 00011000b   ;  ##
0C02: 38      	        DB 00111000b   ; ###
0C03: 38      	        DB 00111000b   ; ###
0C04: 18      	        DB 00011000b   ;  ##
0C05: 08      	        DB 00001000b   ;   #
              	        ;010 Right Hat
0C06: 04      	        DB 00000100b   ;    #
0C07: 06      	        DB 00000110b   ;    ##
0C08: 07      	        DB 00000111b   ;    ###
0C09: 07      	        DB 00000111b   ;    ###
0C0A: 06      	        DB 00000110b   ;    ##
0C0B: 04      	        DB 00000100b   ;    #
              	        ;011 Note 1
0C0C: 04      	        DB 00000100b   ;    #
0C0D: 04      	        DB 00000100b   ;    # 
0C0E: 04      	        DB 00000100b   ;    # 
0C0F: 1C      	        DB 00011100b   ;  ###
0C10: 3C      	        DB 00111100b   ; ####
0C11: 18      	        DB 00011000b   ;  ##
              	        ;012 Note 2
0C12: 04      	        DB 00000100b   ;    #
0C13: 06      	        DB 00000110b   ;    ## 
0C14: 05      	        DB 00000101b   ;    # #
0C15: 1C      	        DB 00011100b   ;  ###
0C16: 3C      	        DB 00111100b   ; ####
0C17: 18      	        DB 00011000b   ;  ##
              	        ;013 Rocket
0C18: 0C      	        DB 00001100b   ;   ##
0C19: 0C      	        DB 00001100b   ;   ##
0C1A: 0C      	        DB 00001100b   ;   ##
0C1B: 0C      	        DB 00001100b   ;   ##
0C1C: 1E      	        DB 00011110b   ;  ####
0C1D: 33      	        DB 00110011b   ; ##  ##
              	        ;014 Bomb
0C1E: 1E      	        DB 00011110b   ;  ####
0C1F: 0C      	        DB 00001100b   ;   ##
0C20: 1E      	        DB 00011110b   ;  ####
0C21: 1E      	        DB 00011110b   ;  ####
0C22: 1E      	        DB 00011110b   ;  ####
0C23: 0C      	        DB 00001100b   ;   ##
              	        ;015 Explosion
0C24: 0C      	        DB 00001100b   ;   ##
0C25: 3F      	        DB 00111111b   ; ######
0C26: 06      	        DB 00000110b   ;    ##
0C27: 0C      	        DB 00001100b   ;   ##
0C28: 18      	        DB 00011000b   ;  ##
0C29: 0C      	        DB 00001100b   ;   ##
              	        ;016
0C2A: 36      	        DB 00110110b   ; ## ##
0C2B: 24      	        DB 00100100b   ; #  #
0C2C: 00      	        DB 00000000b   ;
0C2D: 00      	        DB 00000000b   ;
0C2E: 00      	        DB 00000000b   ;
0C2F: 00      	        DB 00000000b   ;
              	        ;017
0C30: 36      	        DB 00110110b   ; ## ##
0C31: 12      	        DB 00010010b   ;  #  #
0C32: 00      	        DB 00000000b   ;
0C33: 00      	        DB 00000000b   ;
0C34: 00      	        DB 00000000b   ;
0C35: 00      	        DB 00000000b   ;
              	        ;018
0C36: 0E      	        DB 00001110b   ;   ###
0C37: 12      	        DB 00010010b   ;  #  #
0C38: 38      	        DB 00111000b   ; ###
0C39: 12      	        DB 00010010b   ;  #  #
0C3A: 3E      	        DB 00111110b   ; #####
0C3B: 00      	        DB 00000000b   ;
              	        ;019
0C3C: 1C      	        DB 00011100b   ;  ###
0C3D: 22      	        DB 00100010b   ; #   #
0C3E: 2A      	        DB 00101010b   ; # # #
0C3F: 22      	        DB 00100010b   ; #   #
0C40: 1C      	        DB 00011100b   ;  ###
0C41: 00      	        DB 00000000b   ;
              	        ;020
0C42: 3E      	        DB 00111110b   ; #####
0C43: 34      	        DB 00110100b   ; ## #
0C44: 34      	        DB 00110100b   ; ## #
0C45: 14      	        DB 00010100b   ;  # #
0C46: 14      	        DB 00010100b   ;  # #
0C47: 00      	        DB 00000000b   ;
              	        ;021
0C48: 1C      	        DB 00011100b   ;  ###
0C49: 18      	        DB 00011000b   ;  ##
0C4A: 24      	        DB 00100100b   ; #  #
0C4B: 18      	        DB 00011000b   ;  ##
0C4C: 38      	        DB 00111000b   ; ###
0C4D: 00      	        DB 00000000b   ;
              	        ;022
0C4E: 0C      	        DB 00001100b   ;   ##
0C4F: 0C      	        DB 00001100b   ;   ##
0C50: 02      	        DB 00000010b   ;     #
0C51: 00      	        DB 00000000b   ;
0C52: 00      	        DB 00000000b   ;
0C53: 00      	        DB 00000000b   ;
              	        ;023
0C54: 14      	        DB 00010100b   ;  # #
0C55: 00      	        DB 00000000b   ;
0C56: 08      	        DB 00001000b   ;   #
0C57: 22      	        DB 00100010b   ; #   # 
0C58: 1C      	        DB 00011100b   ;  ###
0C59: 00      	        DB 00000000b   ;
              	        ;024
0C5A: 14      	        DB 00010100b   ;  # #
0C5B: 00      	        DB 00000000b   ;
0C5C: 00      	        DB 00000000b   ;
0C5D: 1C      	        DB 00011100b   ;  ###
0C5E: 22      	        DB 00100010b   ; #   # 
0C5F: 00      	        DB 00000000b   ;
              	        ;025
0C60: 08      	        DB 00001000b   ;   #
0C61: 00      	        DB 00000000b   ;
0C62: 18      	        DB 00011000b   ;  ##
0C63: 22      	        DB 00100010b   ; #   #
0C64: 1C      	        DB 00011100b   ;  ###
0C65: 00      	        DB 00000000b   ;
              	        ;026
0C66: 08      	        DB 00001000b   ;   #
0C67: 00      	        DB 00000000b   ;
0C68: 08      	        DB 00001000b   ;   #
0C69: 08      	        DB 00001000b   ;   #
0C6A: 08      	        DB 00001000b   ;   #
0C6B: 00      	        DB 00000000b   ;
              	        ;027
0C6C: 00      	        DB 00000000b   ;
0C6D: 00      	        DB 00000000b   ;
0C6E: 3E      	        DB 00111110b   ; #####
0C6F: 06      	        DB 00000110b   ;    ##
0C70: 06      	        DB 00000110b   ;    ##
0C71: 00      	        DB 00000000b   ;
              	        ;028
0C72: 1C      	        DB 00011100b   ;  ###
0C73: 1C      	        DB 00011100b   ;  ###
0C74: 3E      	        DB 00111110b   ; #####
0C75: 08      	        DB 00001000b   ;   #
0C76: 1C      	        DB 00011100b   ;  ###
0C77: 00      	        DB 00000000b   ;
              	        ;029
0C78: 08      	        DB 00001000b   ;   #
0C79: 1C      	        DB 00011100b   ;  ###
0C7A: 3E      	        DB 00111110b   ; #####
0C7B: 1C      	        DB 00011100b   ;  ###
0C7C: 08      	        DB 00001000b   ;   #
0C7D: 00      	        DB 00000000b   ;
              	        ;030
0C7E: 14      	        DB 00010100b   ;  # #
0C7F: 3E      	        DB 00111110b   ; #####
0C80: 3E      	        DB 00111110b   ; #####
0C81: 1C      	        DB 00011100b   ;  ###
0C82: 08      	        DB 00001000b   ;   #
0C83: 00      	        DB 00000000b   ;
              	        ;031
0C84: 08      	        DB 00001000b   ;   #
0C85: 1C      	        DB 00011100b   ;  ###
0C86: 3E      	        DB 00111110b   ; #####
0C87: 08      	        DB 00001000b   ;   #
0C88: 1C      	        DB 00011100b   ;  ###
0C89: 00      	        DB 00000000b   ;
              	        ;032 Space
0C8A: 00      	        DB 00000000b   ;
0C8B: 00      	        DB 00000000b   ;
0C8C: 00      	        DB 00000000b   ;
0C8D: 00      	        DB 00000000b   ;
0C8E: 00      	        DB 00000000b   ;
0C8F: 00      	        DB 00000000b   ;
              	        ;033 !
0C90: 08      	        DB 00001000b   ;   #
0C91: 08      	        DB 00001000b   ;   #
0C92: 08      	        DB 00001000b   ;   #
0C93: 00      	        DB 00000000b   ;
0C94: 08      	        DB 00001000b   ;   #
0C95: 00      	        DB 00000000b   ;
              	        ;034 "
0C96: 14      	        DB 00010100b   ;  # #
0C97: 14      	        DB 00010100b   ;  # #
0C98: 00      	        DB 00000000b   ;
0C99: 00      	        DB 00000000b   ;
0C9A: 00      	        DB 00000000b   ;
0C9B: 00      	        DB 00000000b   ;
              	        ;035 #
0C9C: 14      	        DB 00010100b   ;  # #
0C9D: 3E      	        DB 00111110b   ; #####
0C9E: 14      	        DB 00010100b   ;  # #
0C9F: 3E      	        DB 00111110b   ; #####
0CA0: 14      	        DB 00010100b   ;  # #
0CA1: 00      	        DB 00000000b   ;
              	        ;036 $
0CA2: 1E      	        DB 00011110b   ;  ####
0CA3: 28      	        DB 00101000b   ; # #
0CA4: 1C      	        DB 00011100b   ;  ###
0CA5: 0A      	        DB 00001010b   ;   # #
0CA6: 3C      	        DB 00111100b   ; ####
0CA7: 00      	        DB 00000000b   ;
              	        ;037 %
0CA8: 32      	        DB 00110010b   ; ##  #
0CA9: 34      	        DB 00110100b   ; ## #
0CAA: 08      	        DB 00001000b   ;   #
0CAB: 16      	        DB 00010110b   ;  # ##
0CAC: 26      	        DB 00100110b   ; #  ##
0CAD: 00      	        DB 00000000b   ;
              	        ;038 &
0CAE: 18      	        DB 00011000b   ;  ##
0CAF: 24      	        DB 00100100b   ; #  #
0CB0: 1A      	        DB 00011010b   ;  ## #
0CB1: 24      	        DB 00100100b   ; #  #
0CB2: 1A      	        DB 00011010b   ;  ## #
0CB3: 00      	        DB 00000000b   ;
              	        ;039 '
0CB4: 04      	        DB 00000100b   ;    #
0CB5: 08      	        DB 00001000b   ;   #
0CB6: 00      	        DB 00000000b   ;
0CB7: 00      	        DB 00000000b   ;
0CB8: 00      	        DB 00000000b   ;
0CB9: 00      	        DB 00000000b   ;
              	        ;040 (
0CBA: 04      	        DB 00000100b   ;    #
0CBB: 08      	        DB 00001000b   ;   #
0CBC: 08      	        DB 00001000b   ;   #
0CBD: 08      	        DB 00001000b   ;   #
0CBE: 04      	        DB 00000100b   ;    #
0CBF: 00      	        DB 00000000b   ;
              	        ;041 )
0CC0: 10      	        DB 00010000b   ;  #
0CC1: 08      	        DB 00001000b   ;   #
0CC2: 08      	        DB 00001000b   ;   #
0CC3: 08      	        DB 00001000b   ;   #
0CC4: 10      	        DB 00010000b   ;  #
0CC5: 00      	        DB 00000000b   ;
              	        ;042 *
0CC6: 2A      	        DB 00101010b   ; # # #
0CC7: 1C      	        DB 00011100b   ;  ###
0CC8: 3E      	        DB 00111110b   ; #####
0CC9: 1C      	        DB 00011100b   ;  ###
0CCA: 2A      	        DB 00101010b   ; # # #
0CCB: 00      	        DB 00000000b   ;
              	        ;043 +
0CCC: 00      	        DB 00000000b   ;
0CCD: 08      	        DB 00001000b   ;   #
0CCE: 1C      	        DB 00011100b   ;  ###
0CCF: 08      	        DB 00001000b   ;   #
0CD0: 00      	        DB 00000000b   ;
0CD1: 00      	        DB 00000000b   ;
              	        ;044 ,
0CD2: 00      	        DB 00000000b   ;
0CD3: 00      	        DB 00000000b   ;
0CD4: 00      	        DB 00000000b   ;
0CD5: 08      	        DB 00001000b   ;   #
0CD6: 10      	        DB 00010000b   ;  #
0CD7: 00      	        DB 00000000b   ;
              	        ;045 -
0CD8: 00      	        DB 00000000b   ;
0CD9: 00      	        DB 00000000b   ;
0CDA: 1C      	        DB 00011100b   ;  ###
0CDB: 00      	        DB 00000000b   ;
0CDC: 00      	        DB 00000000b   ;
0CDD: 00      	        DB 00000000b   ;
              	        ;046 .
0CDE: 00      	        DB 00000000b   ;
0CDF: 00      	        DB 00000000b   ;
0CE0: 00      	        DB 00000000b   ;
0CE1: 00      	        DB 00000000b   ;
0CE2: 10      	        DB 00010000b   ;  #
0CE3: 00      	        DB 00000000b   ;
              	        ;047 /
0CE4: 04      	        DB 00000100b   ;    #
0CE5: 08      	        DB 00001000b   ;   #
0CE6: 08      	        DB 00001000b   ;   #
0CE7: 08      	        DB 00001000b   ;   #
0CE8: 10      	        DB 00010000b   ;  #
0CE9: 00      	        DB 00000000b   ;
              	        ;048 0
0CEA: 1C      	        DB 00011100b   ;  ###
0CEB: 14      	        DB 00010100b   ;  # #
0CEC: 14      	        DB 00010100b   ;  # #
0CED: 14      	        DB 00010100b   ;  # #
0CEE: 1C      	        DB 00011100b   ;  ###
0CEF: 00      	        DB 00000000b   ;
              	        ;049 1
0CF0: 08      	        DB 00001000b   ;   #
0CF1: 18      	        DB 00011000b   ;  ##
0CF2: 08      	        DB 00001000b   ;   #
0CF3: 08      	        DB 00001000b   ;   #
0CF4: 1C      	        DB 00011100b   ;  ###
0CF5: 00      	        DB 00000000b   ;
              	        ;050 2
0CF6: 1C      	        DB 00011100b   ;  ###
0CF7: 04      	        DB 00000100b   ;    #
0CF8: 1C      	        DB 00011100b   ;  ###
0CF9: 10      	        DB 00010000b   ;  #
0CFA: 1C      	        DB 00011100b   ;  ###
0CFB: 00      	        DB 00000000b   ;
              	        ;051 3
0CFC: 1C      	        DB 00011100b   ;  ###
0CFD: 04      	        DB 00000100b   ;    #
0CFE: 0C      	        DB 00001100b   ;   ##
0CFF: 04      	        DB 00000100b   ;    #
0D00: 1C      	        DB 00011100b   ;  ###
0D01: 00      	        DB 00000000b   ;
              	        ;052 4
0D02: 10      	        DB 00010000b   ;  #
0D03: 10      	        DB 00010000b   ;  #
0D04: 14      	        DB 00010100b   ;  # #
0D05: 1C      	        DB 00011100b   ;  ###
0D06: 04      	        DB 00000100b   ;    #
0D07: 00      	        DB 00000000b   ;
              	        ;053 5
0D08: 1C      	        DB 00011100b   ;  ###
0D09: 10      	        DB 00010000b   ;  #
0D0A: 1C      	        DB 00011100b   ;  ###
0D0B: 04      	        DB 00000100b   ;    #
0D0C: 1C      	        DB 00011100b   ;  ###
0D0D: 00      	        DB 00000000b   ;
              	        ;054 6
0D0E: 18      	        DB 00011000b   ;  ##
0D0F: 10      	        DB 00010000b   ;  #
0D10: 1C      	        DB 00011100b   ;  ###
0D11: 14      	        DB 00010100b   ;  # #
0D12: 1C      	        DB 00011100b   ;  ###
0D13: 00      	        DB 00000000b   ;
              	        ;055 7
0D14: 1C      	        DB 00011100b   ;  ###
0D15: 04      	        DB 00000100b   ;    #
0D16: 08      	        DB 00001000b   ;   #
0D17: 10      	        DB 00010000b   ;  #
0D18: 10      	        DB 00010000b   ;  #
0D19: 00      	        DB 00000000b   ;
              	        ;056 8
0D1A: 1C      	        DB 00011100b   ;  ###
0D1B: 14      	        DB 00010100b   ;  # #
0D1C: 1C      	        DB 00011100b   ;  ###
0D1D: 14      	        DB 00010100b   ;  # #
0D1E: 1C      	        DB 00011100b   ;  ###
0D1F: 00      	        DB 00000000b   ;
              	        ;057 9
0D20: 1C      	        DB 00011100b   ;  ###
0D21: 14      	        DB 00010100b   ;  # #
0D22: 1C      	        DB 00011100b   ;  ###
0D23: 04      	        DB 00000100b   ;    #
0D24: 1C      	        DB 00011100b   ;  ###
0D25: 00      	        DB 00000000b   ;
              	        ;058 :
0D26: 00      	        DB 00000000b   ;
0D27: 08      	        DB 00001000b   ;   #
0D28: 00      	        DB 00000000b   ;
0D29: 08      	        DB 00001000b   ;   #
0D2A: 00      	        DB 00000000b   ;
0D2B: 00      	        DB 00000000b   ;
              	        ;059 ;
0D2C: 00      	        DB 00000000b   ;
0D2D: 08      	        DB 00001000b   ;   #
0D2E: 00      	        DB 00000000b   ;
0D2F: 08      	        DB 00001000b   ;   #
0D30: 10      	        DB 00010000b   ;  #
0D31: 00      	        DB 00000000b   ;
              	        ;060 <
0D32: 04      	        DB 00000100b   ;    #
0D33: 08      	        DB 00001000b   ;   #
0D34: 10      	        DB 00010000b   ;  #
0D35: 08      	        DB 00001000b   ;   #
0D36: 04      	        DB 00000100b   ;    #
0D37: 00      	        DB 00000000b   ;
              	        ;061 =
0D38: 00      	        DB 00000000b   ;
0D39: 1C      	        DB 00011100b   ;  ###
0D3A: 00      	        DB 00000000b   ;
0D3B: 1C      	        DB 00011100b   ;  ###
0D3C: 00      	        DB 00000000b   ;
0D3D: 00      	        DB 00000000b   ;
              	        ;062 >
0D3E: 10      	        DB 00010000b   ;  #
0D3F: 08      	        DB 00001000b   ;   #
0D40: 04      	        DB 00000100b   ;    #
0D41: 08      	        DB 00001000b   ;   #
0D42: 10      	        DB 00010000b   ;  #
0D43: 00      	        DB 00000000b   ;
              	        ;063 ?
0D44: 1C      	        DB 00011100b   ;  ###
0D45: 22      	        DB 00100010b   ; #   # 
0D46: 0C      	        DB 00001100b   ;   ##
0D47: 00      	        DB 00000000b   ;
0D48: 08      	        DB 00001000b   ;   #
0D49: 00      	        DB 00000000b   ;
              	        ;064 @
0D4A: 1C      	        DB 00011100b   ;  ###
0D4B: 22      	        DB 00100010b   ; #   #
0D4C: 26      	        DB 00100110b   ; #  ##
0D4D: 2A      	        DB 00101010b   ; # # # 
0D4E: 0C      	        DB 00001100b   ;   ##
0D4F: 00      	        DB 00000000b   ;
              	        ;065 A
0D50: 18      	        DB 00011000b   ;  ##
0D51: 24      	        DB 00100100b   ; #  #
0D52: 22      	        DB 00100010b   ; #   #
0D53: 3E      	        DB 00111110b   ; #####
0D54: 22      	        DB 00100010b   ; #   #
0D55: 00      	        DB 00000000b   ; 
              	        ;066 B
0D56: 38      	        DB 00111000b   ; ###
0D57: 24      	        DB 00100100b   ; #  #
0D58: 3C      	        DB 00111100b   ; ####
0D59: 22      	        DB 00100010b   ; #   #
0D5A: 3C      	        DB 00111100b   ; ####
0D5B: 00      	        DB 00000000b   ; 
              	        ;067 C
0D5C: 1C      	        DB 00011100b   ;  ###
0D5D: 22      	        DB 00100010b   ; #   # 
0D5E: 20      	        DB 00100000b   ; #
0D5F: 22      	        DB 00100010b   ; #   # 
0D60: 1C      	        DB 00011100b   ;  ###
0D61: 00      	        DB 00000000b   ;
              	        ;068 D
0D62: 3C      	        DB 00111100b   ; ####
0D63: 26      	        DB 00100110b   ; #  ##
0D64: 22      	        DB 00100010b   ; #   #
0D65: 22      	        DB 00100010b   ; #   #
0D66: 3C      	        DB 00111100b   ; ####
0D67: 00      	        DB 00000000b   ;
              	        ;069 E
0D68: 3E      	        DB 00111110b   ; #####
0D69: 20      	        DB 00100000b   ; #
0D6A: 3C      	        DB 00111100b   ; ####
0D6B: 20      	        DB 00100000b   ; #
0D6C: 3E      	        DB 00111110b   ; #####
0D6D: 00      	        DB 00000000b   ;
              	        ;070 F
0D6E: 3E      	        DB 00111110b   ; #####
0D6F: 20      	        DB 00100000b   ; #
0D70: 3C      	        DB 00111100b   ; ####
0D71: 20      	        DB 00100000b   ; #
0D72: 20      	        DB 00100000b   ; #
0D73: 00      	        DB 00000000b   ;
              	        ;071 G
0D74: 1C      	        DB 00011100b   ;  ###
0D75: 20      	        DB 00100000b   ; #    
0D76: 26      	        DB 00100110b   ; #  ##
0D77: 22      	        DB 00100010b   ; #   # 
0D78: 1C      	        DB 00011100b   ;  ###
0D79: 00      	        DB 00000000b   ;
              	        ;072 H
0D7A: 24      	        DB 00100100b   ; #  #
0D7B: 22      	        DB 00100010b   ; #   #
0D7C: 3E      	        DB 00111110b   ; #####
0D7D: 22      	        DB 00100010b   ; #   #
0D7E: 22      	        DB 00100010b   ; #   #
0D7F: 00      	        DB 00000000b   ;
              	        ;073 I
0D80: 1C      	        DB 00011100b   ;  ###
0D81: 08      	        DB 00001000b   ;   #
0D82: 08      	        DB 00001000b   ;   #
0D83: 08      	        DB 00001000b   ;   #
0D84: 1C      	        DB 00011100b   ;  ###
0D85: 00      	        DB 00000000b   ;
              	        ;074 J
0D86: 0C      	        DB 00001100b   ;   ##
0D87: 04      	        DB 00000100b   ;    #
0D88: 04      	        DB 00000100b   ;    #
0D89: 14      	        DB 00010100b   ;  # #
0D8A: 1C      	        DB 00011100b   ;  ###
0D8B: 00      	        DB 00000000b   ;
              	        ;075 K
0D8C: 24      	        DB 00100100b   ; #  #
0D8D: 28      	        DB 00101000b   ; # #
0D8E: 30      	        DB 00110000b   ; ##
0D8F: 28      	        DB 00101000b   ; # #
0D90: 24      	        DB 00100100b   ; #  #
0D91: 00      	        DB 00000000b   ;
              	        ;076 L
0D92: 20      	        DB 00100000b   ; #
0D93: 20      	        DB 00100000b   ; #
0D94: 20      	        DB 00100000b   ; #
0D95: 20      	        DB 00100000b   ; #
0D96: 3C      	        DB 00111100b   ; ####
0D97: 00      	        DB 00000000b   ; 
              	        ;077 M
0D98: 22      	        DB 00100010b   ; #   #
0D99: 36      	        DB 00110110b   ; ## ##
0D9A: 2A      	        DB 00101010b   ; # # #
0D9B: 22      	        DB 00100010b   ; #   #
0D9C: 22      	        DB 00100010b   ; #   #
0D9D: 00      	        DB 00000000b   ; 
              	        ;078 N
0D9E: 22      	        DB 00100010b   ; #   #
0D9F: 32      	        DB 00110010b   ; ##  #
0DA0: 2A      	        DB 00101010b   ; # # #
0DA1: 26      	        DB 00100110b   ; #  ##
0DA2: 22      	        DB 00100010b   ; #   #
0DA3: 00      	        DB 00000000b   ; 
              	        ;079 O
0DA4: 1C      	        DB 00011100b   ;  ###
0DA5: 26      	        DB 00100110b   ; #  ## 
0DA6: 22      	        DB 00100010b   ; #   #
0DA7: 22      	        DB 00100010b   ; #   # 
0DA8: 1C      	        DB 00011100b   ;  ###
0DA9: 00      	        DB 00000000b   ; 
              	        ;080 P
0DAA: 38      	        DB 00111000b   ; ###
0DAB: 24      	        DB 00100100b   ; #  #
0DAC: 38      	        DB 00111000b   ; ###
0DAD: 20      	        DB 00100000b   ; #
0DAE: 20      	        DB 00100000b   ; #
0DAF: 00      	        DB 00000000b   ; 
              	        ;081 Q
0DB0: 1C      	        DB 00011100b   ;  ###
0DB1: 22      	        DB 00100010b   ; #   # 
0DB2: 22      	        DB 00100010b   ; #   #
0DB3: 26      	        DB 00100110b   ; #  ## 
0DB4: 1E      	        DB 00011110b   ;  ####
0DB5: 00      	        DB 00000000b   ; 
              	        ;082 R
0DB6: 38      	        DB 00111000b   ; ###
0DB7: 24      	        DB 00100100b   ; #  #
0DB8: 38      	        DB 00111000b   ; ###
0DB9: 28      	        DB 00101000b   ; # #
0DBA: 24      	        DB 00100100b   ; #  #
0DBB: 00      	        DB 00000000b   ; 
              	        ;083 S
0DBC: 1E      	        DB 00011110b   ;  ####
0DBD: 20      	        DB 00100000b   ; #
0DBE: 1C      	        DB 00011100b   ;  ###
0DBF: 02      	        DB 00000010b   ;     #
0DC0: 3C      	        DB 00111100b   ; ####
0DC1: 00      	        DB 00000000b   ; 
              	        ;084 T
0DC2: 3E      	        DB 00111110b   ; #####
0DC3: 08      	        DB 00001000b   ;   #
0DC4: 08      	        DB 00001000b   ;   #
0DC5: 08      	        DB 00001000b   ;   #
0DC6: 08      	        DB 00001000b   ;   #
0DC7: 00      	        DB 00000000b   ; 
              	        ;085 U
0DC8: 24      	        DB 00100100b   ; #  #
0DC9: 22      	        DB 00100010b   ; #   #
0DCA: 22      	        DB 00100010b   ; #   #
0DCB: 22      	        DB 00100010b   ; #   #
0DCC: 1C      	        DB 00011100b   ;  ###
0DCD: 00      	        DB 00000000b   ; 
              	        ;086 V
0DCE: 22      	        DB 00100010b   ; #   #
0DCF: 22      	        DB 00100010b   ; #   #
0DD0: 14      	        DB 00010100b   ;  # #
0DD1: 14      	        DB 00010100b   ;  # #
0DD2: 08      	        DB 00001000b   ;   #
0DD3: 00      	        DB 00000000b   ; 
              	        ;087 W
0DD4: 24      	        DB 00100100b   ; #  #
0DD5: 22      	        DB 00100010b   ; #   #
0DD6: 2A      	        DB 00101010b   ; # # #
0DD7: 2A      	        DB 00101010b   ; # # #
0DD8: 14      	        DB 00010100b   ;  # #
0DD9: 00      	        DB 00000000b   ; 
              	        ;088 X
0DDA: 22      	        DB 00100010b   ; #   #
0DDB: 14      	        DB 00010100b   ;  # #
0DDC: 08      	        DB 00001000b   ;   #
0DDD: 14      	        DB 00010100b   ;  # #
0DDE: 22      	        DB 00100010b   ; #   #
0DDF: 00      	        DB 00000000b   ; 
              	        ;089 Y
0DE0: 22      	        DB 00100010b   ; #   #
0DE1: 14      	        DB 00010100b   ;  # #
0DE2: 08      	        DB 00001000b   ;   #
0DE3: 08      	        DB 00001000b   ;   #
0DE4: 08      	        DB 00001000b   ;   #
0DE5: 00      	        DB 00000000b   ; 
              	        ;090 Z
0DE6: 3E      	        DB 00111110b   ; #####
0DE7: 04      	        DB 00000100b   ;    #
0DE8: 08      	        DB 00001000b   ;   #
0DE9: 10      	        DB 00010000b   ;  #
0DEA: 3E      	        DB 00111110b   ; #####
0DEB: 00      	        DB 00000000b   ; 
              	        ;091 [
0DEC: 0C      	        DB 00001100b   ;   ##
0DED: 08      	        DB 00001000b   ;   #
0DEE: 08      	        DB 00001000b   ;   #
0DEF: 08      	        DB 00001000b   ;   #
0DF0: 0C      	        DB 00001100b   ;   ##
0DF1: 00      	        DB 00000000b   ; 
              	        ;092 \
0DF2: 10      	        DB 00010000b   ;  #
0DF3: 08      	        DB 00001000b   ;   #
0DF4: 08      	        DB 00001000b   ;   #
0DF5: 08      	        DB 00001000b   ;   #
0DF6: 04      	        DB 00000100b   ;    #
0DF7: 00      	        DB 00000000b   ; 
              	        ;093 ]
0DF8: 18      	        DB 00011000b   ;  ##
0DF9: 08      	        DB 00001000b   ;   #
0DFA: 08      	        DB 00001000b   ;   #
0DFB: 08      	        DB 00001000b   ;   #
0DFC: 18      	        DB 00011000b   ;  ##
0DFD: 00      	        DB 00000000b   ; 
              	        ;094 ^
0DFE: 08      	        DB 00001000b   ;   #
0DFF: 14      	        DB 00010100b   ;  # #
0E00: 00      	        DB 00000000b   ; 
0E01: 00      	        DB 00000000b   ; 
0E02: 00      	        DB 00000000b   ; 
0E03: 00      	        DB 00000000b   ; 
              	        ;095 _
0E04: 00      	        DB 00000000b   ; 
0E05: 00      	        DB 00000000b   ; 
0E06: 00      	        DB 00000000b   ; 
0E07: 00      	        DB 00000000b   ; 
0E08: 3E      	        DB 00111110b   ; #####
0E09: 00      	        DB 00000000b   ; 
              	        ;096 `
0E0A: 08      	        DB 00001000b   ;   #
0E0B: 04      	        DB 00000100b   ;    #
0E0C: 00      	        DB 00000000b   ;
0E0D: 00      	        DB 00000000b   ;
0E0E: 00      	        DB 00000000b   ;
0E0F: 00      	        DB 00000000b   ;
              	        ;097 a
0E10: 00      	        DB 00000000b   ; 
0E11: 1C      	        DB 00011100b   ;  ###
0E12: 22      	        DB 00100010b   ; #   #
0E13: 26      	        DB 00100110b   ; #  ##
0E14: 1A      	        DB 00011010b   ;  ## #
0E15: 00      	        DB 00000000b   ; 
              	        ;098 b
0E16: 20      	        DB 00100000b   ; #
0E17: 3C      	        DB 00111100b   ; ####
0E18: 22      	        DB 00100010b   ; #   #
0E19: 22      	        DB 00100010b   ; #   #
0E1A: 3C      	        DB 00111100b   ; ####
0E1B: 00      	        DB 00000000b   ; 
              	        ;099 c
0E1C: 00      	        DB 00000000b   ; 
0E1D: 1C      	        DB 00011100b   ;  ###
0E1E: 20      	        DB 00100000b   ; #   
0E1F: 20      	        DB 00100000b   ; #   
0E20: 1C      	        DB 00011100b   ;  ###
0E21: 00      	        DB 00000000b   ; 
              	        ;100 d
0E22: 02      	        DB 00000010b   ;     #
0E23: 1E      	        DB 00011110b   ;  ####
0E24: 22      	        DB 00100010b   ; #   #
0E25: 22      	        DB 00100010b   ; #   #
0E26: 1E      	        DB 00011110b   ;  ####
0E27: 00      	        DB 00000000b   ; 
              	        ;101 e
0E28: 1C      	        DB 00011100b   ;  ###
0E29: 22      	        DB 00100010b   ; #   #
0E2A: 3C      	        DB 00111100b   ; ####
0E2B: 20      	        DB 00100000b   ; #
0E2C: 1E      	        DB 00011110b   ;  ####
0E2D: 00      	        DB 00000000b   ; 
              	        ;102 f
0E2E: 0E      	        DB 00001110b   ;   ###
0E2F: 10      	        DB 00010000b   ;  # 
0E30: 3C      	        DB 00111100b   ; ####
0E31: 10      	        DB 00010000b   ;  # 
0E32: 10      	        DB 00010000b   ;  # 
0E33: 00      	        DB 00000000b   ; 
              	        ;103 g
0E34: 1E      	        DB 00011110b   ;  ####
0E35: 22      	        DB 00100010b   ; #   #
0E36: 1E      	        DB 00011110b   ;  ####
0E37: 02      	        DB 00000010b   ;     #
0E38: 3C      	        DB 00111100b   ; ####
0E39: 00      	        DB 00000000b   ; 
              	        ;104 h
0E3A: 20      	        DB 00100000b   ; #
0E3B: 20      	        DB 00100000b   ; #
0E3C: 3C      	        DB 00111100b   ; ####
0E3D: 22      	        DB 00100010b   ; #   #
0E3E: 22      	        DB 00100010b   ; #   #
0E3F: 00      	        DB 00000000b   ; 
              	        ;105 i
0E40: 08      	        DB 00001000b   ;   #
0E41: 00      	        DB 00000000b   ; 
0E42: 08      	        DB 00001000b   ;   #
0E43: 08      	        DB 00001000b   ;   #
0E44: 08      	        DB 00001000b   ;   #
0E45: 00      	        DB 00000000b   ; 
              	        ;106 j
0E46: 04      	        DB 00000100b   ;    # 
0E47: 00      	        DB 00000000b   ; 
0E48: 04      	        DB 00000100b   ;    # 
0E49: 04      	        DB 00000100b   ;    # 
0E4A: 18      	        DB 00011000b   ;  ##
0E4B: 00      	        DB 00000000b   ; 
              	        ;107 k
0E4C: 20      	        DB 00100000b   ; #
0E4D: 24      	        DB 00100100b   ; #  #
0E4E: 28      	        DB 00101000b   ; # #
0E4F: 34      	        DB 00110100b   ; ## #
0E50: 22      	        DB 00100010b   ; #   #
0E51: 00      	        DB 00000000b   ; 
              	        ;108 l
0E52: 08      	        DB 00001000b   ;   #
0E53: 08      	        DB 00001000b   ;   #
0E54: 08      	        DB 00001000b   ;   #
0E55: 08      	        DB 00001000b   ;   #
0E56: 0C      	        DB 00001100b   ;   ##
0E57: 00      	        DB 00000000b   ; 
              	        ;109 m
0E58: 00      	        DB 00000000b   ; 
0E59: 14      	        DB 00010100b   ;  # #
0E5A: 2A      	        DB 00101010b   ; # # #
0E5B: 2A      	        DB 00101010b   ; # # #
0E5C: 2A      	        DB 00101010b   ; # # #
0E5D: 00      	        DB 00000000b   ; 
              	        ;110 n
0E5E: 00      	        DB 00000000b   ; 
0E5F: 1C      	        DB 00011100b   ;  ###
0E60: 22      	        DB 00100010b   ; #   #
0E61: 22      	        DB 00100010b   ; #   #
0E62: 22      	        DB 00100010b   ; #   #
0E63: 00      	        DB 00000000b   ; 
              	        ;111 o
0E64: 00      	        DB 00000000b   ; 
0E65: 1C      	        DB 00011100b   ;  ###
0E66: 22      	        DB 00100010b   ; #   #
0E67: 22      	        DB 00100010b   ; #   #
0E68: 1C      	        DB 00011100b   ;  ###
0E69: 00      	        DB 00000000b   ; 
              	        ;112 p
0E6A: 1C      	        DB 00011100b   ;  ###
0E6B: 22      	        DB 00100010b   ; #   #
0E6C: 22      	        DB 00100010b   ; #   #
0E6D: 3C      	        DB 00111100b   ; ####
0E6E: 20      	        DB 00100000b   ; #
0E6F: 00      	        DB 00000000b   ; 
              	        ;113 q
0E70: 1C      	        DB 00011100b   ;  ###
0E71: 22      	        DB 00100010b   ; #   #
0E72: 22      	        DB 00100010b   ; #   #
0E73: 1E      	        DB 00011110b   ;  ####
0E74: 02      	        DB 00000010b   ;     #
0E75: 00      	        DB 00000000b   ; 
              	        ;114 r
0E76: 00      	        DB 00000000b   ; 
0E77: 2C      	        DB 00101100b   ; # ##
0E78: 30      	        DB 00110000b   ; ##
0E79: 20      	        DB 00100000b   ; #
0E7A: 20      	        DB 00100000b   ; #
0E7B: 00      	        DB 00000000b   ; 
              	        ;115 s
0E7C: 1C      	        DB 00011100b   ;  ###
0E7D: 20      	        DB 00100000b   ; #
0E7E: 1C      	        DB 00011100b   ;  ###
0E7F: 02      	        DB 00000010b   ;     #
0E80: 3C      	        DB 00111100b   ; ####
0E81: 00      	        DB 00000000b   ; 
              	        ;116 t
0E82: 08      	        DB 00001000b   ;   #
0E83: 1C      	        DB 00011100b   ;  ###
0E84: 08      	        DB 00001000b   ;   #
0E85: 08      	        DB 00001000b   ;   #
0E86: 04      	        DB 00000100b   ;    #
0E87: 00      	        DB 00000000b   ; 
              	        ;117 u
0E88: 00      	        DB 00000000b   ; 
0E89: 22      	        DB 00100010b   ; #   # 
0E8A: 22      	        DB 00100010b   ; #   # 
0E8B: 22      	        DB 00100010b   ; #   # 
0E8C: 1C      	        DB 00011100b   ;  ###
0E8D: 00      	        DB 00000000b   ; 
              	        ;118 v
0E8E: 00      	        DB 00000000b   ; 
0E8F: 22      	        DB 00100010b   ; #   # 
0E90: 22      	        DB 00100010b   ; #   # 
0E91: 14      	        DB 00010100b   ;  # # 
0E92: 08      	        DB 00001000b   ;   #
0E93: 00      	        DB 00000000b   ; 
              	        ;119 w
0E94: 00      	        DB 00000000b   ; 
0E95: 22      	        DB 00100010b   ; #   # 
0E96: 22      	        DB 00100010b   ; #   # 
0E97: 2A      	        DB 00101010b   ; # # # 
0E98: 36      	        DB 00110110b   ; ## ##
0E99: 00      	        DB 00000000b   ; 
              	        ;120 x
0E9A: 00      	        DB 00000000b   ; 
0E9B: 22      	        DB 00100010b   ; #   # 
0E9C: 1C      	        DB 00011100b   ;  ###
0E9D: 1C      	        DB 00011100b   ;  ###
0E9E: 22      	        DB 00100010b   ; #   # 
0E9F: 00      	        DB 00000000b   ; 
              	        ;121 y
0EA0: 22      	        DB 00100010b   ; #   # 
0EA1: 22      	        DB 00100010b   ; #   # 
0EA2: 1E      	        DB 00011110b   ;  ####
0EA3: 02      	        DB 00000010b   ;     #
0EA4: 3C      	        DB 00111100b   ; ####
0EA5: 00      	        DB 00000000b   ; 
              	        ;122 z
0EA6: 00      	        DB 00000000b   ; 
0EA7: 3C      	        DB 00111100b   ; #### 
0EA8: 08      	        DB 00001000b   ;   #
0EA9: 10      	        DB 00010000b   ;  #
0EAA: 3C      	        DB 00111100b   ; #### 
0EAB: 00      	        DB 00000000b   ; 
              	        ;123 {
0EAC: 0C      	        DB 00001100b   ;   ##
0EAD: 08      	        DB 00001000b   ;   #
0EAE: 10      	        DB 00010000b   ;  #
0EAF: 08      	        DB 00001000b   ;   #
0EB0: 0C      	        DB 00001100b   ;   ##
0EB1: 00      	        DB 00000000b   ; 
              	        ;124 |
0EB2: 08      	        DB 00001000b   ;   # 
0EB3: 08      	        DB 00001000b   ;   # 
0EB4: 08      	        DB 00001000b   ;   # 
0EB5: 08      	        DB 00001000b   ;   # 
0EB6: 08      	        DB 00001000b   ;   # 
0EB7: 00      	        DB 00000000b   ; 
              	        ;125 }
0EB8: 18      	        DB 00011000b   ;  ##
0EB9: 08      	        DB 00001000b   ;   #
0EBA: 04      	        DB 00000100b   ;    #
0EBB: 08      	        DB 00001000b   ;   #
0EBC: 18      	        DB 00011000b   ;  ##
0EBD: 00      	        DB 00000000b   ; 
              	        ;126 ~
0EBE: 14      	        DB 00010100b   ;  # #
0EBF: 28      	        DB 00101000b   ; # #
0EC0: 00      	        DB 00000000b   ; 
0EC1: 00      	        DB 00000000b   ; 
0EC2: 00      	        DB 00000000b   ; 
0EC3: 00      	        DB 00000000b   ; 
              	        ;127 
0EC4: 2A      	        DB 00101010b   ; # # #
0EC5: 15      	        DB 00010101b   ;  # # #
0EC6: 2A      	        DB 00101010b   ; # # #
0EC7: 15      	        DB 00010101b   ;  # # #
0EC8: 2A      	        DB 00101010b   ; # # #
0EC9: 15      	        DB 00010101b   ;  # # #
              	        ;128
0ECA: 00      	        DB 00000000b   ; 
0ECB: 00      	        DB 00000000b   ; 
0ECC: 00      	        DB 00000000b   ; 
0ECD: 00      	        DB 00000000b   ; 
0ECE: 00      	        DB 00000000b   ; 
0ECF: 00      	        DB 00000000b   ; 
              	        ;129
0ED0: 38      	        DB 00111000b   ; ###
0ED1: 38      	        DB 00111000b   ; ###
0ED2: 38      	        DB 00111000b   ; ###
0ED3: 00      	        DB 00000000b   ; 
0ED4: 00      	        DB 00000000b   ; 
0ED5: 00      	        DB 00000000b   ; 
              	        ;130
0ED6: 07      	        DB 00000111b   ;    ###
0ED7: 07      	        DB 00000111b   ;    ###
0ED8: 07      	        DB 00000111b   ;    ###
0ED9: 00      	        DB 00000000b   ; 
0EDA: 00      	        DB 00000000b   ; 
0EDB: 00      	        DB 00000000b   ; 
              	        ;131
0EDC: 3F      	        DB 00111111b   ; ######
0EDD: 3F      	        DB 00111111b   ; ######
0EDE: 3F      	        DB 00111111b   ; ######
0EDF: 00      	        DB 00000000b   ; 
0EE0: 00      	        DB 00000000b   ; 
0EE1: 00      	        DB 00000000b   ; 
              	        ;132
0EE2: 00      	        DB 00000000b   ; 
0EE3: 00      	        DB 00000000b   ; 
0EE4: 00      	        DB 00000000b   ; 
0EE5: 38      	        DB 00111000b   ; ###
0EE6: 38      	        DB 00111000b   ; ###
0EE7: 38      	        DB 00111000b   ; ###
              	        ;133
0EE8: 38      	        DB 00111000b   ; ###
0EE9: 38      	        DB 00111000b   ; ###
0EEA: 38      	        DB 00111000b   ; ###
0EEB: 38      	        DB 00111000b   ; ###
0EEC: 38      	        DB 00111000b   ; ###
0EED: 38      	        DB 00111000b   ; ###
              	        ;134
0EEE: 07      	        DB 00000111b   ;    ###
0EEF: 07      	        DB 00000111b   ;    ###
0EF0: 07      	        DB 00000111b   ;    ###
0EF1: 38      	        DB 00111000b   ; ###
0EF2: 38      	        DB 00111000b   ; ###
0EF3: 38      	        DB 00111000b   ; ###
              	        ;135
0EF4: 3F      	        DB 00111111b   ; ######
0EF5: 3F      	        DB 00111111b   ; ######
0EF6: 3F      	        DB 00111111b   ; ######
0EF7: 38      	        DB 00111000b   ; ###
0EF8: 38      	        DB 00111000b   ; ###
0EF9: 38      	        DB 00111000b   ; ###
              	        ;136
0EFA: 00      	        DB 00000000b   ; 
0EFB: 00      	        DB 00000000b   ; 
0EFC: 00      	        DB 00000000b   ; 
0EFD: 07      	        DB 00000111b   ;    ###
0EFE: 07      	        DB 00000111b   ;    ###
0EFF: 07      	        DB 00000111b   ;    ###
              	        ;137
0F00: 38      	        DB 00111000b   ; ###
0F01: 38      	        DB 00111000b   ; ###
0F02: 38      	        DB 00111000b   ; ###
0F03: 07      	        DB 00000111b   ;    ###
0F04: 07      	        DB 00000111b   ;    ###
0F05: 07      	        DB 00000111b   ;    ###
              	        ;138
0F06: 07      	        DB 00000111b   ;    ###
0F07: 07      	        DB 00000111b   ;    ###
0F08: 07      	        DB 00000111b   ;    ###
0F09: 07      	        DB 00000111b   ;    ###
0F0A: 07      	        DB 00000111b   ;    ###
0F0B: 07      	        DB 00000111b   ;    ###
              	        ;139
0F0C: 3F      	        DB 00111111b   ; ######
0F0D: 3F      	        DB 00111111b   ; ######
0F0E: 3F      	        DB 00111111b   ; ######
0F0F: 07      	        DB 00000111b   ;    ###
0F10: 07      	        DB 00000111b   ;    ###
0F11: 07      	        DB 00000111b   ;    ###
              	        ;140
0F12: 00      	        DB 00000000b   ; 
0F13: 00      	        DB 00000000b   ; 
0F14: 00      	        DB 00000000b   ; 
0F15: 3F      	        DB 00111111b   ; ######
0F16: 3F      	        DB 00111111b   ; ######
0F17: 3F      	        DB 00111111b   ; ######
              	        ;141
0F18: 38      	        DB 00111000b   ; ###
0F19: 38      	        DB 00111000b   ; ###
0F1A: 38      	        DB 00111000b   ; ###
0F1B: 3F      	        DB 00111111b   ; ######
0F1C: 3F      	        DB 00111111b   ; ######
0F1D: 3F      	        DB 00111111b   ; ######
              	        ;142
0F1E: 07      	        DB 00000111b   ;    ###
0F1F: 07      	        DB 00000111b   ;    ###
0F20: 07      	        DB 00000111b   ;    ###
0F21: 3F      	        DB 00111111b   ; ######
0F22: 3F      	        DB 00111111b   ; ######
0F23: 3F      	        DB 00111111b   ; ######
              	        ;143
0F24: 3F      	        DB 00111111b   ; ######
0F25: 3F      	        DB 00111111b   ; ######
0F26: 3F      	        DB 00111111b   ; ######
0F27: 3F      	        DB 00111111b   ; ######
0F28: 3F      	        DB 00111111b   ; ######
0F29: 3F      	        DB 00111111b   ; ######
              	        ;144
0F2A: 00      	        DB 00000000b   ; 
0F2B: 00      	        DB 00000000b   ; 
0F2C: 0C      	        DB 00001100b   ;   ##
0F2D: 0C      	        DB 00001100b   ;   ##
0F2E: 00      	        DB 00000000b   ; 
0F2F: 00      	        DB 00000000b   ; 
              	        ;145
0F30: 0C      	        DB 00001100b   ;   ##
0F31: 0C      	        DB 00001100b   ;   ##
0F32: 0C      	        DB 00001100b   ;   ##
0F33: 0C      	        DB 00001100b   ;   ##
0F34: 00      	        DB 00000000b   ; 
0F35: 00      	        DB 00000000b   ; 
              	        ;146
0F36: 00      	        DB 00000000b   ; 
0F37: 00      	        DB 00000000b   ; 
0F38: 0F      	        DB 00001111b   ;   ####
0F39: 0F      	        DB 00001111b   ;   ####
0F3A: 00      	        DB 00000000b   ; 
0F3B: 00      	        DB 00000000b   ; 
              	        ;147
0F3C: 0C      	        DB 00001100b   ;   ##
0F3D: 0C      	        DB 00001100b   ;   ##
0F3E: 0F      	        DB 00001111b   ;   ####
0F3F: 07      	        DB 00000111b   ;    ###
0F40: 00      	        DB 00000000b   ; 
0F41: 00      	        DB 00000000b   ; 
              	        ;148
0F42: 00      	        DB 00000000b   ; 
0F43: 00      	        DB 00000000b   ; 
0F44: 0C      	        DB 00001100b   ;   ##
0F45: 0C      	        DB 00001100b   ;   ##
0F46: 0C      	        DB 00001100b   ;   ##
0F47: 0C      	        DB 00001100b   ;   ##
              	        ;149
0F48: 0C      	        DB 00001100b   ;   ##
0F49: 0C      	        DB 00001100b   ;   ##
0F4A: 0C      	        DB 00001100b   ;   ##
0F4B: 0C      	        DB 00001100b   ;   ##
0F4C: 0C      	        DB 00001100b   ;   ##
0F4D: 0C      	        DB 00001100b   ;   ##
              	        ;150
0F4E: 00      	        DB 00000000b   ; 
0F4F: 00      	        DB 00000000b   ; 
0F50: 07      	        DB 00000111b   ;    ###
0F51: 0F      	        DB 00001111b   ;   ####
0F52: 0C      	        DB 00001100b   ;   ##
0F53: 0C      	        DB 00001100b   ;   ##
              	        ;151
0F54: 0C      	        DB 00001100b   ;   ##
0F55: 0C      	        DB 00001100b   ;   ##
0F56: 0F      	        DB 00001111b   ;   ####
0F57: 0F      	        DB 00001111b   ;   ####
0F58: 0C      	        DB 00001100b   ;   ##
0F59: 0C      	        DB 00001100b   ;   ##
              	        ;152
0F5A: 00      	        DB 00000000b   ; 
0F5B: 00      	        DB 00000000b   ; 
0F5C: 3C      	        DB 00111100b   ; ####
0F5D: 3C      	        DB 00111100b   ; ####
0F5E: 00      	        DB 00000000b   ; 
0F5F: 00      	        DB 00000000b   ; 
              	        ;153
0F60: 0C      	        DB 00001100b   ;   ##
0F61: 0C      	        DB 00001100b   ;   ##
0F62: 3C      	        DB 00111100b   ; ####
0F63: 38      	        DB 00111000b   ; ###
0F64: 00      	        DB 00000000b   ; 
0F65: 00      	        DB 00000000b   ; 
              	        ;154
0F66: 00      	        DB 00000000b   ; 
0F67: 00      	        DB 00000000b   ; 
0F68: 3F      	        DB 00111111b   ; ######
0F69: 3F      	        DB 00111111b   ; ######
0F6A: 00      	        DB 00000000b   ; 
0F6B: 00      	        DB 00000000b   ; 
              	        ;155
0F6C: 0C      	        DB 00001100b   ;   ##
0F6D: 0C      	        DB 00001100b   ;   ##
0F6E: 3F      	        DB 00111111b   ; ######
0F6F: 3F      	        DB 00111111b   ; ######
0F70: 00      	        DB 00000000b   ; 
0F71: 00      	        DB 00000000b   ; 
              	        ;156
0F72: 00      	        DB 00000000b   ; 
0F73: 00      	        DB 00000000b   ; 
0F74: 38      	        DB 00111000b   ; ###
0F75: 3C      	        DB 00111100b   ; ####
0F76: 0C      	        DB 00001100b   ;   ##
0F77: 0C      	        DB 00001100b   ;   ##
              	        ;157
0F78: 0C      	        DB 00001100b   ;   ##
0F79: 0C      	        DB 00001100b   ;   ##
0F7A: 3C      	        DB 00111100b   ; ####
0F7B: 3C      	        DB 00111100b   ; ####
0F7C: 0C      	        DB 00001100b   ;   ##
0F7D: 0C      	        DB 00001100b   ;   ##
              	        ;158
0F7E: 00      	        DB 00000000b   ; 
0F7F: 00      	        DB 00000000b   ; 
0F80: 3F      	        DB 00111111b   ; ######
0F81: 3F      	        DB 00111111b   ; ######
0F82: 0C      	        DB 00001100b   ;   ##
0F83: 0C      	        DB 00001100b   ;   ##
              	        ;159
0F84: 0C      	        DB 00001100b   ;   ##
0F85: 0C      	        DB 00001100b   ;   ##
0F86: 3F      	        DB 00111111b   ; ######
0F87: 3F      	        DB 00111111b   ; ######
0F88: 0C      	        DB 00001100b   ;   ##
0F89: 0C      	        DB 00001100b   ;   ##
              	        ;160
0F8A: 00      	        DB 00000000b   ; 
0F8B: 12      	        DB 00010010b   ;  #  #
0F8C: 00      	        DB 00000000b   ; 
0F8D: 00      	        DB 00000000b   ; 
0F8E: 12      	        DB 00010010b   ;  #  #
0F8F: 00      	        DB 00000000b   ; 
              	        ;161
0F90: 12      	        DB 00010010b   ;  #  #
0F91: 12      	        DB 00010010b   ;  #  #
0F92: 12      	        DB 00010010b   ;  #  #
0F93: 12      	        DB 00010010b   ;  #  #
0F94: 00      	        DB 00000000b   ; 
0F95: 00      	        DB 00000000b   ; 
              	        ;162
0F96: 00      	        DB 00000000b   ; 
0F97: 0F      	        DB 00001111b   ;   ####
0F98: 00      	        DB 00000000b   ; 
0F99: 00      	        DB 00000000b   ; 
0F9A: 0F      	        DB 00001111b   ;   ####
0F9B: 00      	        DB 00000000b   ; 
              	        ;163
0F9C: 12      	        DB 00010010b   ;  #  #
0F9D: 13      	        DB 00010011b   ;  #  ##
0F9E: 10      	        DB 00010000b   ;  #
0F9F: 10      	        DB 00010000b   ;  #
0FA0: 0F      	        DB 00001111b   ;   ####
0FA1: 00      	        DB 00000000b   ; 
              	        ;164
0FA2: 00      	        DB 00000000b   ; 
0FA3: 00      	        DB 00000000b   ; 
0FA4: 12      	        DB 00010010b   ;  #  #
0FA5: 12      	        DB 00010010b   ;  #  #
0FA6: 12      	        DB 00010010b   ;  #  #
0FA7: 12      	        DB 00010010b   ;  #  #
              	        ;165
0FA8: 12      	        DB 00010010b   ;  #  #
0FA9: 12      	        DB 00010010b   ;  #  #
0FAA: 12      	        DB 00010010b   ;  #  #
0FAB: 12      	        DB 00010010b   ;  #  #
0FAC: 12      	        DB 00010010b   ;  #  #
0FAD: 12      	        DB 00010010b   ;  #  #
              	        ;166
0FAE: 00      	        DB 00000000b   ; 
0FAF: 0F      	        DB 00001111b   ;   ####
0FB0: 10      	        DB 00010000b   ;  #
0FB1: 10      	        DB 00010000b   ;  #
0FB2: 13      	        DB 00010011b   ;  #  ##
0FB3: 12      	        DB 00010010b   ;  #  #
              	        ;167
0FB4: 12      	        DB 00010010b   ;  #  #
0FB5: 13      	        DB 00010011b   ;  #  ##
0FB6: 10      	        DB 00010000b   ;  #
0FB7: 10      	        DB 00010000b   ;  #
0FB8: 13      	        DB 00010011b   ;  #  ##
0FB9: 12      	        DB 00010010b   ;  #  #
              	        ;168
0FBA: 00      	        DB 00000000b   ; 
0FBB: 3C      	        DB 00111100b   ; ####
0FBC: 00      	        DB 00000000b   ; 
0FBD: 00      	        DB 00000000b   ; 
0FBE: 3C      	        DB 00111100b   ; ####
0FBF: 00      	        DB 00000000b   ; 
              	        ;169
0FC0: 12      	        DB 00010010b   ;  #  #
0FC1: 32      	        DB 00110010b   ; ##  #
0FC2: 02      	        DB 00000010b   ;     #
0FC3: 02      	        DB 00000010b   ;     #
0FC4: 3C      	        DB 00111100b   ; ####
0FC5: 00      	        DB 00000000b   ; 
              	        ;170
0FC6: 00      	        DB 00000000b   ; 
0FC7: 3F      	        DB 00111111b   ; ######
0FC8: 00      	        DB 00000000b   ; 
0FC9: 00      	        DB 00000000b   ; 
0FCA: 3F      	        DB 00111111b   ; ######
0FCB: 00      	        DB 00000000b   ; 
              	        ;171
0FCC: 12      	        DB 00010010b   ;  #  #
0FCD: 33      	        DB 00110011b   ; ##  ##
0FCE: 00      	        DB 00000000b   ; 
0FCF: 00      	        DB 00000000b   ; 
0FD0: 3F      	        DB 00111111b   ; ######
0FD1: 00      	        DB 00000000b   ; 
              	        ;172
0FD2: 00      	        DB 00000000b   ; 
0FD3: 3C      	        DB 00111100b   ; ####
0FD4: 02      	        DB 00000010b   ;     #
0FD5: 02      	        DB 00000010b   ;     #
0FD6: 32      	        DB 00110010b   ; ##  #
0FD7: 12      	        DB 00010010b   ;  #  #
              	        ;173
0FD8: 12      	        DB 00010010b   ;  #  #
0FD9: 32      	        DB 00110010b   ; ##  #
0FDA: 02      	        DB 00000010b   ;     #
0FDB: 02      	        DB 00000010b   ;     #
0FDC: 32      	        DB 00110010b   ; ##  #
0FDD: 12      	        DB 00010010b   ;  #  #
              	        ;174
0FDE: 00      	        DB 00000000b   ; 
0FDF: 3F      	        DB 00111111b   ; ######
0FE0: 00      	        DB 00000000b   ; 
0FE1: 00      	        DB 00000000b   ; 
0FE2: 33      	        DB 00110011b   ; ##  ##
0FE3: 12      	        DB 00010010b   ;  #  #
              	        ;175
0FE4: 12      	        DB 00010010b   ;  #  #
0FE5: 33      	        DB 00110011b   ; ##  ##
0FE6: 00      	        DB 00000000b   ; 
0FE7: 00      	        DB 00000000b   ; 
0FE8: 33      	        DB 00110011b   ; ##  ##
0FE9: 12      	        DB 00010010b   ;  #  #
              	        ;176
0FEA: 0C      	        DB 00001100b   ;   ##
0FEB: 18      	        DB 00011000b   ;  ##
0FEC: 30      	        DB 00110000b   ; ##
0FED: 20      	        DB 00100000b   ; #
0FEE: 00      	        DB 00000000b   ; 
0FEF: 00      	        DB 00000000b   ; 
              	        ;177
0FF0: 0C      	        DB 00001100b   ;   ##
0FF1: 06      	        DB 00000110b   ;    ##
0FF2: 03      	        DB 00000011b   ;     ##
0FF3: 01      	        DB 00000001b   ;      #
0FF4: 00      	        DB 00000000b   ; 
0FF5: 00      	        DB 00000000b   ; 
              	        ;178
0FF6: 00      	        DB 00000000b   ; 
0FF7: 00      	        DB 00000000b   ; 
0FF8: 01      	        DB 00000001b   ;      #
0FF9: 03      	        DB 00000011b   ;     ##
0FFA: 06      	        DB 00000110b   ;    ##
0FFB: 0C      	        DB 00001100b   ;   ##
              	        ;179
0FFC: 00      	        DB 00000000b   ; 
0FFD: 00      	        DB 00000000b   ; 
0FFE: 20      	        DB 00100000b   ; #
0FFF: 30      	        DB 00110000b   ; ##
1000: 18      	        DB 00011000b   ;  ##
1001: 0C      	        DB 00001100b   ;   ##
              	        ;180
1002: 0C      	        DB 00001100b   ;   ##
1003: 1E      	        DB 00011110b   ;  ####
1004: 33      	        DB 00110011b   ; ##  ##
1005: 21      	        DB 00100001b   ; #    # 
1006: 00      	        DB 00000000b   ; 
1007: 00      	        DB 00000000b   ; 
              	        ;181
1008: 0C      	        DB 00001100b   ;   ##
1009: 06      	        DB 00000110b   ;    ##
100A: 03      	        DB 00000011b   ;     ##
100B: 03      	        DB 00000011b   ;     ##
100C: 06      	        DB 00000110b   ;    ##
100D: 0C      	        DB 00001100b   ;   ##
              	        ;182
100E: 00      	        DB 00000000b   ; 
100F: 00      	        DB 00000000b   ; 
1010: 21      	        DB 00100001b   ; #    # 
1011: 33      	        DB 00110011b   ; ##  ##
1012: 1E      	        DB 00011110b   ;  ####
1013: 0C      	        DB 00001100b   ;   ##
              	        ;183
1014: 0C      	        DB 00001100b   ;   ##
1015: 18      	        DB 00011000b   ;  ##
1016: 30      	        DB 00110000b   ; ##
1017: 30      	        DB 00110000b   ; ##
1018: 18      	        DB 00011000b   ;  ##
1019: 0C      	        DB 00001100b   ;   ##
              	        ;184
101A: 0C      	        DB 00001100b   ;   ##
101B: 18      	        DB 00011000b   ;  ##
101C: 31      	        DB 00110001b   ; ##   #
101D: 23      	        DB 00100011b   ; #   ##
101E: 06      	        DB 00000110b   ;    ##
101F: 0C      	        DB 00001100b   ;   ##
              	        ;185
1020: 0C      	        DB 00001100b   ;   ##
1021: 06      	        DB 00000110b   ;    ##
1022: 23      	        DB 00100011b   ; #   ##
1023: 31      	        DB 00110001b   ; ##   #
1024: 18      	        DB 00011000b   ;  ##
1025: 0C      	        DB 00001100b   ;   ##
              	        ;186
1026: 0C      	        DB 00001100b   ;   ##
1027: 1E      	        DB 00011110b   ;  ####
1028: 33      	        DB 00110011b   ; ##  ##
1029: 33      	        DB 00110011b   ; ##  ##
102A: 1E      	        DB 00011110b   ;  ####
102B: 0C      	        DB 00001100b   ;   ##
              	        ;187
102C: 33      	        DB 00110011b   ; ##  ##
102D: 33      	        DB 00110011b   ; ##  ##
102E: 0C      	        DB 00001100b   ;   ##
102F: 0C      	        DB 00001100b   ;   ##
1030: 33      	        DB 00110011b   ; ##  ##
1031: 33      	        DB 00110011b   ; ##  ##
              	        ;188
1032: 03      	        DB 00000011b   ;     ##
1033: 03      	        DB 00000011b   ;     ##
1034: 0C      	        DB 00001100b   ;   ##
1035: 0C      	        DB 00001100b   ;   ##
1036: 30      	        DB 00110000b   ; ##
1037: 30      	        DB 00110000b   ; ##
              	        ;189
1038: 30      	        DB 00110000b   ; ##
1039: 30      	        DB 00110000b   ; ##
103A: 0C      	        DB 00001100b   ;   ##
103B: 0C      	        DB 00001100b   ;   ##
103C: 03      	        DB 00000011b   ;     ##
103D: 03      	        DB 00000011b   ;     ##
              	        ;190
103E: 2A      	        DB 00101010b   ; # # #
103F: 14      	        DB 00010100b   ;  # #
1040: 2A      	        DB 00101010b   ; # # #
1041: 14      	        DB 00010100b   ;  # #
1042: 2A      	        DB 00101010b   ; # # #
1043: 00      	        DB 00000000b   ; 
              	        ;191
1044: 14      	        DB 00010100b   ;  # #
1045: 2A      	        DB 00101010b   ; # # #
1046: 14      	        DB 00010100b   ;  # #
1047: 2A      	        DB 00101010b   ; # # #
1048: 14      	        DB 00010100b   ;  # #
1049: 00      	        DB 00000000b   ; 
              	        ;192
104A: 00      	        DB 00000000b   ; 
104B: 1A      	        DB 00011010b   ;  ## #
104C: 24      	        DB 00100100b   ; #  #
104D: 24      	        DB 00100100b   ; #  #
104E: 1A      	        DB 00011010b   ;  ## #
104F: 00      	        DB 00000000b   ; 
              	        ;193
1050: 18      	        DB 00011000b   ;  ##
1051: 24      	        DB 00100100b   ; #  #
1052: 2C      	        DB 00101100b   ; # ##
1053: 22      	        DB 00100010b   ; #   #
1054: 2C      	        DB 00101100b   ; # ##
1055: 00      	        DB 00000000b   ; 
              	        ;194
1056: 00      	        DB 00000000b   ; 
1057: 22      	        DB 00100010b   ; #   #
1058: 1C      	        DB 00011100b   ;  ###
1059: 22      	        DB 00100010b   ; #   #
105A: 1C      	        DB 00011100b   ;  ###
105B: 00      	        DB 00000000b   ; 
              	        ;195
105C: 1C      	        DB 00011100b   ;  ###
105D: 30      	        DB 00110000b   ; ##
105E: 1C      	        DB 00011100b   ;  ###
105F: 22      	        DB 00100010b   ; #   #
1060: 1C      	        DB 00011100b   ;  ### 
1061: 00      	        DB 00000000b   ; 
              	        ;196
1062: 0E      	        DB 00001110b   ;   ### 
1063: 30      	        DB 00110000b   ; ##
1064: 3C      	        DB 00111100b   ; ####
1065: 30      	        DB 00110000b   ; ##
1066: 0E      	        DB 00001110b   ;   ###
1067: 00      	        DB 00000000b   ; 
              	        ;197
1068: 1C      	        DB 00011100b   ;  ###
1069: 22      	        DB 00100010b   ; #   #
106A: 3E      	        DB 00111110b   ; #####
106B: 22      	        DB 00100010b   ; #   #
106C: 1C      	        DB 00011100b   ;  ###
106D: 00      	        DB 00000000b   ; 
              	        ;198
106E: 20      	        DB 00100000b   ; #
106F: 10      	        DB 00010000b   ;  #
1070: 08      	        DB 00001000b   ;   #
1071: 14      	        DB 00010100b   ;  # #
1072: 22      	        DB 00100010b   ; #   # 
1073: 00      	        DB 00000000b   ; 
              	        ;199
1074: 24      	        DB 00100100b   ; #  #
1075: 24      	        DB 00100100b   ; #  #
1076: 38      	        DB 00111000b   ; ###
1077: 20      	        DB 00100000b   ; #
1078: 20      	        DB 00100000b   ; # 
1079: 00      	        DB 00000000b   ; 
              	        ;200
107A: 00      	        DB 00000000b   ; 
107B: 3E      	        DB 00111110b   ; #####
107C: 14      	        DB 00010100b   ;  # #
107D: 14      	        DB 00010100b   ;  # #
107E: 24      	        DB 00100100b   ; #  #
107F: 00      	        DB 00000000b   ; 
              	        ;201
1080: 00      	        DB 00000000b   ; 
1081: 1E      	        DB 00011110b   ;  ####
1082: 34      	        DB 00110100b   ; ## #
1083: 34      	        DB 00110100b   ; ## #
1084: 18      	        DB 00011000b   ;  ##
1085: 00      	        DB 00000000b   ; 
              	        ;202
1086: 06      	        DB 00000110b   ;    ##
1087: 1C      	        DB 00011100b   ;  ###
1088: 36      	        DB 00110110b   ; ## ##
1089: 1C      	        DB 00011100b   ;  ###
108A: 30      	        DB 00110000b   ; ##
108B: 00      	        DB 00000000b   ; 
              	        ;203
108C: 06      	        DB 00000110b   ;    ##
108D: 04      	        DB 00000100b   ;    #
108E: 36      	        DB 00110110b   ; ## ##
108F: 1C      	        DB 00011100b   ;  ###
1090: 30      	        DB 00110000b   ; ##
1091: 00      	        DB 00000000b   ; 
              	        ;204
1092: 32      	        DB 00110010b   ; ##  #
1093: 1C      	        DB 00011100b   ;  ###
1094: 0C      	        DB 00001100b   ;   ##
1095: 16      	        DB 00010110b   ;  # ##
1096: 22      	        DB 00100010b   ; #   #
1097: 00      	        DB 00000000b   ; 
              	        ;205
1098: 00      	        DB 00000000b   ; 
1099: 14      	        DB 00010100b   ;  # #
109A: 22      	        DB 00100010b   ; #   #
109B: 2A      	        DB 00101010b   ; # # #
109C: 1C      	        DB 00011100b   ;  ###
109D: 00      	        DB 00000000b   ; 
              	        ;206
109E: 3E      	        DB 00111110b   ; #####
109F: 12      	        DB 00010010b   ;  #  #
10A0: 08      	        DB 00001000b   ;   #
10A1: 12      	        DB 00010010b   ;  #  #
10A2: 3E      	        DB 00111110b   ; #####
10A3: 00      	        DB 00000000b   ; 
              	        ;207
10A4: 1C      	        DB 00011100b   ;  ###
10A5: 22      	        DB 00100010b   ; #   #
10A6: 22      	        DB 00100010b   ; #   #
10A7: 14      	        DB 00010100b   ;  # #
10A8: 36      	        DB 00110110b   ; ## ##
10A9: 00      	        DB 00000000b   ; 
              	        ;208
10AA: 1C      	        DB 00011100b   ;  ###
10AB: 1C      	        DB 00011100b   ;  ###
10AC: 0A      	        DB 00001010b   ;   # #
10AD: 1C      	        DB 00011100b   ;  ###
10AE: 28      	        DB 00101000b   ; # #
10AF: 08      	        DB 00001000b   ;   #
              	        ;209
10B0: 1C      	        DB 00011100b   ;  ###
10B1: 1C      	        DB 00011100b   ;  ###
10B2: 28      	        DB 00101000b   ; # #
10B3: 1C      	        DB 00011100b   ;  ###
10B4: 0A      	        DB 00001010b   ;   # #
10B5: 08      	        DB 00001000b   ;   #
              	        ;210
10B6: 1C      	        DB 00011100b   ;  ###
10B7: 1C      	        DB 00011100b   ;  ###
10B8: 2A      	        DB 00101010b   ; # # #
10B9: 1C      	        DB 00011100b   ;  ###
10BA: 08      	        DB 00001000b   ;   # 
10BB: 08      	        DB 00001000b   ;   #
              	        ;211
10BC: 1C      	        DB 00011100b   ;  ###
10BD: 1C      	        DB 00011100b   ;  ###
10BE: 08      	        DB 00001000b   ;   # 
10BF: 1C      	        DB 00011100b   ;  ###
10C0: 2A      	        DB 00101010b   ; # # #
10C1: 08      	        DB 00001000b   ;   #
              	        ;212
10C2: 14      	        DB 00010100b   ;  # # 
10C3: 00      	        DB 00000000b   ; 
10C4: 14      	        DB 00010100b   ;  # # 
10C5: 14      	        DB 00010100b   ;  # # 
10C6: 1C      	        DB 00011100b   ;  ###
10C7: 00      	        DB 00000000b   ; 
              	        ;213
10C8: 14      	        DB 00010100b   ;  # # 
10C9: 00      	        DB 00000000b   ; 
10CA: 1C      	        DB 00011100b   ;  ###
10CB: 14      	        DB 00010100b   ;  # # 
10CC: 1C      	        DB 00011100b   ;  ###
10CD: 00      	        DB 00000000b   ; 
              	        ;214
10CE: 14      	        DB 00010100b   ;  # # 
10CF: 00      	        DB 00000000b   ; 
10D0: 1C      	        DB 00011100b   ;  ###
10D1: 14      	        DB 00010100b   ;  # # 
10D2: 1E      	        DB 00011110b   ;  ####
10D3: 00      	        DB 00000000b   ; 
              	        ;215
10D4: 14      	        DB 00010100b   ;  # # 
10D5: 00      	        DB 00000000b   ; 
10D6: 1C      	        DB 00011100b   ;  ###
10D7: 14      	        DB 00010100b   ;  # # 
10D8: 14      	        DB 00010100b   ;  # # 
10D9: 00      	        DB 00000000b   ; 
              	        ;216
10DA: 28      	        DB 00101000b   ; # #
10DB: 2C      	        DB 00101100b   ; # ## 
10DC: 3E      	        DB 00111110b   ; ##### 
10DD: 0C      	        DB 00001100b   ;   ## 
10DE: 08      	        DB 00001000b   ;   #
10DF: 00      	        DB 00000000b   ; 
              	        ;217
10E0: 0A      	        DB 00001010b   ;   # #
10E1: 1A      	        DB 00011010b   ;  ## #
10E2: 3E      	        DB 00111110b   ; #####
10E3: 18      	        DB 00011000b   ;  ## 
10E4: 08      	        DB 00001000b   ;   #
10E5: 00      	        DB 00000000b   ; 
              	        ;218
10E6: 08      	        DB 00001000b   ;   #
10E7: 1C      	        DB 00011100b   ;  ###
10E8: 08      	        DB 00001000b   ;   #
10E9: 00      	        DB 00000000b   ;  
10EA: 1C      	        DB 00011100b   ;  ###
10EB: 00      	        DB 00000000b   ;
              	        ;219
10EC: 08      	        DB 00001000b   ;   #
10ED: 00      	        DB 00000000b   ; 
10EE: 3E      	        DB 00111110b   ; #####
10EF: 00      	        DB 00000000b   ;
10F0: 08      	        DB 00001000b   ;   #
10F1: 00      	        DB 00000000b   ;
              	        ;220
10F2: 04      	        DB 00000100b   ;    #
10F3: 08      	        DB 00001000b   ;   # 
10F4: 10      	        DB 00010000b   ;  #
10F5: 08      	        DB 00001000b   ;   # 
10F6: 1C      	        DB 00011100b   ;  ###
10F7: 00      	        DB 00000000b   ; 
              	        ;221
10F8: 10      	        DB 00010000b   ;  #
10F9: 08      	        DB 00001000b   ;   # 
10FA: 04      	        DB 00000100b   ;    #
10FB: 08      	        DB 00001000b   ;   # 
10FC: 1C      	        DB 00011100b   ;  ###
10FD: 00      	        DB 00000000b   ; 
              	        ;222
10FE: 1C      	        DB 00011100b   ;  ###
10FF: 00      	        DB 00000000b   ; 
1100: 1C      	        DB 00011100b   ;  ###
1101: 00      	        DB 00000000b   ; 
1102: 1C      	        DB 00011100b   ;  ###
1103: 00      	        DB 00000000b   ; 
              	        ;223
1104: 06      	        DB 00000110b   ;    ## 
1105: 04      	        DB 00000100b   ;    # 
1106: 34      	        DB 00110100b   ; ## #
1107: 14      	        DB 00010100b   ;  # # 
1108: 08      	        DB 00001000b   ;   # 
1109: 00      	        DB 00000000b   ; 
              	        ;224
110A: 1E      	        DB 00011110b   ;  #### 
110B: 0E      	        DB 00001110b   ;   ### 
110C: 0E      	        DB 00001110b   ;   ### 
110D: 12      	        DB 00010010b   ;  #  #
110E: 20      	        DB 00100000b   ; # 
110F: 00      	        DB 00000000b   ; 
              	        ;225
1110: 20      	        DB 00100000b   ; #
1111: 12      	        DB 00010010b   ;  #  #
1112: 0E      	        DB 00001110b   ;   ###
1113: 0E      	        DB 00001110b   ;   ###
1114: 1E      	        DB 00011110b   ;  ####
1115: 00      	        DB 00000000b   ; 
              	        ;226
1116: 02      	        DB 00000010b   ;      #
1117: 24      	        DB 00100100b   ;  #  #
1118: 38      	        DB 00111000b   ;  ###
1119: 38      	        DB 00111000b   ;  ###
111A: 3C      	        DB 00111100b   ;  #### 
111B: 00      	        DB 00000000b   ; 
              	        ;227
111C: 3C      	        DB 00111100b   ; ####
111D: 38      	        DB 00111000b   ; ###
111E: 38      	        DB 00111000b   ; ###
111F: 24      	        DB 00100100b   ; #  # 
1120: 02      	        DB 00000010b   ;     #
1121: 00      	        DB 00000000b   ; 
              	        ;228
1122: 3E      	        DB 00111110b   ; #####
1123: 22      	        DB 00100010b   ; #   #
1124: 22      	        DB 00100010b   ; #   #
1125: 22      	        DB 00100010b   ; #   #
1126: 3E      	        DB 00111110b   ; #####
1127: 00      	        DB 00000000b   ; 
              	        ;229
1128: 3E      	        DB 00111110b   ; #####
1129: 26      	        DB 00100110b   ; #  ##
112A: 2A      	        DB 00101010b   ; # # #
112B: 32      	        DB 00110010b   ; ##  #
112C: 3E      	        DB 00111110b   ; #####
112D: 00      	        DB 00000000b   ; 
              	        ;230
112E: 08      	        DB 00001000b   ;   # 
112F: 12      	        DB 00010010b   ;  #  #
1130: 24      	        DB 00100100b   ; #  #
1131: 12      	        DB 00010010b   ;  #  #
1132: 08      	        DB 00001000b   ;   # 
1133: 00      	        DB 00000000b   ; 
              	        ;231
1134: 08      	        DB 00001000b   ;   # 
1135: 24      	        DB 00100100b   ; #  #
1136: 12      	        DB 00010010b   ;  #  #
1137: 24      	        DB 00100100b   ; #  #
1138: 08      	        DB 00001000b   ;   # 
1139: 00      	        DB 00000000b   ; 
              	        ;232 TEC-1G
113A: 1D      	        DB 00011101b   ;  ### #
113B: 08      	        DB 00001000b   ;   #
113C: 09      	        DB 00001001b   ;   #  #
113D: 08      	        DB 00001000b   ;   #
113E: 09      	        DB 00001001b   ;   #  #
113F: 00      	        DB 00000000b   ; 
              	        ;233 TEC-1G
1140: 37      	        DB 00110111b   ; ## ###
1141: 04      	        DB 00000100b   ;    #
1142: 34      	        DB 00110100b   ; ## #
1143: 04      	        DB 00000100b   ;    #
1144: 37      	        DB 00110111b   ; ## ###
1145: 00      	        DB 00000000b   ; 
              	        ;234 TEC-1G
1146: 00      	        DB 00000000b   ; 
1147: 01      	        DB 00000001b   ;      #
1148: 1C      	        DB 00011100b   ;  ###
1149: 00      	        DB 00000000b   ; 
114A: 00      	        DB 00000000b   ; 
114B: 00      	        DB 00000000b   ; 
              	        ;235 TEC-1G
114C: 2E      	        DB 00101110b   ; # ###
114D: 28      	        DB 00101000b   ; # #
114E: 2A      	        DB 00101010b   ; # # #
114F: 2A      	        DB 00101010b   ; # # #
1150: 2E      	        DB 00101110b   ; # ###
1151: 00      	        DB 00000000b   ; 
              	        ;236 Z80
1152: 1D      	        DB 00011101b   ;  ### #
1153: 05      	        DB 00000101b   ;    # #
1154: 09      	        DB 00001001b   ;   #  #
1155: 11      	        DB 00010001b   ;  #   #
1156: 1D      	        DB 00011101b   ;  ### #
1157: 00      	        DB 00000000b   ; 
              	        ;237 Z80
1158: 37      	        DB 00110111b   ; ## ###
1159: 15      	        DB 00010101b   ;  # # #
115A: 35      	        DB 00110101b   ; ## # #
115B: 15      	        DB 00010101b   ;  # # #
115C: 37      	        DB 00110111b   ; ## ###
115D: 00      	        DB 00000000b   ; 
              	        ;238 CPU
115E: 1D      	        DB 00011101b   ;  ### #
115F: 11      	        DB 00010001b   ;  #   #
1160: 11      	        DB 00010001b   ;  #   #
1161: 11      	        DB 00010001b   ;  #   #
1162: 1D      	        DB 00011101b   ;  ### #
1163: 00      	        DB 00000000b   ; 
              	        ;239 CPU
1164: 35      	        DB 00110101b   ; ## # #
1165: 15      	        DB 00010101b   ;  # # #
1166: 35      	        DB 00110101b   ; ## # #
1167: 05      	        DB 00000101b   ;    # #
1168: 07      	        DB 00000111b   ;    ###
1169: 00      	        DB 00000000b   ; 
              	        ;240
116A: 00      	        DB 00000000b   ; 
116B: 00      	        DB 00000000b   ; 
116C: 00      	        DB 00000000b   ; 
116D: 00      	        DB 00000000b   ; 
116E: 00      	        DB 00000000b   ; 
116F: 00      	        DB 00000000b   ; 
              	        ;241
1170: 00      	        DB 00000000b   ; 
1171: 00      	        DB 00000000b   ; 
1172: 00      	        DB 00000000b   ; 
1173: 00      	        DB 00000000b   ; 
1174: 00      	        DB 00000000b   ; 
1175: 00      	        DB 00000000b   ; 
              	        ;242
1176: 00      	        DB 00000000b   ; 
1177: 00      	        DB 00000000b   ; 
1178: 00      	        DB 00000000b   ; 
1179: 00      	        DB 00000000b   ; 
117A: 00      	        DB 00000000b   ; 
117B: 00      	        DB 00000000b   ; 
              	        ;243
117C: 00      	        DB 00000000b   ; 
117D: 00      	        DB 00000000b   ; 
117E: 00      	        DB 00000000b   ; 
117F: 00      	        DB 00000000b   ; 
1180: 00      	        DB 00000000b   ; 
1181: 00      	        DB 00000000b   ; 
              	        ;244
1182: 00      	        DB 00000000b   ; 
1183: 00      	        DB 00000000b   ; 
1184: 00      	        DB 00000000b   ; 
1185: 00      	        DB 00000000b   ; 
1186: 00      	        DB 00000000b   ; 
1187: 00      	        DB 00000000b   ; 
              	        ;245
1188: 00      	        DB 00000000b   ; 
1189: 00      	        DB 00000000b   ; 
118A: 00      	        DB 00000000b   ; 
118B: 00      	        DB 00000000b   ; 
118C: 00      	        DB 00000000b   ; 
118D: 00      	        DB 00000000b   ; 
              	        ;246
118E: 00      	        DB 00000000b   ; 
118F: 00      	        DB 00000000b   ; 
1190: 00      	        DB 00000000b   ; 
1191: 00      	        DB 00000000b   ; 
1192: 00      	        DB 00000000b   ; 
1193: 00      	        DB 00000000b   ; 
              	        ;247
1194: 00      	        DB 00000000b   ; 
1195: 00      	        DB 00000000b   ; 
1196: 00      	        DB 00000000b   ; 
1197: 00      	        DB 00000000b   ; 
1198: 00      	        DB 00000000b   ; 
1199: 00      	        DB 00000000b   ; 
              	        ;248
119A: 00      	        DB 00000000b   ; 
119B: 00      	        DB 00000000b   ; 
119C: 00      	        DB 00000000b   ; 
119D: 00      	        DB 00000000b   ; 
119E: 00      	        DB 00000000b   ; 
119F: 00      	        DB 00000000b   ; 
              	        ;249
11A0: 00      	        DB 00000000b   ; 
11A1: 00      	        DB 00000000b   ; 
11A2: 00      	        DB 00000000b   ; 
11A3: 00      	        DB 00000000b   ; 
11A4: 00      	        DB 00000000b   ; 
11A5: 00      	        DB 00000000b   ; 
              	        ;250
11A6: 00      	        DB 00000000b   ; 
11A7: 00      	        DB 00000000b   ; 
11A8: 00      	        DB 00000000b   ; 
11A9: 00      	        DB 00000000b   ; 
11AA: 00      	        DB 00000000b   ; 
11AB: 00      	        DB 00000000b   ; 
              	        ;251
11AC: 00      	        DB 00000000b   ; 
11AD: 00      	        DB 00000000b   ; 
11AE: 00      	        DB 00000000b   ; 
11AF: 00      	        DB 00000000b   ; 
11B0: 00      	        DB 00000000b   ; 
11B1: 00      	        DB 00000000b   ; 
              	        ;252
11B2: 00      	        DB 00000000b   ; 
11B3: 00      	        DB 00000000b   ; 
11B4: 00      	        DB 00000000b   ; 
11B5: 00      	        DB 00000000b   ; 
11B6: 00      	        DB 00000000b   ; 
11B7: 00      	        DB 00000000b   ; 
              	        ;253
11B8: 00      	        DB 00000000b   ; 
11B9: 00      	        DB 00000000b   ; 
11BA: 00      	        DB 00000000b   ; 
11BB: 00      	        DB 00000000b   ; 
11BC: 00      	        DB 00000000b   ; 
11BD: 00      	        DB 00000000b   ; 
              	        ;254
11BE: 00      	        DB 00000000b   ; 
11BF: 00      	        DB 00000000b   ; 
11C0: 00      	        DB 00000000b   ; 
11C1: 00      	        DB 00000000b   ; 
11C2: 00      	        DB 00000000b   ; 
11C3: 00      	        DB 00000000b   ; 
              	        ;255
11C4: 00      	        DB 00000000b   ; 
11C5: 00      	        DB 00000000b   ; 
11C6: 00      	        DB 00000000b   ; 
11C7: 00      	        DB 00000000b   ; 
11C8: 00      	        DB 00000000b   ; 
11C9: 00      	        DB 00000000b   ; 
              	        ;256
11CA: 00      	        DB 00000000b   ; 
11CB: 00      	        DB 00000000b   ; 
11CC: 00      	        DB 00000000b   ; 
11CD: 00      	        DB 00000000b   ; 
11CE: 00      	        DB 00000000b   ; 
11CF: 01      	        DB 00000001b   ;      #
              	        
              	
              	;    JP INIT_LCD             ;Initalise the LCD
              	;    JP CLEAR_GBUF           ;Clear the Graphics Buffer
              	;    JP CLEAR_GR_LCD         ;Clear the Graphics LCD Screen
              	;    JP CLEAR_TXT_LCD        ;Clear the Text LCD Screen
              	;    JP SET_GR_MODE          ;Set Graphics Mode
              	;    JP SET_TXT_MODE         ;Set Text Mode
              	;    JP DRAW_BOX             ;Draw a rectangle between two points
              	;    JP DRAW_LINE            ;Draw a line between two points
              	;    JP DRAW_CIRCLE          ;Draw a circle from Mid X,Y to Radius
              	;    JP DRAW_PIXEL           ;Draw one pixel at X,Y
              	;    JP FILL_BOX             ;Draw a filled rectangle between two points
              	;    JP FILL_CIRCLE          ;Draw a filled circle from Mid X,Y to Radius
              	;    JP PLOT_TO_LCD          ;Display the Graphics Buffer to the LCD Screen
              	;    JP PRINT_STRING         ;Print Text on the screen in a given row
              	;    JP PRINT_CHARS          ;Print Characters on the screen in a given row and column
              	;    JP DELAY_US             ;Microsecond delay for LCD updates
              	;    JP DELAY_MS             ;Millisecond delay for LCD updates
              	;    JP SET_BUF_CLEAR        ;Clear the Graphics buffer on after Plotting to the screen
              	;    JP SET_BUF_NO_CLEAR     ;Retain the Graphics buffer on after Plotting to the screen
              	;    JP CLEAR_PIXEL          ;Remove a Pixel at X,Y
              	;    JP FLIP_PIXEL           ;Flip a Pixel On/Off at X,Y
              	;    JP LCD_INST             ;Send a parallel or serial instruction to LCD
              	;    JP LCD_DATA             ;Send a parallel or serial datum to LCD
              	;    JP SER_SYNC             ;Send serial synchronise byte to LCD
              	;    JP DRAW_GRAPHIC         ;Draw an ASCII charcter or Sprite to the LCD
              	;    JP INV_GRAPHIC          ;Inverse graphics printing
              	;    JP INIT_TERMINAL        ;Initialize the LCD for terminal emulation
              	;    JP SEND_CHAR_TO_GLCD    ;Send an ASCII Character to the LCD
              	;    JP SEND_STRING_TO_GLCD  ;Send an ASCII String to the LCD
              	;    JP SEND_A_TO_GLCD       ;Send register A to the LCD
              	;    JP SEND_HL_TO_GLCD      ;Send register HL to the LCD
              	;    JP SET_CURSOR           ;Set the graphics cursor
              	;    JP GET_CURSOR           ;Get the current cursor
              	;    JP DISPLAY_CURSOR       ;Set Cursor on or off
              	#include "I2C.asm"
              	; **********************************************************************
              	; I2C support functions
              	
              	; I2C bus open device
              	;   On entry: A = Device address (bit zero is read flag)
              	;             SCL = unknown, SDA = unknown
              	;   On exit:  If successfully A = 0 and Z flagged
              	;             If unsuccessfully A = Error and NZ flagged
              	;             BC DE HL IX IY preserved
11D0: F5      	I2C_Open:   PUSH AF
11D1: CD4412  	            CALL I2C_Start      ;Output start condition
11D4: F1      	            POP  AF
11D5: 1803    	            JR   I2C_Write      ;Write data byte
              	
              	
              	; I2C bus close device
              	;   On entry: SCL = unknown, SDA = unknown
              	;   On exit:  If successfully A=0 and Z flagged
              	;             If unsuccessfully A=Error and NZ flagged
              	;             SCL = hi, SDA = hi
              	;             BC DE HL IX IY preserved
11D7: C34F12  	I2C_Close:  JP   I2C_Stop       ;Output stop condition
              	
              	
              	; **********************************************************************
              	; **********************************************************************
              	; I2C bus master driver
              	; **********************************************************************
              	; **********************************************************************
              	
              	; Functions provided are:
              	;     I2C_Start
              	;     I2C_Stop
              	;     I2C_Read
              	;     I2C_Write
              	;
              	; This code has delays between all I/O operations to ensure it works
              	; with the slowest I2C devices
              	;
              	; I2C transfer sequence
              	;   +-------+  +---------+  +---------+     +---------+  +-------+
              	;   | Start |  | Address |  | Data    | ... | Data    |  | Stop  |
              	;   |       |  | frame   |  | frame 1 |     | frame N |  |       |
              	;   +-------+  +---------+  +---------+     +---------+  +-------+
              	;
              	;
              	; Start condition                     Stop condition
              	; Output by master device             Output by master device
              	;       ----+                                      +----
              	; SDA       |                         SDA          |
              	;           +-------                        -------+
              	;       -------+                                +-------
              	; SCL          |                      SCL       |
              	;              +----                        ----+
              	;
              	;
              	; Address frame
              	; Clock and data output from master device
              	; Receiving device outputs acknowledge 
              	;        +-----+-----+-----+-----+-----+-----+-----+-----+     +---+
              	; SDA    | A 7 | A 6 | A 5 | A 4 | A 3 | A 2 | A 1 | R/W | ACK |   |
              	;     ---+-----+-----+-----+-----+-----+-----+-----+-----+-----+   +---
              	;          +-+   +-+   +-+   +-+   +-+   +-+   +-+   +-+   +-+
              	; SCL      | |   | |   | |   | |   | |   | |   | |   | |   | |
              	;     -----+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ +---------
              	;
              	;
              	; Data frame 
              	; Clock output by master device
              	; Data output by transmitting device
              	; Receiving device outputs acknowledge 
              	;        +-----+-----+-----+-----+-----+-----+-----+-----+     +---+
              	; SDA    | D 7 | D 6 | D 5 | D 4 | D 3 | D 2 | D 1 | D 0 | ACK |   |
              	;     ---+-----+-----+-----+-----+-----+-----+-----+-----+-----+   +---
              	;          +-+   +-+   +-+   +-+   +-+   +-+   +-+   +-+   +-+
              	; SCL      | |   | |   | |   | |   | |   | |   | |   | |   | |
              	;     -----+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ +---------
              	;
              	
              	
              	; **********************************************************************
              	; I2C constants
              	
              	
              	; I2C bus master interface
              	; The default device option is for SC126 or compatible
              	
0021:         	I2C_PORT:   .EQU $21           ;Host I2C port address
0007:         	I2C_SDA_WR: .EQU 7              ;Host I2C write SDA bit number
0007:         	I2C_SDA_RD: .EQU 7              ;Host I2C read SDA bit number
0000:         	I2C_SCL_WR: .EQU 0              ;Host I2C write SCL bit number
0000:         	I2C_SCL_RD: .EQU 0              ;Host I2C read SCL bit number 
0081:         	I2C_QUIES:  .EQU 0b10000001     ;Host I2C output port quiescent value
              	
              	
              	; I2C support constants
0000:         	ERR_NONE:   .EQU 0              ;Error = None
0001:         	ERR_JAM:    .EQU 1              ;Error = Bus jammed [not used]
0002:         	ERR_NOACK:  .EQU 2              ;Error = No ackonowledge
0003:         	ERR_TOUT:   .EQU 3              ;Error = Timeout
              	
              	
              	; **********************************************************************
              	; Hardware dependent I2C bus functions
              	
              	
              	; I2C bus transmit frame (address or data)
              	;   On entry: A = Data byte, or
              	;                 Address byte (bit zero is read flag)
              	;             SCL = low, SDA = low
              	;   On exit:  If successful A=0 and Z flagged
              	;                SCL = lo, SDA = lo
              	;             If unsuccessful A=Error and NZ flagged
              	;                SCL = high, SDA = high, I2C closed
              	;             BC DE HL IX IY preserved
11DA: C5      	I2C_Write:  PUSH BC             ;Preserve registers
11DB: D5      	            PUSH DE
11DC: 57      	            LD   D,A            ;Store byte to be written
11DD: 0608    	            LD   B,8            ;8 data bits, bit 7 first
11DF: CB12    	I2C_WriteWr_Loop:   RL   D              ;Test M.S.Bit
11E1: 3805    	            JR   C,I2C_WriteBit_Hi      ;High, so skip
11E3: CD7612  	            CALL I2C_SDA_LO     ;SDA low   (SCL lo, SDA = data bit)
11E6: 1803    	            JR   I2C_WriteBit_Clk
11E8: CD6F12  	I2C_WriteBit_Hi:    CALL I2C_SDA_HI     ;SDA high  (SCL lo, SDA = data bit)
11EB: CD6112  	I2C_WriteBit_Clk:   CALL I2C_SCL_HI     ;SCL high  (SCL hi, SDA = data bit)
11EE: CD6812  	            CALL I2C_SCL_LO     ;SCL low   (SCL lo, SDA = data bit)
11F1: 10EC    	            DJNZ I2C_WriteWr_Loop
              	; Test for acknowledge from slave (receiver)
              	; On arriving here, SCL = lo, SDA = data bit
11F3: CD6F12  	            CALL I2C_SDA_HI     ;SDA high  (SCL lo, SDA hi/ack)
11F6: CD6112  	            CALL I2C_SCL_HI     ;SCL high  (SCL hi, SDA hi/ack)
11F9: CD8712  	            CALL I2C_RdPort     ;Read SDA input
11FC: 47      	            LD   B,A
11FD: CD6812  	            CALL I2C_SCL_LO     ;SCL low   (SCL lo, SDA = hi)
1200: CB78    	            BIT  I2C_SDA_RD,B
1202: 2004    	            JR   NZ,I2C_WriteNoAck      ;Skip if no acknowledge
1204: D1      	            POP  DE             ;Restore registers
1205: C1      	            POP  BC
1206: AF      	            XOR  A              ;Return success A=0 and Z flagged
1207: C9      	            RET
              	; I2C STOP required as no acknowledge
              	; On arriving here, SCL = lo, SDA = hi
1208: CD7612  	I2C_WriteNoAck:     CALL I2C_SDA_LO     ;SDA low   (SCL lo, SDA = lo)
120B: CD6112  	            CALL I2C_SCL_HI     ;SCL high  (SCL hi, SDA = lo)
120E: CD6F12  	            CALL I2C_SDA_HI     ;SDA low   (SCL hi, SDA = hi)
1211: D1      	            POP  DE             ;Restore registers
1212: C1      	            POP  BC
1213: 3E02    	            LD   A,ERR_NOACK    ;Return error = No Acknowledge
1215: B7      	            OR   A              ;  and NZ flagged
1216: C9      	            RET
              	
              	
              	; I2C bus receive frame (data)
              	;   On entry: A = Acknowledge flag
              	;               If A != 0 the read is acknowledged
              	;             SCL low, SDA low
              	;   On exit:  If successful A = data byte and Z flagged
              	;               SCL = low, SDA = low
              	;             If unsuccessul* A = Error and NZ flagged
              	;               SCL = low, SDA = low
              	;             BC DE HL IX IY preserved
              	; *This function always returns successful
1217: C5      	I2C_Read:   PUSH BC             ;Preserve registers
1218: D5      	            PUSH DE
1219: 5F      	            LD   E,A            ;Store acknowledge flag
121A: 0608    	            LD   B,8            ;8 data bits, 7 first
121C: CD6F12  	            CALL I2C_SDA_HI     ;SDA high  (SCL lo, SDA hi/input)
121F: CD6112  	I2C_ReadRd_Loop:   CALL I2C_SCL_HI     ;SCL high  (SCL hi, SDA hi/input)
1222: CD8712  	            CALL I2C_RdPort     ;Read SDA input bit
1225: 37      	            SCF                 ;Set carry flag
1226: CB7F    	            BIT  I2C_SDA_RD,A   ;SDA input high?
1228: 2001    	            JR   NZ, I2C_ReadRotate     ;Yes, skip with carry flag set
122A: 3F      	            CCF                 ;Clear carry flag
122B: CB12    	I2C_ReadRotate:    RL   D              ;Rotate result into D
122D: CD6812  	            CALL I2C_SCL_LO     ;SCL low   (SCL lo, SDA hi/input)
1230: 10ED    	            DJNZ  I2C_ReadRd_Loop       ;Repeat for all 8 bits
              	; Acknowledge input byte
              	; On arriving here, SCL = lo, SDA = hi/input
1232: 7B      	            LD   A,E            ;Get acknowledge flag
1233: B7      	            OR   A              ;A = 0? (indicates no acknowledge)
1234: 2803    	            JR   Z, I2C_ReadNoAck       ;Yes, so skip acknowledge
1236: CD7612  	            CALL I2C_SDA_LO     ;SDA low   (SCL lo, SDA lo)
1239: CD6112  	I2C_ReadNoAck:     CALL I2C_SCL_HI     ;SCL hi    (SCL hi, SDA lo)
123C: CD6812  	            CALL I2C_SCL_LO     ;SCL low   (SCL lo, SDA lo)
123F: 7A      	            LD   A,D            ;Get data byte received
1240: D1      	            POP  DE             ;Restore registers
1241: C1      	            POP  BC
1242: BF      	            CP   A              ;Return success Z flagged
1243: C9      	            RET
              	
              	
              	; I2C bus start
              	;   On entry: SCL = unknown, SDA = unknown
              	;   On exit:  SCL = low, SDA = low
              	;             A = 0 and Z flagged as we always succeed
              	;             BC DE HL IX IY preserved
              	; First ensure SDA and SCL are high
1244: CD5D12  	I2C_Start:  CALL I2C_INIT       ;Initialise I2C control port
              	;           CALL I2C_SCL_HI     ;SCL high  (SCL hi, SDA ??)
              	;           CALL I2C_SDA_HI     ;SDA high  (SCL hi, SDA hi)
              	; Generate I2C start condition
1247: CD7612  	            CALL I2C_SDA_LO     ;SDA low   (SCL hi, SDA lo)
124A: CD6812  	            CALL I2C_SCL_LO     ;SCL low   (SCL lo, SDA lo)
124D: AF      	            XOR  A              ;Return success A=0 and Z flagged
124E: C9      	            RET
              	
              	
              	; I2C bus stop 
              	;   On entry: SCL = unknown, SDA = unknown
              	;   On exit:  SCL = high, SDA = high
              	;             A = 0 and Z flagged as we always succeed
              	;             BC DE HL IX IY preserved
              	; First ensure SDA and SCL are low
124F: CD7612  	I2C_Stop:   CALL I2C_SDA_LO     ;SDA low   (SCL hi, SDA lo)
1252: CD6812  	            CALL I2C_SCL_LO     ;SCL low   (SCL lo, SDA lo)
              	; Generate stop condition
1255: CD6112  	            CALL I2C_SCL_HI     ;SCL high  (SCL hi, SDA lo)
1258: CD6F12  	            CALL I2C_SDA_HI     ;SDA low   (SCL hi, SDA hi)
125B: AF      	            XOR  A              ;Return success A=0 and Z flagged
125C: C9      	            RET
              	
              	
              	; **********************************************************************
              	; I2C bus simple I/O functions
              	;   On entry: No parameters required
              	;   On exit:  BC DE HL IX IY preserved
              	
125D: 3E81    	I2C_INIT:   LD   A,I2C_QUIES    ;I2C control port quiescent value
125F: 181A    	            JR   I2C_WrPort
              	
1261: 3A9DFB  	I2C_SCL_HI: LD   A,(I2C_RAMCPY)
1264: CBC7    	            SET  I2C_SCL_WR,A
1266: 1813    	            JR   I2C_WrPort
              	
1268: 3A9DFB  	I2C_SCL_LO: LD   A,(I2C_RAMCPY)
126B: CB87    	            RES  I2C_SCL_WR,A
126D: 180C    	            JR   I2C_WrPort
              	
126F: 3A9DFB  	I2C_SDA_HI: LD   A,(I2C_RAMCPY)
1272: CBFF    	            SET  I2C_SDA_WR,A
1274: 1805    	            JR   I2C_WrPort
              	
1276: 3A9DFB  	I2C_SDA_LO: LD   A,(I2C_RAMCPY)
1279: CBBF    	            RES  I2C_SDA_WR,A
              	
127B: C5      	I2C_WrPort: PUSH BC             ;Preserve registers
127C: 0600    	            LD   B,0            ;Set up BC for 16-bit
127E: 0E21    	            LD   C,I2C_PORT     ;  I/O address of I2C port
1280: ED79    	            OUT  (C),A          ;Write A to I2C I/O port
1282: 329DFB  	            LD   (I2C_RAMCPY),A ;Write A to RAM copy
1285: C1      	            POP  BC             ;Restore registers
1286: C9      	            RET
              	
1287: C5      	I2C_RdPort: PUSH BC             ;Preserve registers
1288: 0600    	            LD   B,0            ;Set up BC for 16-bit
128A: 0E21    	            LD   C,I2C_PORT     ;  I/O address of I2C port
128C: ED78    	            IN   A,(C)          ;Read A from I/O port
128E: C1      	            POP  BC             ;Restore registers
128F: C9      	            RET
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	;==============================================================================
              	;==============================================================================
              	;==============================================================================
              	;===================       FUNCTIONS    =======================================
              	;==============================================================================
              	;==============================================================================
              	
              	
              	
              	
              	; **********************************************************************
              	; List devices found on the I2C bus
              	;
              	; Test each I2C device address and reports any that acknowledge
              	
1290: 21F013  	I2CLIST:    LD   HL, I2C_LIST_MSG        ;Address of message string
1293: AF      	            XOR A ; A = character to stop printing.
1294: CD3A06  	            CALL LCD_PRINT_STRING         ;Output string
1297: 1600    	            LD   D,0            ;First I2C device address to test
1299: D5      	LISTLOOP:      PUSH DE             ;Preserve DE
129A: 7A      	            LD   A,D            ;Get device address to be tested
129B: CDB612  	            CALL LISTTEST          ;Test if device is present
129E: D1      	            POP  DE             ;Restore DE
129F: 2009    	            JR   NZ,LISTNEXT       ;Skip if no acknowledge
12A1: 7A      	            LD   A,D            ;Get address of device tested
12A2: CD2A13  	            CALL HexOut         ;Output as two character hex 
12A5: 3E20    	            LD A, ' '; space
12A7: CD5606  	            CALL LCD_PRINT_A       ;Output space character
12AA: 14      	LISTNEXT:      INC  D              ;Get next write address
12AB: 14      	            INC  D
12AC: 7A      	            LD   A,D            ;Address of next device to test
12AD: B7      	            OR   A              ;Have we tested all addresses?
12AE: 20E9    	            JR   NZ,LISTLOOP       ;No, so loop again
12B0: 3E0D    	            LD A, CR; enter
12B2: CD5606  	            CALL LCD_PRINT_A       ;Output space character
12B5: C9      	            RET
              	
              	; Test if device at I2C address A acknowledges
              	;   On entry: A = I2C device address (8-bit, bit 0 = lo for write)
              	;   On exit:  Z flagged if device acknowledges
              	;             NZ flagged if devices does not acknowledge
12B6: CDD011  	LISTTEST:      CALL I2C_Open       ;Open I2C device for write
12B9: C0      	            RET  NZ             ;Abort if failed to open
12BA: CDD711  	            CALL I2C_Close      ;Close I2C device 
12BD: AF      	            XOR  A              ;Return with Z flagged
12BE: C9      	            RET
              	
              	
              	
              	
              	; Copy a block from I2C memory to CPU memory
              	;   On entry: DE = First address in I2C memory
              	;             HL = First address in CPU memory
              	;             BC = Number of bytes to be copied
              	;             SCL = unknown, SDA = unknown
              	;   On exit:  If successfully A = 0 and Z flagged
              	;             If unsuccessfully A = Error and NZ flagged
              	;             IX IY preserved
12BF: C5      	I2C_MemRd:  PUSH BC
12C0: 011027  	            LD   BC,TIMEOUT     ;Timeout loop counter
12C3: 3EAE    	I2C_MemRdRepeat:    LD   A,I2CA_BLOCK   ;I2C address to write to
12C5: CDD011  	            CALL I2C_Open       ;Open for write
12C8: 280A    	            JR   Z,I2C_MemRdReady       ;If open okay then skip on
12CA: 0B      	            DEC  BC
12CB: 78      	            LD   A,B
12CC: B1      	            OR   C              ;Timeout?
12CD: 20F4    	            JR   NZ,I2C_MemRdRepeat     ;No, so go try again
12CF: C1      	            POP  BC
12D0: 3E03    	            LD   A,ERR_TOUT     ;Error code
12D2: B7      	            OR   A              ;Error, so NZ flagged
12D3: C9      	            RET                 ;Return with error
              	; Device opened okay
12D4: C1      	I2C_MemRdReady:     POP  BC             ;Restore byte counter
12D5: 7A      	            LD   A,D            ;Address (hi) in I2C memory
12D6: CDDA11  	            CALL I2C_Write      ;Write address
12D9: 7B      	            LD   A,E            ;Address (lo) in I2C memory
12DA: CDDA11  	            CALL I2C_Write      ;Write address
12DD: 3EAF    	            LD   A,I2CA_BLOCK+1 ;I2C device to be read from
12DF: CDD011  	            CALL I2C_Open       ;Open for read
12E2: C0      	            RET  NZ             ;Abort if error
12E3: 0B      	I2C_MemRdRead:      DEC  BC             ;Decrement byte counter
12E4: 78      	            LD   A,B
12E5: B1      	            OR   C              ;Last byte to be read?
12E6: CD1712  	            CALL I2C_Read       ;Read byte with no ack on last byte
12E9: 77      	            LD   (HL),A         ;Write byte in CPU memory
12EA: 23      	            INC  HL             ;Increment CPU memory pointer
12EB: 78      	            LD   A,B
12EC: B1      	            OR   C              ;Finished?
12ED: 20F4    	            JR   NZ,I2C_MemRdRead       ;No, so go read next byte
12EF: CD4F12  	            CALL I2C_Stop       ;Generate I2C stop
12F2: AF      	            XOR  A              ;Return with success (Z flagged)
12F3: C9      	            RET
              	
              	
              	; Copy a block from CPU memory to I2C memory
              	;   On entry: DE = First address in I2C memory
              	;             HL = First address in CPU memory
              	;             BC = Number of bytes to be copied
              	;             SCL = unknown, SDA = unknown
              	;   On exit:  If successfully A = 0 and Z flagged
              	;             If unsuccessfully A = Error and NZ flagged
              	;             IX IY preserved
              	; The 24LC64 requires blocks of data to be written in 64 byte (or less)
              	; pages.
12F4: C5      	I2C_MemWr:  PUSH BC
12F5: 011027  	            LD   BC,TIMEOUT     ;Timeout loop counter
12F8: 3EAE    	I2C_MemWrRepeat:    LD   A,I2CA_BLOCK   ;I2C address to write to
12FA: CDD011  	            CALL I2C_Open       ;Open for write
12FD: 280A    	            JR   Z,I2C_MemWrReady       ;If open okay then skip on
12FF: 0B      	            DEC  BC
1300: 78      	            LD   A,B
1301: B1      	            OR   C              ;Timeout?
1302: 20F4    	            JR   NZ,I2C_MemWrRepeat     ;No, so go try again
1304: C1      	            POP  BC
1305: 3E03    	            LD   A,ERR_TOUT     ;Error code
1307: B7      	            OR   A              ;Error, so NZ flagged
1308: C9      	            RET                 ;Return with error
              	; Device opened okay
1309: C1      	I2C_MemWrReady:     POP  BC             ;Restore byte counter
130A: 7A      	I2C_MemWrBlock:     LD   A,D            ;Address (hi) in I2C memory
130B: CDDA11  	            CALL I2C_Write      ;Write address
130E: 7B      	            LD   A,E            ;Address (lo) in I2C memory
130F: CDDA11  	            CALL I2C_Write      ;Write address
1312: 7E      	I2C_MemWrWrite:     LD   A,(HL)         ;Get data byte from CPU memory
1313: CDDA11  	            CALL I2C_Write      ;Read byte from I2C memory
1316: 23      	            INC  HL             ;Increment CPU memory pointer
1317: 13      	            INC  DE             ;Increment I2C memory pointer
1318: 0B      	            DEC  BC             ;Decrement byte counter
1319: 78      	            LD   A,B
131A: B1      	            OR   C              ;Finished?
131B: 2805    	            JR   Z,I2C_MemWrStore       ;Yes, so go store this page
131D: 7B      	            LD   A,E            ;Get address in I2C memory (lo byte)
131E: E63F    	            AND  63             ;64 byte page boundary?
1320: 20F0    	            JR   NZ,I2C_MemWrWrite      ;No, so go write another byte
1322: CD4F12  	I2C_MemWrStore:     CALL I2C_Stop       ;Generate I2C stop
1325: 78      	            LD   A,B
1326: B1      	            OR   C              ;Finished?
1327: 20CB    	            JR   NZ,I2C_MemWr   ;No, so go write some more
1329: C9      	            RET   
              	
              	
              	; Hex byte output to console
              	;   On entry: A = Byte to be output in hex
              	;   On exit:  BC DE HL IX IY preserved
132A: F5      	HexOut:     PUSH AF             ;Preserve byte to be output
132B: 1F      	            RRA                 ;Shift top nibble to
132C: 1F      	            RRA                 ;  botom four bits..
132D: 1F      	            RRA
132E: 1F      	            RRA
132F: E60F    	            AND  $0F           ;Mask off unwanted bits
1331: CD3713  	            CALL HexOutHex           ;Output hi nibble
1334: F1      	            POP  AF             ;Restore byte to be output
1335: E60F    	            AND  $0F           ;Mask off unwanted bits
              	; Output nibble as ascii character
1337: FE0A    	HexOutHex:       CP   $0A           ;Nibble > 10 ?
1339: 3802    	            JR   C,HexOutSkip        ;No, so skip
133B: C607    	            ADD  A,7            ;Yes, so add 7
133D: C630    	HexOutSkip:      ADD  A,$30         ;Add ASCII '0'
133F: CD5606  	            CALL LCD_PRINT_A       ;Write character
1342: C9      	            RET
              	
              	
              	
              	
              	
              	
1343:         	msg_help:
1343: 0D0A    			.BYTE	CR, LF
1345: 52202020			.TEXT	"R           - Reset"
1349: 20202020	
134D: 20202020	
1351: 2D205265	
1355: 736574  	
1358: 0D0A    			.BYTE	CR, LF
135A: 47202020			.TEXT	"G           - Goto nnnn"
135E: 20202020	
1362: 20202020	
1366: 2D20476F	
136A: 746F206E	
136E: 6E6E6E  	
1371: 0D0A    			.BYTE	CR, LF
1373: 3A6E6E6E			.TEXT	":nnnnnn...  - Load Intel-Hex file record"
1377: 6E6E6E2E	
137B: 2E2E2020	
137F: 2D204C6F	
1383: 61642049	
1387: 6E74656C	
138B: 2D486578	
138F: 2066696C	
1393: 65207265	
1397: 636F7264	
139B: 0D0A    			.BYTE	CR, LF
139D: 00      	        .BYTE   $00
              	
139E:         	CKSUMERR:
139E: 43686563			.BYTE	"Checksum error"
13A2: 6B73756D	
13A6: 20657272	
13AA: 6F72    	
13AC: 0D0A00  			.BYTE	CR, LF,$00
              	
13AF:         	LDETXT:
13AF: 4C6F6164			.TEXT	"Load complete."
13B3: 20636F6D	
13B7: 706C6574	
13BB: 652E    	
13BD: 0D0A00  			.BYTE	CR, LF, $00
              	
13C0: 0C0D0D0A	WELLCOME: .db CS, CR, CR, LF,"Z80Mini - Game core", CR, LF, 00H
13C4: 5A38304D	
13C8: 696E6920	
13CC: 2D204761	
13D0: 6D652063	
13D4: 6F72650D	
13D8: 0A00    	
              	
13DA: 5A38304D	WELLCOME_LCD: .db "Z80Mini - Game core", CR, CR, 00H
13DE: 696E6920	
13E2: 2D204761	
13E6: 6D652063	
13EA: 6F72650D	
13EE: 0D00    	
              	
13F0: 49324320	I2C_LIST_MSG:    .DB "I2C device found at:",CR,0
13F4: 64657669	
13F8: 63652066	
13FC: 6F756E64	
1400: 2061743A	
1404: 0D00    	
1406: 202D202D	MSG_EOF  .db " - - - FIM - - - ", 00H
140A: 202D2046	
140E: 494D202D	
1412: 202D202D	
1416: 2000    	
1418: 2E62696E	MSG_READFILE_EXE .db ".bin", 00H
141C: 00      	
141D: 2E696D67	MSG_READFILE_IMG .db ".img", 00H
1421: 00      	
1422: 2E747874	MSG_READFILE_TXT .db ".txt", 00H
1426: 00      	
              	
1427: 20537461	MENU_LCD_1:         .db " Start game", CR, 00H
142B: 72742067	
142F: 616D650D	
1433: 00      	
1434: 204C6F61	MENU_LCD_2:         .db " Load from card", CR, 00H
1438: 64206672	
143C: 6F6D2063	
1440: 6172640D	
1444: 00      	
1445: 20546573	MENU_LCD_3:         .db " Test keys", CR, 00H
1449: 74206B65	
144D: 79730D00	
1451: 20526573	MENU_LCD_4:         .db " Reset", CR, 00H
1455: 65740D00	
              	
1459: 50524553	MSG_START_GAME:     .db "PRESS START",0
145D: 53205354	
1461: 41525400	
1465: 47414D45	MSG_END_GAME:       .db "GAMEOVER",0
1469: 4F564552	
146D: 00      	
              	
146E: D204    	seed1       .dw 1234
1470: 3D22    	seed2       .dw 8765
              	
              	; RAM Locations - Move this section to RAM if necessary
              	;---------------
1472: FFFFFFFF	.ORG $F000              ;Start location
1476: FF...   	
              	        
0780:         	SBUF:   EQU 16 * $78     ;Scroll Buffer size  16 * 60 = 960 byte (10 lines), change to 20 lines (16 * 120($78))
F000: FFFFFFFF	        DS SBUF         ;Scroll Buffer space abover GBUF 
F004: FF...   	
F780: FFFFFFFF	GBUF:   DS 0400H        ;Graphics Buffer 16 * 64 = 1024 byte
F784: FF...   	
F780:         	TGBUF:  EQU GBUF        ;Terminal GBUF
FB80: 80F7    	VPORT:  DW GBUF         ;View port start address
FB82: 80F7    	TBUF:   DW GBUF         ;Top of Buffer pointer
FB84: 0000    	ENDPT:  DW 0000H        ;End Point for Line
FB86: 00      	SX:     DB 00H          ;Sign of X
FB87: 00      	SY:     DB 00H          ;Sign of Y
FB88: 0000    	DX:     DW 0000H        ;Change of X
FB8A: 0000    	DY:     DW 0000H        ;Change of Y
FB8C: 0000    	ERR:    DW 0000H        ;Error Rate
FB8E: 0000    	RAD:    DW 0000H        ;Radius
FB90: 00      	CLRBUF: DB 00H          ;Clear Buffer Flag on LCD Displaying
FB91: 0000    	CURSOR_XY: DW 0000H     ;Cursor Address X,Y
FB91:         	CURSOR_Y: EQU CURSOR_XY   ;Cursor Y
FB92:         	CURSOR_X: EQU CURSOR_XY+1 ;Cursor X
FB93: 00      	CURSOR_YS: DB 00H       ;Start Y row for new line
FB94: 00      	CURSOR_ON: DB 00H       ;Cursor on/off flag
FB95: 00      	INVERSE: DB 00H         ;Inverse Flag
FB96: 00      	PIXEL_X: DB 00H         ;Pixel X length
FB97: 0000    	INT_VEC: DW 0000H       ;Vetor de interrupção
FB99: 00      	GAMEPAD_KEY: DB 00H 	;Guarda tecla lida na interrupcao
FB9A: 00      	CURSOR_MENU:      .db $00	; Cursor menu
FB9B: 00      	DRAW_PIXEL_COLLISION .db $00 ; 0 - reset, 1 - set
FB9C: 00      	VAR_GAMEOVER    .db $00 ; Flag de gameover
FB9D: 00      	I2C_RAMCPY:         .DB    $00   ; 1 byte - RAM copy of output port
              	.end


; +++ segments +++

#CODE          = $0000 =     0,  size = $FB9E = 64414

; +++ global symbols +++

ABSHL           = $07EC =  2028          LCD.asm:450
BASE_COL        = $091B =  2331          LCD.asm:713
BCTOA           = $05C7 =  1479          Z80MiniGame.asm:929
BCTOA1          = $05D0 =  1488          Z80MiniGame.asm:934
BCTOA2          = $05DE =  1502          Z80MiniGame.asm:944
BDEL            = $0639 =  1593          LCD.asm:72
BKSP            = $0008 =     8          LCD.asm:64 (unused)
CHECK_COLLISION = $028F =   655          Z80MiniGame.asm:364
CHECK_GAMEOVER_WAIT_START = $0247 =   583          Z80MiniGame.asm:319
CIRCLE_LOOP     = $0812 =  2066          LCD.asm:500
CKSIOA          = $0576 =  1398          Z80MiniGame.asm:856
CKSUMERR        = $139E =  5022          Z80MiniGame.asm:1054
CLEAR_COLLISION = $028A =   650          Z80MiniGame.asm:356
CLEAR_GBUF      = $06B3 =  1715          LCD.asm:190
CLEAR_GR_LCD    = $06C3 =  1731          LCD.asm:201
CLEAR_PIXEL     = $08E8 =  2280          LCD.asm:658
CLEAR_TXT_LCD   = $06EA =  1770          LCD.asm:225
CLK_LOOP        = $0BB4 =  2996          LCD.asm:1299
CLRBUF          = $FB90 = 64400          Z80MiniGame.asm:1100
CLR_ROWS        = $06F9 =  1785          LCD.asm:232
CLR_X           = $06C8 =  1736          LCD.asm:204
CLR_Y           = $06DB =  1755          LCD.asm:214
CR              = $000D =    13          LCD.asm:68
CS              = $000C =    12          LCD.asm:67
CTRLC           = $0003 =     3          LCD.asm:73 (unused)
CURSOR          = $008F =   143          LCD.asm:70
CURSOR_MENU     = $FB9A = 64410          Z80MiniGame.asm:1110
CURSOR_ON       = $FB94 = 64404          Z80MiniGame.asm:1105
CURSOR_X        = $FB92 = 64402          Z80MiniGame.asm:1103
CURSOR_XY       = $FB91 = 64401          Z80MiniGame.asm:1101
CURSOR_Y        = $FB91 = 64401          Z80MiniGame.asm:1102
CURSOR_YS       = $FB93 = 64403          Z80MiniGame.asm:1104
DEC_CURSOR      = $0B04 =  2820          LCD.asm:1093
DEL             = $007F =   127          LCD.asm:71
DELAY_DE        = $05E3 =  1507          Z80MiniGame.asm:960
DELAY_MS        = $09A0 =  2464          LCD.asm:822
DELAY_US        = $099D =  2461          LCD.asm:820
DELETE_CHAR     = $067A =  1658          LCD.asm:143
DISPLAY_CURSOR  = $0B2E =  2862          LCD.asm:1124
DN              = $00B6 =   182          LCD.asm:63
DO_BS           = $09FB =  2555          LCD.asm:898 (unused)
DO_CHAR         = $0A20 =  2592          LCD.asm:915
DO_CR           = $09DD =  2525          LCD.asm:882
DO_FF           = $09F7 =  2551          LCD.asm:895
DO_SCRL_DN      = $09D5 =  2517          LCD.asm:877
DO_SCRL_UP      = $09CA =  2506          LCD.asm:871 (unused)
DO_TAB          = $0A09 =  2569          LCD.asm:905
DRAW_A          = $0A54 =  2644          LCD.asm:958
DRAW_BOX        = $0710 =  1808          LCD.asm:254
DRAW_CIRCLE     = $07F6 =  2038          LCD.asm:479
DRAW_CURSOR     = $0A26 =  2598          LCD.asm:918
DRAW_GRAPHIC    = $0B3A =  2874          LCD.asm:1145
DRAW_LINE       = $074B =  1867          LCD.asm:331
DRAW_PIXEL      = $08CB =  2251          LCD.asm:625
DRAW_PIXEL_COLLISION = $FB9B = 64411          Z80MiniGame.asm:1111
DS1             = $087E =  2174          LCD.asm:568
DS2             = $08A2 =  2210          LCD.asm:587
DS3             = $08B5 =  2229          LCD.asm:599
DS_EXIT         = $097D =  2429          LCD.asm:788
DS_LOOP         = $0973 =  2419          LCD.asm:781
DX              = $FB88 = 64392          Z80MiniGame.asm:1096
DY              = $FB8A = 64394          Z80MiniGame.asm:1097
ECHO            = $05E0 =  1504          Z80MiniGame.asm:950
ENDPT           = $FB84 = 64388          Z80MiniGame.asm:1093
ERR             = $FB8C = 64396          Z80MiniGame.asm:1098
ERR_JAM         = $0001 =     1          I2C.asm:98 (unused)
ERR_NOACK       = $0002 =     2          I2C.asm:99
ERR_NONE        = $0000 =     0          I2C.asm:97 (unused)
ERR_TOUT        = $0003 =     3          I2C.asm:100
FILL_BOX        = $073B =  1851          LCD.asm:299
FILL_CIRCLE     = $08BD =  2237          LCD.asm:609
FLIP_PIXEL      = $08FA =  2298          LCD.asm:679
FONT_DATA       = $0BD0 =  3024          LCD.asm:1333
GAMEPAD         = $0040 =    64          Z80MiniGame.asm:57
GAMEPAD_KEY     = $FB99 = 64409          Z80MiniGame.asm:1109
GBOTTOM         = $071C =  1820          LCD.asm:266
GBUF            = $F780 = 63360          Z80MiniGame.asm:1089
GET2            = $0588 =  1416          Z80MiniGame.asm:881
GETCHR          = $057F =  1407          Z80MiniGame.asm:869
GETHL           = $0599 =  1433          Z80MiniGame.asm:896
GETX            = $05A5 =  1445          Z80MiniGame.asm:906 (unused)
GETX1           = $05A8 =  1448          Z80MiniGame.asm:907
GETX2           = $05B1 =  1457          Z80MiniGame.asm:912
GETX3           = $05C1 =  1473          Z80MiniGame.asm:922
GET_CURSOR      = $0B29 =  2857          LCD.asm:1117
GLEFT           = $0726 =  1830          LCD.asm:275
GOTO            = $0542 =  1346          Z80MiniGame.asm:801
GRIGHT          = $0731 =  1841          LCD.asm:285
GTOP            = $0711 =  1809          LCD.asm:256
HELP            = $0548 =  1352          Z80MiniGame.asm:809
HexOut          = $132A =  4906          I2C.asm:454
HexOutHex       = $1337 =  4919          I2C.asm:464
HexOutSkip      = $133D =  4925          I2C.asm:467
I2CA_BLOCK      = $00AE =   174          Z80MiniGame.asm:83
I2CLIST         = $1290 =  4752          I2C.asm:325
I2C_Close       = $11D7 =  4567          I2C.asm:22
I2C_INIT        = $125D =  4701          I2C.asm:228
I2C_LIST_MSG    = $13F0 =  5104          Z80MiniGame.asm:1066
I2C_MemRd       = $12BF =  4799          I2C.asm:368
I2C_MemRdRead   = $12E3 =  4835          I2C.asm:390
I2C_MemRdReady  = $12D4 =  4820          I2C.asm:382
I2C_MemRdRepeat = $12C3 =  4803          I2C.asm:370
I2C_MemWr       = $12F4 =  4852          I2C.asm:414
I2C_MemWrBlock  = $130A =  4874          I2C.asm:429 (unused)
I2C_MemWrReady  = $1309 =  4873          I2C.asm:428
I2C_MemWrRepeat = $12F8 =  4856          I2C.asm:416
I2C_MemWrStore  = $1322 =  4898          I2C.asm:444
I2C_MemWrWrite  = $1312 =  4882          I2C.asm:433
I2C_Open        = $11D0 =  4560          I2C.asm:10
I2C_PORT        = $0021 =    33          I2C.asm:88
I2C_QUIES       = $0081 =   129          I2C.asm:93
I2C_RAMCPY      = $FB9D = 64413          Z80MiniGame.asm:1113
I2C_RdPort      = $1287 =  4743          I2C.asm:254
I2C_Read        = $1217 =  4631          I2C.asm:163
I2C_ReadNoAck   = $1239 =  4665          I2C.asm:183
I2C_ReadRd_Loop = $121F =  4639          I2C.asm:168
I2C_ReadRotate  = $122B =  4651          I2C.asm:174
I2C_SCL_HI      = $1261 =  4705          I2C.asm:231
I2C_SCL_LO      = $1268 =  4712          I2C.asm:235
I2C_SCL_RD      = $0000 =     0          I2C.asm:92 (unused)
I2C_SCL_WR      = $0000 =     0          I2C.asm:91
I2C_SDA_HI      = $126F =  4719          I2C.asm:239
I2C_SDA_LO      = $1276 =  4726          I2C.asm:243
I2C_SDA_RD      = $0007 =     7          I2C.asm:90
I2C_SDA_WR      = $0007 =     7          I2C.asm:89
I2C_Start       = $1244 =  4676          I2C.asm:198
I2C_Stop        = $124F =  4687          I2C.asm:214
I2C_WrPort      = $127B =  4731          I2C.asm:246
I2C_Write       = $11DA =  4570          I2C.asm:116
I2C_WriteBit_Clk = $11EB =  4587          I2C.asm:125
I2C_WriteBit_Hi = $11E8 =  4584          I2C.asm:124
I2C_WriteNoAck  = $1208 =  4616          I2C.asm:143
I2C_WriteWr_Loop = $11DF =  4575          I2C.asm:120
INC_CURSOR      = $0A89 =  2697          LCD.asm:1012
INC_ROW         = $0A96 =  2710          LCD.asm:1019
INIT            = $018A =   394          Z80MiniGame.asm:170
INIT_BASIC      = $0BC6 =  3014          LCD.asm:1313
INIT_GAME_WAIT_START = $024C =   588          Z80MiniGame.asm:323
INIT_LCD        = $069E =  1694          LCD.asm:176
INIT_TERMINAL   = $09B3 =  2483          LCD.asm:845
INT38           = $0422 =  1058          Z80MiniGame.asm:636
INT38_END       = $042C =  1068          Z80MiniGame.asm:642
INT_VEC         = $FB97 = 64407          Z80MiniGame.asm:1108
INVERSE         = $FB95 = 64405          Z80MiniGame.asm:1106
INV_BIT         = $0B6A =  2922          LCD.asm:1182
INV_GRAPHIC     = $0B32 =  2866          LCD.asm:1131
KEYDOWN         = $03BF =   959          Z80MiniGame.asm:577
KEYDOWN_RES     = $03D5 =   981          Z80MiniGame.asm:587
KEYUP           = $03A1 =   929          Z80MiniGame.asm:562
KEYUP_RES       = $03B7 =   951          Z80MiniGame.asm:572
KEY_A           = $0443 =  1091          Z80MiniGame.asm:658
LCDCTRL         = $0070 =   112          Z80MiniGame.asm:55 (unused)
LCDDATA         = $0071 =   113          Z80MiniGame.asm:56 (unused)
LCD_CLEAR       = $064A =  1610          LCD.asm:98
LCD_CR          = $0650 =  1616          LCD.asm:106
LCD_DATA        = $0B9B =  2971          LCD.asm:1254
LCD_DR          = $0071 =   113          LCD.asm:51
LCD_IMAGE_128x64 = $0685 =  1669          LCD.asm:156
LCD_INST        = $0B96 =  2966          LCD.asm:1237
LCD_IR          = $0070 =   112          LCD.asm:50
LCD_PRINT_A     = $0656 =  1622          LCD.asm:115
LCD_PRINT_A_FIM = $0675 =  1653          LCD.asm:136
LCD_PRINT_A_OK  = $0672 =  1650          LCD.asm:134
LCD_PRINT_STRING = $063A =  1594          LCD.asm:80
LCD_SER         = $0000 =     0          LCD.asm:52
LDETXT          = $13AF =  5039          Z80MiniGame.asm:1058
LF              = $000A =    10          LCD.asm:66
LINE_LOOP       = $07A6 =  1958          LCD.asm:400
LISTLOOP        = $1299 =  4761          I2C.asm:329
LISTNEXT        = $12AA =  4778          I2C.asm:338
LISTTEST        = $12B6 =  4790          I2C.asm:351
LL2             = $07D1 =  2001          LCD.asm:432
LL3             = $07DE =  2014          LCD.asm:440
LOAD            = $05F8 =  1528          Z80MiniGame.asm:993
LOAD00          = $0632 =  1586          Z80MiniGame.asm:1029
LOAD2           = $0616 =  1558          Z80MiniGame.asm:1009
LOAD3           = $0625 =  1573          Z80MiniGame.asm:1020
LOADERR         = $062B =  1579          Z80MiniGame.asm:1025
LOAD_GAME       = $0294 =   660          Z80MiniGame.asm:370
LoopBC          = $05E9 =  1513          Z80MiniGame.asm:966
LoopDE          = $05E6 =  1510          Z80MiniGame.asm:964
MENU1           = $03DC =   988          Z80MiniGame.asm:592
MENU2           = $03EC =  1004          Z80MiniGame.asm:601
MENU3           = $03FC =  1020          Z80MiniGame.asm:610
MENU4           = $040C =  1036          Z80MiniGame.asm:619
MENU_LCD_1      = $1427 =  5159          Z80MiniGame.asm:1072
MENU_LCD_2      = $1434 =  5172          Z80MiniGame.asm:1073
MENU_LCD_3      = $1445 =  5189          Z80MiniGame.asm:1074
MENU_LCD_4      = $1451 =  5201          Z80MiniGame.asm:1075
MOVE_DOWN       = $0AF9 =  2809          LCD.asm:1083
MOVE_UP         = $0AEB =  2795          LCD.asm:1074 (unused)
MOVE_VPORT      = $0AE4 =  2788          LCD.asm:1069
MSG_END_GAME    = $1465 =  5221          Z80MiniGame.asm:1078
MSG_EOF         = $1406 =  5126          Z80MiniGame.asm:1067
MSG_READFILE_EXE = $1418 =  5144          Z80MiniGame.asm:1068
MSG_READFILE_IMG = $141D =  5149          Z80MiniGame.asm:1069
MSG_READFILE_TXT = $1422 =  5154          Z80MiniGame.asm:1070
MSG_START_GAME  = $1459 =  5209          Z80MiniGame.asm:1077
NEW_LINE_LCD    = $041C =  1052          Z80MiniGame.asm:630
NEXT_CIRCLE     = $08BF =  2239          LCD.asm:611
NEXT_CMD        = $06A3 =  1699          LCD.asm:179
NEXT_PIXEL      = $073C =  1852          LCD.asm:301
NIBBLE_TO_GLCD  = $0A5D =  2653          LCD.asm:966
PC_LOOP         = $0994 =  2452          LCD.asm:811
PIXEL_X         = $FB96 = 64406          Z80MiniGame.asm:1107
PLOT_BIT        = $0B6E =  2926          LCD.asm:1186
PLOT_BYTE       = $0B57 =  2903          LCD.asm:1166
PLOT_COLUMN     = $0947 =  2375          LCD.asm:745
PLOT_GRAPHIC    = $0B4D =  2893          LCD.asm:1160
PLOT_ROW        = $092F =  2351          LCD.asm:733
PLOT_TO_LCD     = $092A =  2346          LCD.asm:730
PRINT           = $054F =  1359          Z80MiniGame.asm:818
PRINT_CHARS     = $097E =  2430          LCD.asm:798
PRINT_STRING    = $095C =  2396          LCD.asm:767
PS1             = $0A37 =  2615          LCD.asm:937
RAD             = $FB8E = 64398          Z80MiniGame.asm:1099
READ_FILE       = $02AC =   684          Z80MiniGame.asm:384
READ_FILE_EXE   = $0315 =   789          Z80MiniGame.asm:450
READ_FILE_IMG   = $032B =   811          Z80MiniGame.asm:469
READ_FILE_IMG_K = $0343 =   835          Z80MiniGame.asm:489
READ_FILE_TXT   = $034D =   845          Z80MiniGame.asm:496
READ_FILE_TXT_L = $035B =   859          Z80MiniGame.asm:510
READ_IIC_DE     = $0380 =   896          Z80MiniGame.asm:540
READ_MEM_FILES  = $0294 =   660          Z80MiniGame.asm:371 (unused)
READ_MEM_KEY    = $02C2 =   706          Z80MiniGame.asm:397
READ_MEM_NEXT   = $0297 =   663          Z80MiniGame.asm:373
READ_MEM_STEP   = $02FE =   766          Z80MiniGame.asm:431
READ_MEM_STEP_L = $0309 =   777          Z80MiniGame.asm:439
READ_NAME       = $02B4 =   692          Z80MiniGame.asm:388
REMOVE_PIXEL    = $0B78 =  2936          LCD.asm:1192
ROWS            = $0BC2 =  3010          LCD.asm:1311
RST00           = $0000 =     0          Z80MiniGame.asm:91
RST08           = $0008 =     8          Z80MiniGame.asm:98 (unused)
RST10           = $0010 =    16          Z80MiniGame.asm:104 (unused)
RST38           = $0038 =    56          Z80MiniGame.asm:110 (unused)
SAVE_COL        = $0B09 =  2825          LCD.asm:1096
SAVE_ROW        = $0AAA =  2730          LCD.asm:1030
SAVE_VPORT      = $0AF4 =  2804          LCD.asm:1079
SBUF            = $0780 =  1920          Z80MiniGame.asm:1087
SEND_A_TO_GLCD  = $0A4F =  2639          LCD.asm:955
SEND_CHAR_TO_GLCD = $09C7 =  2503          LCD.asm:867
SEND_HL_TO_GLCD = $0A6C =  2668          LCD.asm:978
SEND_PART       = $0BA9 =  2985          LCD.asm:1277
SEND_STRING_TO_GLCD = $0A36 =  2614          LCD.asm:935
SER_BT          = $00F8 =   248          LCD.asm:61 (unused)
SER_BYTE        = $0BA0 =  2976          LCD.asm:1269 (unused)
SER_SYNC        = $0BAE =  2990          LCD.asm:1284
SETCY           = $05A3 =  1443          Z80MiniGame.asm:900
SET_BUF_CLEAR   = $09A6 =  2470          LCD.asm:831
SET_BUF_NO_CLEAR = $09AE =  2478          LCD.asm:836
SET_CURSOR      = $0A78 =  2680          LCD.asm:991
SET_GAMEOVER    = $0241 =   577          Z80MiniGame.asm:312
SET_GBUF        = $090B =  2315          LCD.asm:700
SET_GR_MODE     = $0701 =  1793          LCD.asm:239
SET_TXT_MODE    = $070B =  1803          LCD.asm:246
SHIFT_BIT       = $0924 =  2340          LCD.asm:722
SHIFT_BUFFER    = $0AAE =  2734          LCD.asm:1037
SHOW_MSG_EXE    = $036B =   875          Z80MiniGame.asm:523
SHOW_MSG_IMG    = $0372 =   882          Z80MiniGame.asm:528
SHOW_MSG_TXT    = $0379 =   889          Z80MiniGame.asm:533
SIOA_C          = $0002 =     2          Z80MiniGame.asm:60
SIOA_D          = $0000 =     0          Z80MiniGame.asm:59
SIOB_C          = $0003 =     3          Z80MiniGame.asm:62 (unused)
SIOB_D          = $0001 =     1          Z80MiniGame.asm:61 (unused)
SKIP_TBUF       = $0AC2 =  2754          LCD.asm:1048
SPACE           = $0020 =    32          LCD.asm:69
SPI_WR          = $0BAF =  2991          LCD.asm:1294
SX              = $FB86 = 64390          Z80MiniGame.asm:1094
SY              = $FB87 = 64391          Z80MiniGame.asm:1095
SYSTEM_SP       = $FFF0 = 65520          Z80MiniGame.asm:77
TAB             = $0009 =     9          LCD.asm:65
TBUF            = $FB82 = 64386          Z80MiniGame.asm:1092
TEST_KEYS       = $0464 =  1124          Z80MiniGame.asm:674
TGBUF           = $F780 = 63360          Z80MiniGame.asm:1090
TIMEOUT         = $2710 = 10000          Z80MiniGame.asm:84
TXCRLF          = $0556 =  1366          Z80MiniGame.asm:825
UP              = $00B5 =   181          LCD.asm:62
VAR_GAMEOVER    = $FB9C = 64412          Z80MiniGame.asm:1112
VPORT           = $FB80 = 64384          Z80MiniGame.asm:1091
VTELA_X         = $007E =   126          Z80MiniGame.asm:257
VTELA_Y         = $003E =    62          Z80MiniGame.asm:258
V_DELAY_US      = $0007 =     7          LCD.asm:53
WELLCOME        = $13C0 =  5056          Z80MiniGame.asm:1062
WELLCOME_LCD    = $13DA =  5082          Z80MiniGame.asm:1064
_end            = $FB9E = 64414          Z80MiniGame.asm:90 (unused)
_size           = $FB9E = 64414          Z80MiniGame.asm:90 (unused)
_z80_           = $0001 =     1          Z80MiniGame.asm:1 (unused)
check_keypad    = $0431 =  1073          Z80MiniGame.asm:648
conin           = $0567 =  1383          Z80MiniGame.asm:842
conout          = $055D =  1373          Z80MiniGame.asm:835
conoutA1        = $055E =  1374          Z80MiniGame.asm:836
gameover_loop   = $026B =   619          Z80MiniGame.asm:337
kCPUClock       = $8000 =7372800          Z80MiniGame.asm:67
kDelayCnt       = $011A =   282          Z80MiniGame.asm:72
kDelayLP        = $001A =    26          Z80MiniGame.asm:69
kDelayOH        = $0024 =    36          Z80MiniGame.asm:68
kDelayTA        = $1CCC =  7372          Z80MiniGame.asm:70
kDelayTB        = $1CA8 =  7336          Z80MiniGame.asm:71
monitor         = $01E5 =   485          Z80MiniGame.asm:222
monitor0        = $01E9 =   489          Z80MiniGame.asm:225
monitor1        = $01EF =   495          Z80MiniGame.asm:230
msg_help        = $1343 =  4931          Z80MiniGame.asm:1044
prng16          = $0227 =   551          Z80MiniGame.asm:278
randomHL        = $0211 =   529          Z80MiniGame.asm:260
read_loop       = $02D8 =   728          Z80MiniGame.asm:411
seed1           = $146E =  5230          Z80MiniGame.asm:1080
seed2           = $1470 =  5232          Z80MiniGame.asm:1081
set_collision   = $08E2 =  2274          LCD.asm:648
setup_serial    = $0529 =  1321          Z80MiniGame.asm:779
start           = $01AC =   428          Z80MiniGame.asm:189
start_loop      = $027D =   637          Z80MiniGame.asm:347
waitForChar     = $0567 =  1383          Z80MiniGame.asm:843


total time: 0.1285 sec.
no errors
