              	; --------------------------------------
              	; zasm: assemble "Z80MiniGame.asm"
              	; date: 2025-05-22 18:59:53
              	; --------------------------------------


              	; Z80Mini - GameCore
              	; 05/2025
              	; Requerimento: Placa base + Game core - Face.
              	;
              	;
              	;
              	;   ============== COMPILADOR ===================
              	;
              	;   Compilador (https://k1.spdns.de/Develop/Projects/zasm/Distributions/):
              	;
              	;       Win(CMD):           zasm.exe --z80 -w -u --bin  Z80MiniGame.asm
              	;       Win(Powershell):    ./zasm.exe --z80 -w -u --bin  Z80MiniGame.asm
              	;       Macos:              ./zasm --z80 -w -u --bin  Z80MiniGame.asm
              	;
              	;
              	;   =============== GRAVAÇÃO ====================
              	;
              	;     GRAVAÇÃO (32kb) (TL866 2 Plus - MacOS):
              	;	    minipro -p AT28C64B -w Z80MiniGame.rom -s	
              	;
              	;
              	;   =============== HARDWARE ====================
              	;         - CPU Z80@7.37280Mhz
              	;         - Rom 32k 0000h - 7FFFh
              	;         - Ram 32k 8000h - FFFFh
              	;			
              	;		  - Display Grafico - 70h
              	;		  		- 128x64
              	;         
              	;         - Ports:
              	;               - Onboard IN/OUT: 40H
              	;					- Controle - pullDown (Input)
              	;						- bit0 - A
              	;						- bit1 - B
              	;						- bit2 - Start
              	;						- bit3 - Select
              	;						- bit4 - Right
              	;						- bit5 - Down
              	;						- bit6 - Left
              	;						- bit7 - Up
              	;
              	;               - User IN/OUT: C0H
              	;
              	;   =============== LCD LIB ======================
              	;   ; Graphical LCD 128 x 64 Library
              	;   ------------------------------
              	;   By B. Chiha May-2023
              	;   https://github.com/bchiha/Z80_LCD_128x64_Graphics_Library/tree/
              	;
              	;
              	;
              	; -----------------------------------------------------------------------------
              	; PORTS
              	; -----------------------------------------------------------------------------
0070:         	LCDCTRL	    .EQU    $70
0071:         	LCDDATA     .EQU    $71
0040:         	GAMEPAD     .EQU    $40
              	; SIO/2 - 115200
0000:         	SIOA_D		.EQU	$00
0002:         	SIOA_C		.EQU	$02
0001:         	SIOB_D		.EQU	$01 ; Não usado
0003:         	SIOB_C		.EQU	$03 ; Não usado
              	
              	; -----------------------------------------------------------------------------
              	; H_Delay CONFIG
              	; -----------------------------------------------------------------------------
708000:         	kCPUClock:  .EQU 7372800       ;CPU clock speed in Hz
0024:         	kDelayOH:   .EQU 36             ;Overhead for each 1ms in Tcycles
001A:         	kDelayLP:   .EQU 26             ;Inner loop time in Tcycles
1CCC:         	kDelayTA:   .EQU kCPUClock / 1000 ;CPU clock cycles per millisecond
1CA8:         	kDelayTB:   .EQU kDelayTA - kDelayOH  ;Cycles required for inner loop
011A:         	kDelayCnt:  .EQU kDelayTB / kDelayLP  ;Loop counter for inner loop
              	
              	; -----------------------------------------------------------------------------
              	; SYSTEM SETTINGS
              	; -----------------------------------------------------------------------------
FFF0:         	SYSTEM_SP:	.EQU 	$FFF0	;INITIAL STACK POINTER
              	
              	
              	; -----------------------------------------------------------------------------
              	; I2C SETTINGS
              	; -----------------------------------------------------------------------------
00AE:         	I2CA_BLOCK: .EQU $AE            ;I2C device addess: 24LC256 (Copy from/to Mem)
2710:         	TIMEOUT:    .EQU 10000          ;Timeout loop counter
              	
              	
              	; -----------------------------------------------------------------------------
              	; INIT SYSTEM 
              	; -----------------------------------------------------------------------------
0000:         	    .ORG $0000
0000: F3      	RST00:	DI			    ;Disable INTerrupts
0001: C36C01  			JP	INIT		;Initialize Hardware and go
              	
              	;------------------------------------------------------------------------------
              	; TX a character over RS232 wait for TXDONE first.
              	;------------------------------------------------------------------------------
0004: FFFFFFFF	    .ORG $0008
0008: C3B904  	RST08:	JP	conout
              	
              	;------------------------------------------------------------------------------
              	; RX a character from buffer wait until char ready.
              	;------------------------------------------------------------------------------
000B: FFFFFFFF	    .ORG $0010
000F: FF      	
0010: C3C304  	RST10:		JP	conin
              	
              	; =========================================================
              	; Int 38h - Monitor 
              	; =========================================================
0013: FFFFFFFF		.org    $0038
0017: FF...   	
0038:         	RST38:
0038: F3      	    DI
0039: E5      		PUSH HL
003A: 2A97FB  	    LD HL, (INT_VEC)
003D: E9      	    JP (HL)
              	
              	; -----------------------------------------------------------------------------
              	; API
              	; -----------------------------------------------------------------------------
003E: FFFFFFFF		.ORG $0100 ; API POINTER
0042: FF...   	
              	; LCD
0100: C3FA05  	    JP INIT_LCD             ;Initalise the LCD
0103: C30F06  	    JP CLEAR_GBUF           ;Clear the Graphics Buffer
0106: C31F06  	    JP CLEAR_GR_LCD         ;Clear the Graphics LCD Screen
0109: C34606  	    JP CLEAR_TXT_LCD        ;Clear the Text LCD Screen
010C: C35D06  	    JP SET_GR_MODE          ;Set Graphics Mode
010F: C36706  	    JP SET_TXT_MODE         ;Set Text Mode
0112: C36C06  	    JP DRAW_BOX             ;Draw a rectangle between two points
0115: C3A706  	    JP DRAW_LINE            ;Draw a line between two points
0118: C35207  	    JP DRAW_CIRCLE          ;Draw a circle from Mid X,Y to Radius
011B: C32708  	    JP DRAW_PIXEL           ;Draw one pixel at X,Y
011E: C39706  	    JP FILL_BOX             ;Draw a filled rectangle between two points
0121: C31908  	    JP FILL_CIRCLE          ;Draw a filled circle from Mid X,Y to Radius
0124: C37A08  	    JP PLOT_TO_LCD          ;Display the Graphics Buffer to the LCD Screen
0127: C3AC08  	    JP PRINT_STRING         ;Print Text on the screen in a given row
012A: C3CE08  	    JP PRINT_CHARS          ;Print Characters on the screen in a given row and column
012D: C3ED08  	    JP DELAY_US             ;Microsecond delay for LCD updates
0130: C3F008  	    JP DELAY_MS             ;Millisecond delay for LCD updates
0133: C3F608  	    JP SET_BUF_CLEAR        ;Clear the Graphics buffer on after Plotting to the screen
0136: C3FE08  	    JP SET_BUF_NO_CLEAR     ;Retain the Graphics buffer on after Plotting to the screen
0139: C33808  	    JP CLEAR_PIXEL          ;Remove a Pixel at X,Y
013C: C34A08  	    JP FLIP_PIXEL           ;Flip a Pixel On/Off at X,Y
013F: C3E60A  	    JP LCD_INST             ;Send a parallel or serial instruction to LCD
0142: C3EB0A  	    JP LCD_DATA             ;Send a parallel or serial datum to LCD
0145: C3FE0A  	    JP SER_SYNC             ;Send serial synchronise byte to LCD
0148: C38A0A  	    JP DRAW_GRAPHIC         ;Draw an ASCII charcter or Sprite to the LCD
014B: C3820A  	    JP INV_GRAPHIC          ;Inverse graphics printing
014E: C30309  	    JP INIT_TERMINAL        ;Initialize the LCD for terminal emulation
0151: C31709  	    JP SEND_CHAR_TO_GLCD    ;Send an ASCII Character to the LCD
0154: C38609  	    JP SEND_STRING_TO_GLCD  ;Send an ASCII String to the LCD
0157: C39F09  	    JP SEND_A_TO_GLCD       ;Send register A to the LCD
015A: C3BC09  	    JP SEND_HL_TO_GLCD      ;Send register HL to the LCD
015D: C3C809  	    JP SET_CURSOR           ;Set the graphics cursor
0160: C3790A  	    JP GET_CURSOR           ;Get the current cursor
0163: C37E0A  	    JP DISPLAY_CURSOR       ;Set Cursor on or off
0166: C33F05  	    JP DELAY_DE             ;Delay in milliseconds (DE in millis)
0169: C39605  		JP LCD_PRINT_STRING		;Print string HL, end with 0 EX: "Test", $00
              	
              	
              	
              	
016C:         	INIT:
016C: 31F0FF  	    LD SP, SYSTEM_SP
              		; Init Serial
016F: CD8504  	    CALL setup_serial
0172: 211013  		LD HL, WELLCOME
0175: CDAB04  	    CALL PRINT
              	
              		; Init LCD
0178: 116400  		LD DE, $0064 ; 100ms
017B: CD3F05  	    CALL DELAY_DE
              	
017E: CD0309  	    CALL INIT_TERMINAL
0181: CD5D06  	    CALL SET_GR_MODE
0184: CDFE08  	    CALL SET_BUF_NO_CLEAR
              	
0187: AF      		XOR A
0188: 329AFB  	    LD (CURSOR_MENU), A
              	
018B:         	start:
018B: CD0F06  		CALL CLEAR_GBUF
              	
018E: 010000  	    LD BC, $0000
0191: CDC809  	    CALL SET_CURSOR
              	
0194: AF      		XOR A
0195: 112A13  		LD DE, WELLCOME_LCD
0198: CD8609  		CALL SEND_STRING_TO_GLCD
              	
019B: CD7803  		CALL NEW_LINE_LCD
              	
019E: 3A9AFB  	    LD A, (CURSOR_MENU)
01A1: FE00    	    CP 0
01A3: CD3803  	    CALL MENU1 
              	
01A6: 3A9AFB  	    LD A, (CURSOR_MENU)
01A9: FE01    	    CP 1
01AB: CD4803  	    CALL MENU2
              	
01AE: 3A9AFB  	    LD A, (CURSOR_MENU)
01B1: FE02    	    CP 2
01B3: CD5803  	    CALL MENU3
              	
01B6: 3A9AFB  	    LD A, (CURSOR_MENU)
01B9: FE03    	    CP 3
01BB: CD6803  	    CALL MENU4
              	
01BE: 217E03  		LD  HL, INT38
01C1: 2297FB  	    LD  (INT_VEC), HL
              	    ;IM  1
              	    ;EI
              	
01C4:         	monitor:
01C4: 21C401  		LD HL, monitor ; point to return to monitor
01C7: E5      		PUSH HL
01C8:         	monitor0:
01C8: CDB204  		CALL TXCRLF	; Entry point for Monitor, Normal	
01CB: 3E3E    		LD   A,'>'	; Get a ">"	
01CD: CF      		RST 08H		; print it
              	
01CE:         	monitor1:
01CE: D7      		RST 10H	; Get a character from serial
01CF: FE20    		CP   ' '	; <spc> or less? 	
01D1: 38FB    		JR   C, monitor1	; Go back
              	
01D3: FE3A    		CP   ':'	; ":"?
01D5: CA5405  		JP   Z,LOAD	; First character of a HEX load
              	
01D8: CF      		RST 08H	; Print char on console
              	
01D9: FE3F    		CP   '?'
01DB: CAA404  		JP   Z,HELP
              	
01DE: E65F    		AND  $5F	; Make character uppercase
              	
01E0: FE52    		CP   'R' 	; reset
01E2: CA0000  		JP   Z, RST00
              	
01E5: FE47    		CP   'G'
01E7: CA9E04  		JP   Z,GOTO
              	
01EA: 3E3F    		LD   A,'?'	; Get a "?"	
01EC: CF      		RST 08H		; Print it
              	
01ED: C3C801  	    jp monitor0
              	
              	
              	
01F0:         	LOAD_GAME:
01F0:         	READ_MEM_FILES:
01F0: 110000  	    LD DE, $0000 ; start "D"? File
01F3:         	READ_MEM_NEXT:
01F3: CDDC02  	    CALL READ_IIC_DE
01F6: B7      	    OR A
01F7: FE44    	    CP 'D'
01F9: CA0802  	    JP Z, READ_FILE
01FC: 215613  	    LD HL, MSG_EOF
01FF: CDAC05  	    CALL LCD_CR
0202: CD9605  	    CALL LCD_PRINT_STRING
0205: 3E0D    	    LD A, CR
0207: C9      	    RET
              	
0208:         	READ_FILE:
0208: CDAC05  	    CALL LCD_CR ; new line
020B: CDAC05  	    CALL LCD_CR ; new line
020E: 0610    	    LD B, 16
0210:         	READ_NAME:
0210: 13      	    INC DE
0211: CDDC02  	    CALL READ_IIC_DE
0214: B7      	    OR A
0215: FE00    	    CP 0
0217: C4B205  	    CALL NZ, LCD_PRINT_A
021A: 05      	    DEC B
021B: C21002  	    JP NZ, READ_NAME
              	
021E:         	READ_MEM_KEY:
              	    ; Show commands
021E: D5      	    PUSH DE
021F: 13      	    INC DE
0220: CDDC02  	    CALL READ_IIC_DE
0223: B7      	    OR A
0224: FE00    	    CP 0
0226: CCC702  	    CALL Z, SHOW_MSG_EXE
0229: FE01    	    CP 1
022B: CCCE02  	    CALL Z, SHOW_MSG_IMG
022E: FE02    	    CP 2
0230: CCD502  	    CALL Z, SHOW_MSG_TXT
0233: D1      	    POP DE
              	    ; wait command
0234:         	read_loop:
0234: DB40    	    IN A, (GAMEPAD)
0236: FE00    		cp 0
0238: CA3402  		JP Z, read_loop
023B: CB4F    	    bit 1, A ; Next - B
023D: C25A02  	    JP    NZ, READ_MEM_STEP
0240: CB47    	    bit 0, A  ; key Enter, execute - A
0242: CA1E02  	    JP    Z, READ_MEM_KEY
              	    ;read type
0245: 13      	    INC DE
0246: CDDC02  	    CALL READ_IIC_DE
0249: B7      	    OR A
024A: FE00    	    CP 0
024C: CA7102  	    JP Z, READ_FILE_EXE
024F: FE01    	    CP 1
0251: CA8702  	    JP Z, READ_FILE_IMG
0254: FE02    	    CP 2
0256: CAA902  	    JP Z, READ_FILE_TXT
0259: C9      	    RET
              	
025A:         	READ_MEM_STEP:
025A: 13      	    INC DE ; type
025B: 13      	    INC DE ; size H
025C: CDDC02  	    CALL READ_IIC_DE
025F: 67      	    LD H, A
0260: 13      	    INC DE ; size L
0261: CDDC02  	    CALL READ_IIC_DE
0264: 6F      	    LD L, A
0265:         	READ_MEM_STEP_L:
0265: 13      	    INC DE ; step file
0266: 2B      	    DEC HL
0267: 7C      	    LD A, H
0268: B5      	    OR L
0269: C26502  	    JP NZ, READ_MEM_STEP_L
026C: 13      	    INC DE ; end
026D: 13      	    INC DE ; nex start
026E: C3F301  	    JP READ_MEM_NEXT
              	
              	
0271:         	READ_FILE_EXE:
              	    ; read size H
0271: 13      	    INC DE
0272: CDDC02  	    CALL READ_IIC_DE
0275: 47      	    LD B, A
              	
              	    ; read size L
0276: 13      	    INC DE
0277: CDDC02  	    CALL READ_IIC_DE
027A: 4F      	    LD C, A
              	
027B: 13      	    INC DE ; first byte file
027C: 210080  	    LD HL, $8000 ; memory user
              	
027F: CD0F12  	    CALL I2C_MemRd
0282: E1      	    POP HL ; return
0283: C30080  	    JP $8000
0286: C9      	    RET
              	
0287:         	READ_FILE_IMG:
              	    ; read size H
0287: 13      	    INC DE
0288: CDDC02  	    CALL READ_IIC_DE
028B: 47      	    LD B, A
              	
              	    ; read size L
028C: 13      	    INC DE
028D: CDDC02  	    CALL READ_IIC_DE
0290: 4F      	    LD C, A
              	
0291: 13      	    INC DE ; first byte file
0292: 210080  	    LD HL, $8000 ; memory user
              	
0295: CD0F12  	    CALL I2C_MemRd
              	
0298: 2680    	    LD H, $80
029A: 2E00    	    LD L, $00
029C: CDE105  	    CALL LCD_IMAGE_128x64
              	
029F:         	READ_FILE_IMG_K:
029F: DB40    	    IN A, (GAMEPAD)
02A1: CB5F    	    bit 3, A
02A3: CA9F02  	    JP    Z, READ_FILE_IMG_K
02A6: 3E0C    	    LD A, CS
02A8: C9      	    RET
              	
02A9:         	READ_FILE_TXT:
02A9: CDA605  	    CALL LCD_CLEAR
              	
              	    ; read size H
02AC: 13      	    INC DE
02AD: CDDC02  	    CALL READ_IIC_DE
02B0: 47      	    LD B, A
              	
              	    ; read size L
02B1: 13      	    INC DE
02B2: CDDC02  	    CALL READ_IIC_DE
02B5: 4F      	    LD C, A
              	
02B6: 13      	    INC DE ; first byte file
02B7:         	READ_FILE_TXT_L:
02B7: CDDC02  	    CALL READ_IIC_DE
02BA: CDB205  	    CALL LCD_PRINT_A
02BD: 13      	    INC DE ; step file
02BE: 0B      	    DEC BC
02BF: 78      	    LD A, B
02C0: B1      	    OR C
02C1: C2B702  	    JP NZ, READ_FILE_TXT_L
02C4: 13      	    INC DE ; end
02C5: 13      	    INC DE ; next start    
02C6: C9      	    RET
              	
              	
02C7:         	SHOW_MSG_EXE:
02C7: 216813  	    LD HL, MSG_READFILE_EXE
02CA: CD9605  	    CALL LCD_PRINT_STRING
02CD: C9      	    RET
              	
02CE:         	SHOW_MSG_IMG:
02CE: 216D13  	    LD HL, MSG_READFILE_IMG
02D1: CD9605  	    CALL LCD_PRINT_STRING
02D4: C9      	    RET
              	
02D5:         	SHOW_MSG_TXT:
02D5: 217213  	    LD HL, MSG_READFILE_TXT
02D8: CD9605  	    CALL LCD_PRINT_STRING
02DB: C9      	    RET
              	
              	
              	; Read byte in i2c, address in DE, return byte in A
02DC:         	READ_IIC_DE:
02DC: C5      	    PUSH BC
02DD: D5      	    PUSH DE
02DE: E5      	    PUSH HL
02DF: 3EAE    	    LD   A, I2CA_BLOCK   ;I2C address to write to
02E1: CD2011  	    CALL I2C_Open
02E4: 7A      	    LD   A, D           ;Address (hi) in I2C memory
02E5: CD2A11  	    CALL I2C_Write      ;Write address
02E8: 7B      	    LD   A,E            ;Address (lo) in I2C memory
02E9: CD2A11  	    CALL I2C_Write      ;Write address
02EC: 3EAF    	    LD   A,I2CA_BLOCK+1 ;I2C device to be read from
02EE: CD2011  	    CALL I2C_Open       ;Open for read
02F1: CD6711  	    CALL I2C_Read
02F4: F5      	    PUSH AF
02F5: CD9F11  	    CALL I2C_Stop       ;Generate I2C stop
02F8: F1      	    POP AF
02F9: E1      	    POP HL
02FA: D1      	    POP DE
02FB: C1      	    POP BC
02FC: C9      	    RET
              	
              	
02FD:         	KEYUP:
02FD: DB40    	    IN A, (GAMEPAD)
02FF: FE00    	    CP 0
0301: C2FD02  	    JP NZ, KEYUP
0304: 3A9AFB  	    LD A, (CURSOR_MENU)
0307: FE00    	    CP 0
0309: CA1303  	    JP Z, KEYUP_RES
030C: 3D      	    DEC A
030D: 329AFB  	    LD (CURSOR_MENU), A
0310: C38B01  	    JP start
0313:         	KEYUP_RES:
0313: 3E03    	    LD A, 3
0315: 329AFB  	    LD (CURSOR_MENU), A
0318: C38B01  	    JP start
              	
031B:         	KEYDOWN:
031B: DB40    	    IN A, (GAMEPAD)
031D: FE00    	    CP 0
031F: C21B03  	    JP NZ, KEYDOWN
0322: 3A9AFB  	    LD A, (CURSOR_MENU)
0325: FE03    	    CP 3
0327: CA3103  	    JP Z, KEYDOWN_RES
032A: 3C      	    INC A
032B: 329AFB  	    LD (CURSOR_MENU), A
032E: C38B01  	    JP start
0331:         	KEYDOWN_RES:
0331: AF      	    XOR A
0332: 329AFB  	    LD (CURSOR_MENU), A
0335: C38B01  	    JP start
              	
0338:         	MENU1:
0338: C24003  	    JP NZ, $+8
033B: 3E06    	    LD A, 6; >
033D: CD1709  	    CALL SEND_CHAR_TO_GLCD
0340: 117713  	    LD DE, MENU_LCD_1
0343: AF      	    XOR A
0344: CD8609  		CALL SEND_STRING_TO_GLCD
0347: C9      	    RET
              	
0348:         	MENU2:
0348: C25003  	    JP NZ, $+8
034B: 3E06    	    LD A, 6; >
034D: CD1709  	    CALL SEND_CHAR_TO_GLCD
0350: 118413  	    LD DE, MENU_LCD_2
0353: AF      	    XOR A
0354: CD8609  		CALL SEND_STRING_TO_GLCD
0357: C9      	    RET
              	
0358:         	MENU3:
0358: C26003  	    JP NZ, $+8
035B: 3E06    	    LD A, 6; >
035D: CD1709  	    CALL SEND_CHAR_TO_GLCD
0360: 119513  	    LD DE, MENU_LCD_3
0363: AF      	    XOR A
0364: CD8609  		CALL SEND_STRING_TO_GLCD
0367: C9      	    RET
              	
0368:         	MENU4:
0368: C27003  	    JP NZ, $+8
036B: 3E06    	    LD A, 6; >
036D: CD1709  	    CALL SEND_CHAR_TO_GLCD
0370: 11A113  	    LD DE, MENU_LCD_4
0373: AF      	    XOR A
0374: CD8609  		CALL SEND_STRING_TO_GLCD
0377: C9      	    RET
              	
              	
              	
0378:         	NEW_LINE_LCD:
0378: 3E0D    		LD A, CR
037A: CD1709  		CALL SEND_CHAR_TO_GLCD
037D: C9      		RET
              	
              	
037E:         	INT38:
037E: F3      		DI
037F: F5      		PUSH AF
0380: DB40    		IN A, (GAMEPAD)
0382: CA8803  		JP Z, INT38_END
0385: 3299FB  		LD (GAMEPAD_KEY), A
0388:         	INT38_END:
0388: F1      		POP AF
0389: E1      		POP HL
038A: FB      		EI
038B: ED4D    		RETI
              	
038D:         	check_keypad:
038D: DB40    		in A, (GAMEPAD)
038F: CB7F    	    BIT 7, A ; up
0391: C2FD02  	    JP NZ, KEYUP
0394: CB6F    	    BIT 5, A ; down
0396: C21B03  	    JP NZ, KEYDOWN
0399: CB47    		BIT 0, A ; A
039B: C29F03  	    JP NZ, KEY_A
039E: C9      		RET
              	
039F:         	KEY_A:
039F: DB40    	    IN A, (GAMEPAD)
03A1: FE00    	    CP 0
03A3: C29F03  	    JP NZ, KEY_A
03A6: 3A9AFB  		LD A, (CURSOR_MENU)
03A9: FE00    		CP 0
03AB: CA0080  		JP Z, $8000 ; Start game JP $8000
03AE: FE01    		CP 1
03B0: CAF001  		JP Z, LOAD_GAME
03B3: FE02    		CP 2
03B5: CAC003  		JP Z, TEST_KEYS
03B8: FE03    		CP 3
03BA: CA0000  		JP Z, 0 ; reset
03BD: C30000  		JP 0
              	
              	
03C0:         	TEST_KEYS:
03C0: CD0F06  	    CALL CLEAR_GBUF
              	
              	    ; select
03C3: 0638    	    LD B, 56
03C5: 0E07    	    LD C, 7
03C7: 1E06    	    LD E, $06
03C9: DB40    	    IN A, ($40)
03CB: CB5F    	    BIT 3, A
03CD: CAD603  	    JP Z, $+9
03D0: CD1908  	    CALL FILL_CIRCLE
03D3: C3D903  	    JP $+6
03D6: CD5207  	    CALL DRAW_CIRCLE
              	    
              	    ; Start
03D9: 0649    	    LD B, 73
03DB: 0E07    	    LD C, 7
03DD: 1E06    	    LD E, $06
03DF: DB40    	    IN A, ($40)
03E1: CB57    	    BIT 2, A
03E3: CAEC03  	    JP Z, $+9
03E6: CD1908  	    CALL FILL_CIRCLE
03E9: C3EF03  	    JP $+6
03EC: CD5207  	    CALL DRAW_CIRCLE
              	    
              	
              	    ; A
03EF: 0659    	    LD B, 89
03F1: 0E28    	    LD C, 40
03F3: 1E06    	    LD E, $06
03F5: DB40    	    IN A, ($40)
03F7: CB47    	    BIT 0, A
03F9: CA0204  	    JP Z, $+9
03FC: CD1908  	    CALL FILL_CIRCLE
03FF: C30504  	    JP $+6
0402: CD5207  	    CALL DRAW_CIRCLE
              	    
              	    
              	    ; B
0405: 0669    	    LD B, 105
0407: 0E18    	    LD C, 24
0409: 1E06    	    LD E, $06
040B: DB40    	    IN A, ($40)
040D: CB4F    	    BIT 1, A
040F: CA1804  	    JP Z, $+9
0412: CD1908  	    CALL FILL_CIRCLE
0415: C31B04  	    JP $+6
0418: CD5207  	    CALL DRAW_CIRCLE
              	    
              	    
              	    ; Up
041B: 0618    	    LD B, 24
041D: 0E18    	    LD C, 24
041F: 1E06    	    LD E, $06
0421: DB40    	    IN A, ($40)
0423: CB7F    	    BIT 7, A
0425: CA2E04  	    JP Z, $+9
0428: CD1908  	    CALL FILL_CIRCLE
042B: C33104  	    JP $+6
042E: CD5207  	    CALL DRAW_CIRCLE
              	    
              	    ; Down
0431: 0618    	    LD B, 24
0433: 0E39    	    LD C, 57
0435: 1E06    	    LD E, $06
0437: DB40    	    IN A, ($40)
0439: CB6F    	    BIT 5, A
043B: CA4404  	    JP Z, $+9
043E: CD1908  	    CALL FILL_CIRCLE
0441: C34704  	    JP $+6
0444: CD5207  	    CALL DRAW_CIRCLE
              	    
              	    ; Left
0447: 0607    	    LD B, 7
0449: 0E29    	    LD C, 41
044B: 1E06    	    LD E, $06
044D: DB40    	    IN A, ($40)
044F: CB77    	    BIT 6, A
0451: CA5A04  	    JP Z, $+9
0454: CD1908  	    CALL FILL_CIRCLE
0457: C35D04  	    JP $+6
045A: CD5207  	    CALL DRAW_CIRCLE
              	    
              	    ; Right
045D: 0628    	    LD B, 40
045F: 0E28    	    LD C, 40
0461: 1E06    	    LD E, $06
0463: DB40    	    IN A, ($40)
0465: CB67    	    BIT 4, A
0467: CA7004  	    JP Z, $+9
046A: CD1908  	    CALL FILL_CIRCLE
046D: C37304  	    JP $+6
0470: CD5207  	    CALL DRAW_CIRCLE
              	    
0473: CD7A08  		CALL PLOT_TO_LCD
              	
              		; check select+start to exit
0476: DB40    	    IN A, (GAMEPAD)
0478: CB57    	    BIT 2, A
047A: CAC003  		JP Z, TEST_KEYS
047D: CB5F    	    BIT 3, A
047F: CAC003  	    JP Z, TEST_KEYS
0482: C36C01  	    jp INIT
              	
              	
0485:         	setup_serial:
              	    ;	Initialise SIO/2 A
0485: 3E04    		LD	A,$04
0487: D302    		OUT	(SIOA_C),A
0489: 3EC4    		LD	A,$C4
048B: D302    		OUT	(SIOA_C),A
              	
048D: 3E03    		LD	A,$03
048F: D302    		OUT	(SIOA_C),A
0491: 3EE1    		LD	A,$E1
0493: D302    		OUT	(SIOA_C),A
              	
0495: 3E05    		LD	A,$05
0497: D302    		OUT	(SIOA_C),A
0499: 3E68    		LD	A, $68
049B: D302    		OUT	(SIOA_C),A
049D: C9      	    RET
              	
              	
              	
              	
              	; GOTO command
049E:         	GOTO:
049E: CDF504  		CALL GETHL		; ENTRY POINT FOR <G>oto addr. Get XXXX from user.
04A1: D8      		RET  C			; Return if invalid       	
04A2: E5      		PUSH HL
04A3: C9      		RET			; Jump to HL address value
              	
              	
              	; HELP
04A4:         	HELP:
04A4: 219312  		LD HL, msg_help
04A7: CDAB04  		CALL PRINT
04AA: C9      		RET
              	
              	
              	;------------------------------------------------------------------------------
              	; Print string of characters to Serial A until byte=$00, WITH CR, LF
              	;------------------------------------------------------------------------------
04AB: 7E      	PRINT:  LD   A,(HL)	; Get character
04AC: B7      			OR   A		; Is it $00 ?
04AD: C8      			RET  Z		; Then RETurn on terminator
04AE: CF      			RST  08H	; Print it
04AF: 23      			INC  HL		; Next Character
04B0: 18F9    			JR   PRINT	; Continue until $00
              	
04B2: 3E0D    	TXCRLF:	LD   A,$0D	; 
04B4: CF      			RST  08H	; Print character 
04B5: 3E0A    			LD   A,$0A	; 
04B7: CF      			RST  08H	; Print character
04B8: C9      			RET
              	
              	;------------------------------------------------------------------------------
              	; Console output routine - Serial
              	; Output port to send a character.
              	;------------------------------------------------------------------------------
04B9: F5      	conout:		PUSH	AF		; Store character
04BA: CDD204  	conoutA1:	CALL	CKSIOA		; See if SIO channel A is finished transmitting
04BD: 28FB    			JR	Z, conoutA1	; Loop until SIO flag signals ready
04BF: F1      			POP	AF		; RETrieve character
04C0: D300    			OUT	(SIOA_D),A	; OUTput the character
04C2: C9      			RET
              	
04C3:         	conin:
04C3:         	waitForChar:
04C3: CD8D03  		CALL check_keypad ; Enquanto aguarda serial, verifica check_keypad
              		; Check if there is a char in channel A
04C6: 97      		SUB	A
04C7: D302    		OUT 	(SIOA_C),A
04C9: DB02    		IN   	A,(SIOA_C)	; Status byte D2=TX Buff Empty, D0=RX char ready	
04CB: 0F      		RRCA			; Rotates RX status into Carry Flag,	
04CC: 30F5    		JR	NC, waitForChar
04CE: DB00    		IN	A,(SIOA_D)
04D0: B7      		OR A ; clear carry
04D1: C9      		RET
              		
              	
04D2:         	CKSIOA:
04D2: 97      			SUB	A
04D3: D302    			OUT 	(SIOA_C),A
04D5: DB02    			IN   	A,(SIOA_C)	; Status byte D2=TX Buff Empty, D0=RX char ready	
04D7: 0F      			RRCA			; Rotates RX status into Carry Flag,	
04D8: CB4F    			BIT  	1,A		; Set Zero flag if still transmitting character	
04DA: C9      	        RET
              	
              	
              	;------------------------------------------------------------------------------
              	; Get a character from the console, must be $20-$7F to be valid (no control characters)
              	; <Ctrl-c> and <SPACE> breaks with the Zero Flag set
              	;------------------------------------------------------------------------------	
04DB: D7      	GETCHR	RST 10H	; RX a Character
04DC: FE03    			CP   $03	; <ctrl-c> User break?
04DE: C8      			RET  Z			
04DF: FE20    			CP   $20	; <space> or better?
04E1: 38F8    			JR   C,GETCHR	; Do it again until we get something usable
04E3: C9      			RET
              	
              	;------------------------------------------------------------------------------
              	; Gets two ASCII characters from the console (assuming them to be HEX 0-9 A-F)
              	; Moves them into B and C, converts them into a byte value in A and updates a
              	; Checksum value in E
              	;------------------------------------------------------------------------------
04E4: CDDB04  	GET2	CALL GETCHR	; Get us a valid character to work with
04E7: 47      			LD   B,A	; Load it in B
04E8: CDDB04  			CALL GETCHR	; Get us another character
04EB: 4F      			LD   C,A	; load it in C
04EC: CD2305  			CALL BCTOA	; Convert ASCII to byte
04EF: 4F      			LD   C,A	; Build the checksum
04F0: 7B      			LD   A,E
04F1: 91      			SUB  C		; The checksum should always equal zero when checked
04F2: 5F      			LD   E,A	; Save the checksum back where it came from
04F3: 79      			LD   A,C	; Retrieve the byte and go back
04F4: C9      			RET
              	
              	;------------------------------------------------------------------------------
              	; Gets four Hex characters from the console, converts them to values in HL
              	;------------------------------------------------------------------------------
04F5: 210000  	GETHL		LD   HL,$0000	; Gets xxxx but sets Carry Flag on any Terminator
04F8: CD3C05  			CALL ECHO	; RX a Character
04FB: FE0D    			CP   $0D	; <CR>?
04FD: 200E    			JR   NZ,GETX2	; other key		
04FF: 37      	SETCY		SCF		; Set Carry Flag
0500: C9      			RET             ; and Return to main program		
              	;------------------------------------------------------------------------------
              	; This routine converts last four hex characters (0-9 A-F) user types into a value in HL
              	; Rotates the old out and replaces with the new until the user hits a terminating character
              	;------------------------------------------------------------------------------
0501: 210000  	GETX		LD   HL,$0000	; CLEAR HL
0504: CD3C05  	GETX1		CALL ECHO	; RX a character from the console
0507: FE0D    			CP   $0D	; <CR>
0509: C8      			RET  Z		; quit
050A: FE2C    			CP   $2C	; <,> can be used to safely quit for multiple entries
050C: C8      			RET  Z		; (Like filling both DE and HL from the user)
050D: FE03    	GETX2		CP   $03	; Likewise, a <ctrl-C> will terminate clean, too, but
050F: 28EE    			JR   Z,SETCY	; It also sets the Carry Flag for testing later.
0511: 29      			ADD  HL,HL	; Otherwise, rotate the previous low nibble to high
0512: 29      			ADD  HL,HL	; rather slowly
0513: 29      			ADD  HL,HL	; until we get to the top
0514: 29      			ADD  HL,HL	; and then we can continue on.
0515: D630    			SUB  $30	; Convert ASCII to byte	value
0517: FE0A    			CP   $0A	; Are we in the 0-9 range?
0519: 3802    			JR   C,GETX3	; Then we just need to sub $30, but if it is A-F
051B: D607    			SUB  $07	; We need to take off 7 more to get the value down to
051D: E60F    	GETX3		AND  $0F	; to the right hex value
051F: 85      			ADD  A,L	; Add the high nibble to the low
0520: 6F      			LD   L,A	; Move the byte back to A
0521: 18E1    			JR   GETX1	; and go back for next character until he terminates
              	;------------------------------------------------------------------------------
              	; Convert ASCII characters in B C registers to a byte value in A
              	;------------------------------------------------------------------------------
0523: 78      	BCTOA		LD   A,B	; Move the hi order byte to A
0524: D630    			SUB  $30	; Take it down from Ascii
0526: FE0A    			CP   $0A	; Are we in the 0-9 range here?
0528: 3802    			JR   C,BCTOA1	; If so, get the next nybble
052A: D607    			SUB  $07	; But if A-F, take it down some more
052C: 07      	BCTOA1		RLCA		; Rotate the nybble from low to high
052D: 07      			RLCA		; One bit at a time
052E: 07      			RLCA		; Until we
052F: 07      			RLCA		; Get there with it
0530: 47      			LD   B,A	; Save the converted high nybble
0531: 79      			LD   A,C	; Now get the low order byte
0532: D630    			SUB  $30	; Convert it down from Ascii
0534: FE0A    			CP   $0A	; 0-9 at this point?
0536: 3802    			JR   C,BCTOA2	; Good enough then, but
0538: D607    			SUB  $07	; Take off 7 more if it's A-F
053A: 80      	BCTOA2		ADD  A,B	; Add in the high order nybble
053B: C9      			RET
              	
              	;------------------------------------------------------------------------------
              	; Get a character and echo it back to the user
              	;------------------------------------------------------------------------------
053C: D7      	ECHO	RST 10H ; rx
053D: CF      			RST 08H ; tx
053E: C9      			RET
              	
              	
              	
              	; **********************************************************************
              	; Delay by DE milliseconds
              	;   On entry: DE = Delay time in milliseconds
              	;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved
053F: F5      	DELAY_DE:    	PUSH AF
0540: C5      	            PUSH BC
0541: D5      	            PUSH DE
              	; 1 ms loop, DE times...        ;[=36]   [=29]    Overhead for each 1ms
0542: 011A01  	LoopDE:    LD   BC, kDelayCnt   ;[10]    [9]
              	; Inner loop, BC times...       ;[=26]   [=20]    Loop time in Tcycles
0545: 0B      	LoopBC:    DEC  BC             ;[6]     [4]
0546: 79      	            LD   A,C            ;[4]     [4]
0547: B0      	            OR   B              ;[4]     [4]
0548: C24505  	            JP   NZ,LoopBC     ;[12/7]  [8/6] 
              	; Have we looped once for each millisecond requested?
054B: 1B      	            DEC  DE             ;[6]     [4]
054C: 7B      	            LD   A,E            ;[4]     [4]
054D: B2      	            OR   D              ;[4]     [4]
054E: 20F2    	            JR   NZ, LoopDE     ;[12/7]  [8/6]
0550: D1      	            POP  DE
0551: C1      	            POP  BC
0552: F1      	            POP  AF
0553: C9      	            RET
              	
              	
              	
              	;------------------------------------------------------------------------------
              	; LOAD Intel Hex format file from the console.
              	; [Intel Hex Format is:
              	; 1) Colon (Frame 0)
              	; 2) Record Length Field (Frames 1 and 2)
              	; 3) Load Address Field (Frames 3,4,5,6)
              	; 4) Record Type Field (Frames 7 and 8)
              	; 5) Data Field (Frames 9 to 9+2*(Record Length)-1
              	; 6) Checksum Field - Sum of all byte values from Record Length to and 
              	;   including Checksum Field = 0 ]
              	;------------------------------------------------------------------------------	
0554: 1E00    	LOAD:	LD   E,0	; First two Characters is the Record Length Field
0556: CDE404  			CALL GET2	; Get us two characters into BC, convert it to a byte <A>
0559: 57      			LD   D,A	; Load Record Length count into D
055A: CDE404  			CALL GET2	; Get next two characters, Memory Load Address <H>
055D: 67      			LD   H,A	; put value in H register.
055E: CDE404  			CALL GET2	; Get next two characters, Memory Load Address <L>
0561: 6F      			LD   L,A	; put value in L register.
0562: CDE404  			CALL GET2	; Get next two characters, Record Field Type
0565: FE01    			CP   $01	; Record Field Type 00 is Data, 01 is End of File
0567: 2009    			JR   NZ,LOAD2	; Must be the end of that file
0569: CDE404  			CALL GET2	; Get next two characters, assemble into byte
056C: 7B      			LD   A,E	; Recall the Checksum byte
056D: A7      			AND  A		; Is it Zero?
056E: 281E    			JR   Z,LOAD00	; Print footer reached message
0570: 1815    			JR   LOADERR	; Checksums don't add up, Error out
              			
0572: 7A      	LOAD2		LD   A,D	; Retrieve line character counter	
0573: A7      			AND  A		; Are we done with this line?
0574: 280B    			JR   Z,LOAD3	; Get two more ascii characters, build a byte and checksum
0576: CDE404  			CALL GET2	; Get next two chars, convert to byte in A, checksum it
0579: 77      			LD   (HL),A	; Move converted byte in A to memory location
057A: 23      			INC  HL		; Increment pointer to next memory location	
057B: 3E2E    			LD   A,'.'	; Print out a "." for every byte loaded
057D: CF      			RST  08H	;
057E: 15      			DEC  D		; Decrement line character counter
057F: 18F1    			JR   LOAD2	; and keep loading into memory until line is complete
              			
0581: CDE404  	LOAD3		CALL GET2	; Get two chars, build byte and checksum
0584: 7B      			LD   A,E	; Check the checksum value
0585: A7      			AND  A		; Is it zero?
0586: C8      			RET  Z
              	
0587: 21EE12  	LOADERR		LD   HL,CKSUMERR  ; Get "Checksum Error" message
058A: CDAB04  			CALL PRINT	; Print Message from (HL) and terminate the load
058D: C9      			RET
              	
058E: 21FF12  	LOAD00  	LD   HL,LDETXT	; Print load complete message
0591: CDAB04  			CALL PRINT
0594: C9      			RET
              	
              	
              	
              	
              	
              	#include "LCD.asm"
              	; Graphical LCD 128 x 64 Library
              	; ------------------------------
              	; By B. Chiha May-2023
              	;
              	; This is a native Z80 Graphics library to be used with 128x64 Graphical LCD Screens
              	;
              	; There are a few variants of these LCD screens, but they must all must use the ST7920
              	; LCD Controller.  The LCD Screen that I used is the QC12864B.  This screen has two
              	; ST7921 Panels (128 x 32) stacked one above the other.  Other LCD boards might not do
              	; this.  If so the PLOT_TO_LCD function will need to be modified. (future work)
              	;
              	; These screens have DDRAM (Graphics) and CGRAM (Text) areas.  Both RAM areas can 
              	; be displayed at the same time.
              	;
              	; The Pinout for the QC12864B board is as follows:
              	;
              	; Pin	Name	Desc                    Serial  Parallel
              	; ---   ----    -------------           ------  -------------
              	; 1     VSS     Ground                  GND     GND
              	; 2     VDD     Power                   5v      5v
              	; 3     V0      Contrast                N/A     N/A
              	; 4     D/I     IR/DR (CS)              5v      A7
              	; 5     R/W     R/W (SID)               D0      RD (inverted)
              	; 6     E       Enable (SCLK)           D1      Port 7 (inverted)
              	; 7     DB0     Data                    N/A     D0
              	; 8     DB1     Data                    N/A     D1
              	; 9     DB2     Data                    N/A     D2
              	; 10    DB3     Data                    N/A     D3
              	; 11    DB4     Data                    N/A     D4
              	; 12    DB5     Data                    N/A     D5
              	; 13    DB6     Data                    N/A     D6
              	; 14    DB7     Data                    N/A     D7
              	; 15    PSB     Serial/Para             GND     5v
              	; 16    NC
              	; 17    RST     Reset                   RST     RST
              	; 18    VEE     LCD Drive               N/A     N/A
              	; 19    A       Backlight               5v/NC   5v/NC
              	; 20    K       Backlight               GND/NC  GND/NC
              	;
              	;
              	;        ORG 2000H               ;Start location
              	        
              	; Modifiable values.  Thse three values can be modified to suit your own set up
              	; LCD_IR and LCD_DR are the output ports to send an Instruction or Data value.
              	; V_DELAY_US is the minimum delay needed for a command to be processed by the
              	; LCD board.  If only some of the data is being sent, make this value larger
              	        
              	;Port 7 on TEC is connected to LCD Enable (Pin 6)
              	;A7 is connected to Register select (Pin 4).  (A7=0 for Instruction, A7=1 for Data)
0070:         	LCD_IR:	EQU 70H         ;Instruction Register
0071:         	LCD_DR:	EQU 71H         ;Data Register (A7)
0000:         	LCD_SER: EQU 00H        ;Serial Port if used
0010:         	V_DELAY_US: EQU $0010   ;Delay for 76us on your system $0004
              	
              	;Serial or Parallel communications to the LCD Screen.  Comment one of 
              	;the labels below based on the LCD connections. 00H = FALSE, 01H = TRUE
              	;COMMS_MODE: EQU 00H     ;Using PARALLEL Data connection
              	;COMMS_MODE: EQU 01H     ;Using SERIAL Data connection
              	
              	; Dont need to modify anything else below.
00F8:         	SER_BT: EQU 11111000B           ;Serial Synchronisation Byte
00B5:         	UP:     EQU $B5                 ; Up Arrow, change Z80 Mini
00B6:         	DN:     EQU $B6                 ; Down Arrow, change Z80Mini
0008:         	BKSP:   EQU 08H                 ; Back space 08H
0009:         	TAB:    EQU 09H                 ; Horizontal TAB
000A:         	LF:     EQU 0AH                 ; Line feed
000C:         	CS:     EQU 0CH                 ; Clear screen
000D:         	CR:     EQU 0DH                 ; Carriage return
0020:         	SPACE:  EQU 20H                 ; Space
008F:         	CURSOR: EQU 8FH                 ; Cursor
007F:         	DEL     EQU    7FH              ; Delete
0595: 00      	BDEL:     DB    00H
0003:         	CTRLC       .EQU    03H             ; Control "C"
              	
              	;-----------------
              	; LCD_PRINT_STRING
              	; Entry: HL
              	; String terminada com 0
              	;-----------------
0596:         	LCD_PRINT_STRING:
0596: F5      	        PUSH AF
0597: C5      		PUSH BC
0598: D5      	        PUSH DE
0599: E5      	        PUSH HL
059A: 3E00    	        LD A, 0 ; terminador da string..
059C: 545D    	        LD DE, HL
059E: CD8609  		CALL SEND_STRING_TO_GLCD
05A1: E1      	        POP HL
05A2: D1      	        POP DE
05A3: C1      	        POP BC 
05A4: F1      	        POP AF
05A5: C9      		RET
              	
              	
              	;-----------------
              	; Claer screen - reset terminal
              	;-----------------
05A6:         	LCD_CLEAR:
05A6: 3E0C    	        LD A, CS
05A8: CDB205  	        CALL LCD_PRINT_A
05AB: C9      	        RET
              	        
              	;-----------------
              	; NEW LINE
              	;-----------------
05AC:         	LCD_CR:
05AC: 3E0D    		LD A, CR
05AE: CDB205  		CALL LCD_PRINT_A
05B1: C9      		RET
              	
              	;-----------------
              	; LCD_PRINT_A
              	; Destroy only AF
              	;-----------------
05B2:         	LCD_PRINT_A:
05B2: F5      	        PUSH AF
05B3: C5      		PUSH BC
05B4: D5      	        PUSH DE
05B5: E5      	        PUSH HL
              	        
              	        ; check delete (MSBasic)
05B6: F5      	        PUSH AF
05B7: 3A9505  	        LD A, (BDEL)
05BA: B7      	        or a
05BB: FEFF    	        CP $FF
05BD: CCD605  	        call z, DELETE_CHAR
05C0: F1      	        POP AF
05C1: B7      	        or a
05C2: FE00    	        CP $0
05C4: 2008    	        jr nz, LCD_PRINT_A_OK
05C6: 3EFF    	        LD A, $FF ; delete proximo char
05C8: 329505  	        LD (BDEL), A
05CB: C3D105  	        jp LCD_PRINT_A_FIM
05CE:         	LCD_PRINT_A_OK:
05CE: CD1709  		CALL SEND_CHAR_TO_GLCD
05D1:         	LCD_PRINT_A_FIM:
05D1: E1      	        POP HL
05D2: D1      	        POP DE
05D3: C1      	        POP BC 
05D4: F1      	        POP AF
05D5: C9      		RET
              	
05D6:         	DELETE_CHAR:
05D6: F1      	        POP AF ; AF
05D7: E1      	        POP HL ; CALL
05D8: AF      	        XOR A
05D9: 329505  	        LD (BDEL), A
              	        
05DC: 3E7F    	        LD A, DEL ; delete char
05DE: C3CE05  	        JP LCD_PRINT_A_OK
              	
              	;-----------------
              	; LCD_IMAGE_128x64 - Print image 128x64, CURSOR 0,0
              	; Entry: HL
              	;-----------------
05E1:         	LCD_IMAGE_128x64: 
05E1: F5      	        PUSH AF
05E2: C5      		PUSH BC
05E3: D5      	        PUSH DE
05E4: E5      	        PUSH HL
05E5: 010000  	        LD BC, $0000
05E8: CDC809  	        CALL SET_CURSOR
05EB: 0680    	        LD B, 128
05ED: 0E40    	        LD C, 64
05EF: CD9D0A  		CALL PLOT_GRAPHIC
05F2: CD7A08  	        CALL PLOT_TO_LCD
05F5: E1      	        POP HL
05F6: D1      	        POP DE
05F7: C1      	        POP BC 
05F8: F1      	        POP AF
05F9: C9      		RET
              	
              	
              	
              	; Initialise LCD
05FA:         	INIT_LCD:
05FA: 21160B  	        LD HL, INIT_BASIC       ;POINT HL TO LCD INITIALIZE TABLE
05FD: 0606    	        LD B, 06H               ;B=4 BYTES
05FF:         	NEXT_CMD:
05FF: 7E      	        LD A, (HL)
0600: CDE60A  	        CALL LCD_INST
0603: 23      	        INC HL
0604: 10F9    	        DJNZ NEXT_CMD
0606: 118002  	        LD DE, $0280            ;1.6 ms $0140@4Mhz
0609: CDF008  	        CALL DELAY_MS
              	        
060C: CD1F06  	        CALL CLEAR_GR_LCD
              	        
              	; Clears the Graphics Memory Buffer
060F:         	CLEAR_GBUF:
060F: 2A80FB  	        LD HL, (VPORT)
0612: ED5B80FB	        LD DE, (VPORT)
0616: 13      	        INC DE
0617: AF      	        XOR A
0618: 77      	        LD (HL), A
0619: 01FF03  	        LD BC, 03FFH
061C: EDB0    	        LDIR
061E: C9      	        RET
              	        
              	; Clears the Graphics LCD Buffer
061F:         	CLEAR_GR_LCD:
061F: CD5D06  	        CALL SET_GR_MODE
0622: 0E00    	        LD C, 00H
0624:         	CLR_X:
0624: 3E80    	        LD A, 80H
0626: B1      	        OR C
0627: CDE60A  	        CALL LCD_INST
062A: 3E80    	        LD A, 80H
062C: CDE60A  	        CALL LCD_INST
062F: 3E02    	        LD A, 02H 
0631: CDFE0A  	        CALL SER_SYNC           ;Data Block Sync
0634: AF      	        XOR A                   ;Clear Byte
0635: 0610    	        LD B, 10H
0637:         	CLR_Y:
0637: CDEB0A  	        CALL LCD_DATA
063A: CDEB0A  	        CALL LCD_DATA
063D: 10F8    	        DJNZ CLR_Y
063F: 0C      	        INC C
0640: 79      	        LD A, C
0641: FE20    	        CP 20H
0643: 20DF    	        JR NZ, CLR_X        
0645: C9      	        RET
              	
              	; Clears the ASCII Text LCD
0646:         	CLEAR_TXT_LCD:
0646: CD6706  	        CALL SET_TXT_MODE
0649: 3E80    	        LD A, 80H
064B: CDE60A  	        CALL LCD_INST
064E: 3E02    	        LD A, 02H 
0650: CDFE0A  	        CALL SER_SYNC           ;Data Block Sync
0653: 0640    	        LD B, 40H
0655:         	CLR_ROWS:
0655: 3E20    	        LD A,  " "
0657: CDEB0A  	        CALL LCD_DATA
065A: 10F9    	        DJNZ CLR_ROWS
065C: C9      	        RET
              	        
              	; Set Graphics Mode
065D:         	SET_GR_MODE:
065D: 3E34    	        LD A, 34H
065F: CDE60A  	        CALL LCD_INST
0662: 3E36    	        LD A, 36H
0664: C3E60A  	        JP LCD_INST
              	        
              	; Set Text Mode
0667:         	SET_TXT_MODE:
0667: 3E30    	        LD A, 30H
0669: C3E60A  	        JP LCD_INST
              	        
              	;Draw Box
              	;Inputs: BC = X0,Y0
              	;        DE = X1,Y1
              	;Destroys: HL
066C:         	DRAW_BOX:
066C: C5      	        PUSH BC
066D:         	GTOP:
066D: CD2708  	        CALL DRAW_PIXEL
0670: 7A      	        LD A, D
0671: 04      	        INC B
0672: B8      	        CP B
0673: 30F8    	        JR NC, GTOP
0675: C1      	        POP BC
              	        
0676: C5      	        PUSH BC
0677: 4B      	        LD C, E
0678:         	GBOTTOM:
0678: CD2708  	        CALL DRAW_PIXEL
067B: 7A      	        LD A, D
067C: 04      	        INC B
067D: B8      	        CP B
067E: 30F8    	        JR NC, GBOTTOM
0680: C1      	        POP BC
              	        
0681: C5      	        PUSH BC
0682:         	GLEFT:
0682: CD2708  	        CALL DRAW_PIXEL
0685: 7B      	        LD A, E
0686: 0C      	        INC C
0687: B9      	        CP C
0688: 30F8    	        JR NC, GLEFT
068A: C1      	        POP BC
              	        
068B: C5      	        PUSH BC
068C: 42      	        LD B, D
068D:         	GRIGHT:
068D: CD2708  	        CALL DRAW_PIXEL
0690: 7B      	        LD A, E
0691: 0C      	        INC C
0692: B9      	        CP C
0693: 30F8    	        JR NC, GRIGHT
0695: C1      	        POP BC
0696: C9      	        RET
              	        
              	;Fill Box
              	;Draws vertical lines from X0,Y0 to X0,Y1 and increase X0 to X1 until X0=X1
              	;Inputs: BC = X0,Y0
              	;        DE = X1,Y1
              	;Destroys: HL
0697:         	FILL_BOX:
0697: C5      	        PUSH BC
0698:         	NEXT_PIXEL:
0698: CD2708  	        CALL DRAW_PIXEL
069B: 7B      	        LD A, E
069C: 0C      	        INC C
069D: B9      	        CP C
069E: 30F8    	        JR NC, NEXT_PIXEL
06A0: C1      	        POP BC
06A1: 7A      	        LD A, D
06A2: 04      	        INC B
06A3: B8      	        CP B
06A4: 30F1    	        JR NC, FILL_BOX
06A6: C9      	        RET
              	        
              	;Draw a line between two points using Bresenham Line Algorithm
              	; void plotLine(int x0, int y0, int x1, int y1)
              	; {
              	;    int dx =  abs(x1-x0), sx = x0<x1 ? 1 : -1;
              	;    int dy = -abs(y1-y0), sy = y0<y1 ? 1 : -1;
              	;    int err = dx+dy, e2; /* error value e_xy */
              	        
              	;    for(;;){  /* loop */
              	;       setPixel(x0,y0);
              	;       if (x0==x1 && y0==y1) break;
              	;       e2 = 2*err;
              	;       if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
              	;       if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
              	;    }
              	; }
              	;Inputs: BC = X0,Y0
              	;        DE = X1,Y1
06A7:         	DRAW_LINE:
              	;check that points are in range
06A7: 79      	        LD A, C
06A8: FE40    	        CP 40H
06AA: D0      	        RET NC
06AB: 78      	        LD A, B
06AC: FE80    	        CP 80H
06AE: D0      	        RET NC
06AF: 7B      	        LD A, E
06B0: FE40    	        CP 40H
06B2: D0      	        RET NC
06B3: 7A      	        LD A, D
06B4: FE80    	        CP 80H
06B6: D0      	        RET NC
              	        
              	;sx = x0<x1 ? 1 : -1
06B7: 2601    	        LD H, 01H
06B9: 78      	        LD A, B
06BA: BA      	        CP D
06BB: 3802    	        JR C, $ + 4
06BD: 26FF    	        LD H, 0FFH
06BF: 7C      	        LD A, H
06C0: 3286FB  	        LD (SX), A
              	        
              	;sy = y0<y1 ? 1 : -1
06C3: 2601    	        LD H, 01H
06C5: 79      	        LD A, C
06C6: BB      	        CP E
06C7: 3802    	        JR C, $ + 4
06C9: 26FF    	        LD H, 0FFH
06CB: 7C      	        LD A, H
06CC: 3287FB  	        LD (SY), A
              	        
06CF: ED5384FB	        ld (ENDPT), DE
              	        
              	;dx =  abs(x1-x0)
06D3: C5      	        PUSH BC
06D4: 6A      	        LD L, D
06D5: 2600    	        LD H, 0
06D7: 48      	        LD C, B
06D8: 0600    	        LD B, 0
06DA: B7      	        OR A
06DB: ED42    	        SBC HL, BC
06DD: CD4807  	        CALL ABSHL
06E0: 2288FB  	        LD (DX), HL
06E3: C1      	        POP BC
              	        
              	;dy = -abs(y1-y0)
06E4: C5      	        PUSH BC
06E5: 6B      	        LD L, E
06E6: 2600    	        LD H, 0
06E8: 0600    	        LD B, 0
06EA: B7      	        OR A
06EB: ED42    	        SBC HL, BC
06ED: CD4807  	        CALL ABSHL
06F0: AF      	        XOR A
06F1: 95      	        SUB L
06F2: 6F      	        LD L, A
06F3: 9F      	        SBC A, A
06F4: 94      	        SUB H
06F5: 67      	        LD H, A
06F6: 228AFB  	        LD (DY), HL
06F9: C1      	        POP BC
              	        
              	;err = dx+dy,
06FA: ED5B88FB	        LD DE, (DX)
06FE: 19      	        ADD HL, DE
06FF: 228CFB  	        LD (ERR), HL
              	        
0702:         	LINE_LOOP:
              	;setPixel(x0,y0)
0702: CD2708  	        CALL DRAW_PIXEL
              	        
              	;if (x0==x1 && y0==y1) break;
0705: 3A85FB  	        LD A, (ENDPT + 1)
0708: B8      	        CP B
0709: 2005    	        JR NZ, $ + 7
070B: 3A84FB  	        LD A, (ENDPT)
070E: B9      	        CP C
070F: C8      	        RET Z
              	        
              	;e2 = 2*err;
0710: 2A8CFB  	        LD HL, (ERR)
0713: 29      	        ADD HL, HL              ;E2
              	        
              	;if (e2 >= dy)  err += dy; x0 += sx;
0714: ED5B8AFB	        LD DE, (DY)
0718: B7      	        OR A
0719: ED52    	        SBC HL, DE
071B: 19      	        ADD HL, DE
071C: FA2D07  	        JP M, LL2
              	        
071F: E5      	        PUSH HL
0720: 2A8CFB  	        LD HL, (ERR)
0723: 19      	        ADD HL, DE
0724: 228CFB  	        LD (ERR), HL
0727: 3A86FB  	        LD A, (SX)
072A: 80      	        ADD A, B
072B: 47      	        LD B, A
072C: E1      	        POP HL
              	        
072D:         	LL2:
              	;if (e2 <= dx)  err += dx; y0 += sy;
072D: ED5B88FB	        LD DE, (DX)
0731: B7      	        OR A
0732: ED52    	        SBC HL, DE
0734: 19      	        ADD HL, DE
0735: 2803    	        JR Z, LL3
0737: F20207  	        JP P, LINE_LOOP
073A:         	LL3:
073A: 2A8CFB  	        LD HL, (ERR)
073D: 19      	        ADD HL, DE
073E: 228CFB  	        LD (ERR), HL
0741: 3A87FB  	        LD A, (SY)
0744: 81      	        ADD A, C
0745: 4F      	        LD C, A
              	        
0746: 18BA    	        JR LINE_LOOP
              	        
0748:         	ABSHL:
0748: CB7C    	        BIT 7, H
074A: C8      	        RET Z
074B: AF      	        XOR A
074C: 95      	        SUB L
074D: 6F      	        LD L, A
074E: 9F      	        SBC A, A
074F: 94      	        SUB H
0750: 67      	        LD H, A
0751: C9      	        RET
              	        
              	;Draw a circle from a midpoint to a radius using Bresenham Line Algorithm
              	; void plotCircle(int xm, int ym, int r)
              	; {
              	;    int x = -r, y = 0, err = 2-2*r, i = 0; /* II. Quadrant */
              	;    printf("Midpoint = (%X,%X), Radius = %X\n", xm, ym, r);
              	;    do {
              	;       printf("(%X,%X) ", xm-x, ym+y); /*   I. Quadrant */
              	;       printf("(%X,%X) ", xm-y, ym-x); /*  II. Quadrant */
              	;       printf("(%X,%X) ", xm+x, ym-y); /* III. Quadrant */
              	;       printf("(%X,%X) ", xm+y, ym+x); /*  IV. Quadrant */
              	;       r = err;
              	;       if (r <= y) err += ++y*2+1;           /* e_xy+e_y < 0 */
              	;       if (r > x || err > y) err += ++x*2+1; /* e_xy+e_x > 0 or no 2nd y-step */
              	;       printf("x = %d, r = %d, y = %d, err =%d\n", x, r, y, err);
              	;    } while (x < 0);
              	; }
              	;Inputs BC = xm,ym (Midpoint)
              	;       E = radius
0752:         	DRAW_CIRCLE:
              	;   int x = -r, err = 2-2*r; /* II. Quadrant */
0752: AF      	        XOR A
0753: 93      	        SUB E
0754: 3286FB  	        LD (SX), A              ;x
              	;   y = 0
0757: AF      	        XOR A
0758: 3287FB  	        LD (SY), A              ;y
              	;   RAD = r
075B: 1600    	        LD D, 00H
075D: 7B      	        LD A, E
075E: ED538EFB	        LD (RAD), DE            ;r
              	;   err = 2-2*r
0762: EB      	        EX DE, HL
0763: 29      	        ADD HL, HL
0764: EB      	        EX DE, HL
0765: 210200  	        LD HL, 0002H
0768: B7      	        OR A
0769: ED52    	        SBC HL, DE              ;err
076B: 228CFB  	        LD (ERR), HL
              	        
076E:         	CIRCLE_LOOP:
              	;       setPixel(xm-x, ym+y); /*   I. Quadrant */
076E: C5      	        PUSH BC
076F: 3A86FB  	        LD A, (SX)
0772: ED44    	        NEG
0774: 80      	        ADD A, B
0775: 47      	        LD B, A
0776: 3A87FB  	        LD A, (SY)
0779: 81      	        ADD A, C
077A: 4F      	        LD C, A
077B: CD2708  	        CALL DRAW_PIXEL
077E: C1      	        POP BC
              	;       setPixel(xm+x, ym-y); /* III. Quadrant */
077F: C5      	        PUSH BC
0780: 3A86FB  	        LD A, (SX)
0783: 80      	        ADD A, B
0784: 47      	        LD B, A
0785: 3A87FB  	        LD A, (SY)
0788: ED44    	        NEG
078A: 81      	        ADD A, C
078B: 4F      	        LD C, A
078C: CD2708  	        CALL DRAW_PIXEL
078F: C1      	        POP BC
              	;       setPixel(xm-y, ym-x); /*  II. Quadrant */
0790: C5      	        PUSH BC
0791: 3A87FB  	        LD A, (SY)
0794: ED44    	        NEG
0796: 80      	        ADD A, B
0797: 47      	        LD B, A
0798: 3A86FB  	        LD A, (SX)
079B: ED44    	        NEG
079D: 81      	        ADD A, C
079E: 4F      	        LD C, A
079F: CD2708  	        CALL DRAW_PIXEL
07A2: C1      	        POP BC
              	;       setPixel(xm+y, ym+x); /*  IV. Quadrant */
07A3: C5      	        PUSH BC
07A4: 3A87FB  	        LD A, (SY)
07A7: 80      	        ADD A, B
07A8: 47      	        LD B, A
07A9: 3A86FB  	        LD A, (SX)
07AC: 81      	        ADD A, C
07AD: 4F      	        LD C, A
07AE: CD2708  	        CALL DRAW_PIXEL
07B1: C1      	        POP BC
              	;       r = err;
07B2: 2A8CFB  	        LD HL, (ERR)
07B5: 228EFB  	        LD (RAD), HL
              	;       if (r <= y) err += ++y*2+1;           /* e_xy+e_y < 0 */
07B8: 3A87FB  	        LD A, (SY)
07BB: 5F      	        LD E, A
07BC: 1600    	        LD D, 0
07BE: B7      	        OR A
07BF: ED52    	        SBC HL, DE
07C1: 19      	        ADD HL, DE
07C2: 2803    	        JR Z, $ + 5
07C4: F2DA07  	        JP P, DS1
07C7: 3A87FB  	        LD A, (SY)
07CA: 3C      	        INC A
07CB: 3287FB  	        LD (SY), A
07CE: 87      	        ADD A, A
07CF: 3C      	        INC A
07D0: 5F      	        LD E, A
07D1: 1600    	        LD D, 0
07D3: 2A8CFB  	        LD HL, (ERR)
07D6: 19      	        ADD HL, DE
07D7: 228CFB  	        LD (ERR), HL
              	;       if (r > x || err > y) err += ++x*2+1; /* e_xy+e_x > 0 or no 2nd y-step */
07DA:         	DS1:
07DA: 2A8EFB  	        LD HL, (RAD)
07DD: 3A86FB  	        LD A, (SX)
07E0: 16FF    	        LD D, 0FFH
07E2: 5F      	        LD E, A
07E3: B7      	        OR A
07E4: ED52    	        SBC HL, DE
07E6: 19      	        ADD HL, DE
07E7: 2803    	        JR Z, $ + 5
07E9: F2FE07  	        JP P, DS2
07EC: 2A8CFB  	        LD HL, (ERR)
07EF: 3A87FB  	        LD A, (SY)
07F2: 1600    	        LD D, 0
07F4: 5F      	        LD E, A
07F5: B7      	        OR A
07F6: ED52    	        SBC HL, DE
07F8: 19      	        ADD HL, DE
07F9: 2816    	        JR Z, DS3
07FB: FA1108  	        JP M, DS3
07FE:         	DS2:
07FE: 3A86FB  	        LD A, (SX)
0801: 3C      	        INC A
0802: 3286FB  	        LD (SX), A
0805: 87      	        ADD A, A
0806: 3C      	        INC A
0807: 5F      	        LD E, A
0808: 16FF    	        LD D, 0FFH
080A: 2A8CFB  	        LD HL, (ERR)
080D: 19      	        ADD HL, DE
080E: 228CFB  	        LD (ERR), HL
              	;   } while (x < 0);
0811:         	DS3:
0811: 3A86FB  	        LD A, (SX)
0814: B7      	        OR A
0815: C26E07  	        JP NZ, CIRCLE_LOOP
0818: C9      	        RET
              	        
              	;Fill Circle
              	;Fills a circle by increasing radius until Radius = Original Radius E
              	;Inputs BC = xm,ym (Midpoint)
              	;       E = radius
0819:         	FILL_CIRCLE:
0819: 1601    	        LD D, 01H               ;Start radius
081B:         	NEXT_CIRCLE:
081B: D5      	        PUSH DE                 ;Save end Radius
081C: 5A      	        LD E, D
081D: CD5207  	        CALL DRAW_CIRCLE
0820: D1      	        POP DE                  ;Restore Radius
0821: 7B      	        LD A, E
0822: 14      	        INC D
0823: BA      	        CP D
0824: 30F5    	        JR NC, NEXT_CIRCLE
0826: C9      	        RET
              	        
              	;Draw Pixel in position X Y
              	;Input B = column/X (0-127), C = row/Y (0-63)
              	;destroys HL
0827:         	DRAW_PIXEL:
0827: 79      	        LD A, C
0828: FE40    	        CP 40H
082A: D0      	        RET NC
082B: 78      	        LD A, B
082C: FE80    	        CP 80H
082E: D0      	        RET NC
              	        
082F: D5      	        PUSH DE
0830: CD5B08  	        CALL SET_GBUF
              	
0833: 7A      	        LD A, D
0834: B6      	        OR (HL)
0835: 77      	        LD (HL), A
0836: D1      	        POP DE
0837: C9      	        RET
              	
              	;Clear Pixel in position X Y
              	;Input B = column/X (0-127), C = row/Y (0-63)
              	;destroys HL
0838:         	CLEAR_PIXEL:
0838: 79      	        LD A, C
0839: FE40    	        CP 40H
083B: D0      	        RET NC
083C: 78      	        LD A, B
083D: FE80    	        CP 80H
083F: D0      	        RET NC
              	        
0840: D5      	        PUSH DE
0841: CD5B08  	        CALL SET_GBUF
              	
0844: 7A      	        LD A, D
0845: 2F      	        CPL
0846: A6      	        AND (HL)
0847: 77      	        LD (HL), A
0848: D1      	        POP DE
0849: C9      	        RET
              	
              	;Flip Pixel in position X Y
              	;Input B = column/X (0-127), C = row/Y (0-63)
              	;destroys HL
084A:         	FLIP_PIXEL:
084A: 79      	        LD A, C
084B: FE40    	        CP 40H
084D: D0      	        RET NC
084E: 78      	        LD A, B
084F: FE80    	        CP 80H
0851: D0      	        RET NC
              	        
0852: D5      	        PUSH DE
0853: CD5B08  	        CALL SET_GBUF
              	
0856: 7A      	        LD A, D
0857: AE      	        XOR (HL)
0858: 77      	        LD (HL), A
0859: D1      	        POP DE
085A: C9      	        RET
              	
              	;Helper routine to set HL to the correct GBUF address given X and Y
              	;Input B = column/X (0-127), C = row/Y (0-63)
              	;Output HL = address of GBUF X,Y byte, D = Byte with Pixel Bit Set
              	;Destroys E
085B:         	SET_GBUF:
085B: 69      	        LD L, C
085C: 2600    	        LD H, 00H
085E: 29      	        ADD HL, HL
085F: 29      	        ADD HL, HL
0860: 29      	        ADD HL, HL
0861: 29      	        ADD HL, HL
0862: ED5B80FB	        LD DE, (VPORT)
0866: 1B      	        DEC DE
0867: 19      	        ADD HL, DE
              	        
0868: 78      	        LD A, B
0869: 1608    	        LD D, 08H
086B:         	BASE_COL:
086B: 23      	        INC HL
086C: 92      	        SUB D
086D: 30FC    	        JR NC, BASE_COL
              	        
086F: 2F      	        CPL
0870: 1601    	        LD D, 01H
0872: B7      	        OR A
0873: C8      	        RET Z
0874:         	SHIFT_BIT:
0874: CB22    	        SLA D
0876: 3D      	        DEC A
0877: 20FB    	        JR NZ, SHIFT_BIT
0879: C9      	        RET
              	
              	;Main draw routine.  Moves GBUF to LCD and clears buffer
              	;Destroys all
087A:         	PLOT_TO_LCD:
087A: 2A80FB  	        LD HL, (VPORT)
087D: 0E80    	        LD C, 80H
087F:         	PLOT_ROW:
087F: 79      	        LD A, C
0880: E69F    	        AND 9FH
0882: CDE60A  	        CALL LCD_INST           ;Vertical
0885: 3E80    	        LD A, 80H
0887: CB69    	        BIT 5, C
0889: 2802    	        JR Z, $ + 4
088B: F608    	        OR 08H
088D: CDE60A  	        CALL LCD_INST           ;Horizontal
0890: 3E02    	        LD A, 02H 
0892: CDFE0A  	        CALL SER_SYNC           ;Data Block Sync
0895: 0610    	        LD B, 10H               ;send eight double bytes (16 bytes)
0897:         	PLOT_COLUMN:
0897: 7E      	        LD A, (HL)
0898: CDEB0A  	        CALL LCD_DATA
089B: 3A90FB  	        LD A, (CLRBUF)
089E: B7      	        OR A
089F: 2802    	        JR Z, $ + 4
08A1: 3600    	        LD (HL), 00H            ;Clear Buffer if CLRBUF is non zero
08A3: 23      	        INC HL
08A4: 10F1    	        DJNZ PLOT_COLUMN
08A6: 0C      	        INC C
08A7: CB71    	        BIT 6, C                ;Is Row = 64?
08A9: 28D4    	        JR Z, PLOT_ROW
08AB: C9      	        RET
              	        
              	; Print ASCII text on a given row
              	; Inputs: A = 0 to 3 Row Number
              	;         DB "String" on next line, terminate with 0
              	; EG:
              	;   LD A,2
              	;   CALL PRINT_STRING
              	;   DB "This Text",0
              	;
08AC:         	PRINT_STRING:
08AC: 47      	        LD B, A
08AD: CD6706  	        CALL SET_TXT_MODE
08B0: 21120B  	        LD HL, ROWS
08B3: 78      	        LD A, B
08B4: 85      	        ADD A, L
08B5: 3001    	        JR NC, $ + 3
08B7: 24      	        INC H
08B8: 6F      	        LD L, A
08B9: 7E      	        LD A, (HL)
08BA: CDE60A  	        CALL LCD_INST
08BD: 3E02    	        LD A, 02H 
08BF: CDFE0A  	        CALL SER_SYNC           ;Data Block Sync
08C2: E1      	        POP HL
08C3:         	DS_LOOP:
08C3: 7E      	        LD A, (HL)
08C4: 23      	        INC HL
08C5: B7      	        OR A
08C6: 2805    	        JR Z, DS_EXIT
08C8: CDEB0A  	        CALL LCD_DATA
08CB: 18F6    	        JR DS_LOOP
08CD:         	DS_EXIT:
08CD: E9      	        JP (HL)
              	        
              	;Print Characters at a position X,Y
              	;Eventhough there are 16 columns, only every second column can be written
              	;to and two characters are to be printed.  IE: if you want to print one
              	;character in column 2, then you must set B=0 and print " x", putting
              	;a space before the chracter.
              	;Input B = column/X (0-7), C = row/Y (0-3)
              	;      HL = Start address of text to display, terminate with 0
08CE:         	PRINT_CHARS:
08CE: CD6706  	        CALL SET_TXT_MODE
08D1: 11120B  	        LD DE, ROWS
08D4: 79      	        LD A, C
08D5: 83      	        ADD A, E
08D6: 3001    	        JR NC, $ + 3
08D8: 14      	        INC D
08D9: 5F      	        LD E, A
08DA: 1A      	        LD A, (DE)
08DB: 80      	        ADD A, B
08DC: CDE60A  	        CALL LCD_INST
08DF: 3E02    	        LD A, 02H 
08E1: CDFE0A  	        CALL SER_SYNC           ;Data Block Sync
08E4:         	PC_LOOP:
08E4: 7E      	        LD A, (HL)
08E5: 23      	        INC HL
08E6: B7      	        OR A
08E7: C8      	        RET Z
08E8: CDEB0A  	        CALL LCD_DATA
08EB: 18F7    	        JR PC_LOOP
              	        
              	; Delay for LCD write
08ED:         	DELAY_US:
08ED: 111000  	        LD DE, V_DELAY_US       ;DELAY BETWEEN, was 0010H
08F0:         	DELAY_MS:
08F0: 1B      	        DEC DE                  ;EACH BYTE
08F1: 7A      	        LD A, D                 ;AS PER
08F2: B3      	        OR E                    ;LCD MANUFACTER'S
08F3: 20FB    	        JR NZ, DELAY_MS         ;INSTRUCTIONS
08F5: C9      	        RET
              	        
              	; Set Buffer Clearing after outputting to LCD
              	; Input: A = 0 Buffer to be cleared, A <> 0 Buffer kept
08F6:         	SET_BUF_CLEAR:
08F6: 3EFF    	        LD A, 0FFH
08F8: 3290FB  	        LD (CLRBUF), A
08FB: C30F06  	        JP CLEAR_GBUF
              	        
08FE:         	SET_BUF_NO_CLEAR:
08FE: AF      	        XOR A
08FF: 3290FB  	        LD (CLRBUF), A
0902: C9      	        RET
              	
              	;Initialise the GLCD Terminal
              	;Clears the GBUF, sets cursor to top left and displays cursor.
              	;This must be called prior to any Terminal routine.  This routine
              	;will as call INIT_LCD.
0903:         	INIT_TERMINAL:
0903: 2180F7  	        LD HL,TGBUF              ;Reset VPORT and BUFF_TOP to TGBUF
0906: 2280FB  	        LD (VPORT),HL           ;to GBUF
0909: 2282FB  	        LD (TBUF),HL
090C: CDFA05  	        CALL INIT_LCD           ;Clear LCD GBUF
090F: 010000  	        LD BC,0000H
0912: CDC809  	        CALL SET_CURSOR         ;Move cursor to top left
0915: 185F    	        JR DRAW_CURSOR          ;Draw Cursor and exit
              	
              	;Send or handle ASCII characters to the GLCD screen.  This routines displays
              	;ASCII charcters to the GLCD screen and handles some special control characters
              	;It also handles srolling history of 10 lines.  Characters are drawn at the 
              	;current cursor position.  Cursor increments if characger is drawn.
              	;       CR / 0DH = will move the cursor down and reset it column
              	;       LF / 0AH = is ignored
              	;       FF / 0CH = clears the terminal (restarts)
              	;       BS / 08H = will delete the character at the cursor and move cursor back one
              	;       HT / 09H = will TAB 4 spaces
              	;       UP / 05H = will scroll up one line if any
              	;       DN / 06H = will scroll down one line if any
              	;Input: A = ASCII charcter to send to the GLCD screen.
              	;       A = 0  cursor drawn only
0917:         	SEND_CHAR_TO_GLCD:
              	        ;Check for special characters
0917: B7      	        OR A                    ;Zero?
0918: 285C    	        JR Z,DRAW_CURSOR
091A:         	DO_SCRL_UP:
091A: FEB5    	        CP UP                   ;Up Arrow
091C: 2007    	        JR NZ,DO_SCRL_DN
091E: AF      	        XOR A
091F: CD340A  	        CALL MOVE_VPORT
0922: C37A08  	        JP PLOT_TO_LCD
0925:         	DO_SCRL_DN:
0925: FEB6    	        CP DN                   ;Down Arrow
0927: 2004    	        JR NZ,DO_CR
0929: 3E01    	        LD A,1
092B: 18F2    	        JR $-12                 ;Move VPORT above
092D:         	DO_CR:
              	        ;Key is now a drawing character, reset VPORT first
092D: 2180F7  	        LD HL,TGBUF
0930: 2280FB  	        LD (VPORT),HL
0933: FE0A    	        CP LF      ;LF
0935: C8      	        RET Z
0936: FE0D    	        CP CR      ;CR
0938: 200D    	        JR NZ,DO_FF
093A: 3E20    	        LD A,SPACE              ;Clear Cursor
093C: CD8A0A  	        CALL DRAW_GRAPHIC
093F: CDE609  	        CALL INC_ROW
0942: 3293FB  	        LD (CURSOR_YS),A        ;Save start row
0945: 182F    	        JR DRAW_CURSOR
0947:         	DO_FF:
0947: FE0C    	        CP CS                   ;Form Feed / Clear Screen
0949: 28B8    	        JR Z,INIT_TERMINAL      ;Reset All.
094B:         	DO_BS:
094B: FE7F    	        CP DEL                 ;Backspace BKSP
094D: 200A    	        JR NZ,DO_TAB
094F: 3E20    	        LD A,SPACE              ;Space
0951: CD8A0A  	        CALL DRAW_GRAPHIC
0954: CD540A  	        CALL DEC_CURSOR
0957: 181D    	        JR DRAW_CURSOR
0959:         	DO_TAB:
0959: FE09    	        CP TAB                  ;Horizontal Tab
095B: 2013    	        JR NZ,DO_CHAR
095D: 3E20    	        LD A,SPACE              ;Space
095F: CD8A0A  	        CALL DRAW_GRAPHIC
0962: CDD909  	        CALL INC_CURSOR
0965: CDD909  	        CALL INC_CURSOR
0968: CDD909  	        CALL INC_CURSOR
096B: CDD909  	        CALL INC_CURSOR
096E: 1806    	        JR DRAW_CURSOR
0970:         	DO_CHAR:
0970: CD8A0A  	        CALL DRAW_GRAPHIC
0973: CDD909  	        CALL INC_CURSOR
0976:         	DRAW_CURSOR:
0976: 3A94FB  	        LD A,(CURSOR_ON)
0979: B7      	        OR A
097A: 3E20    	        LD A,SPACE              ;Space
097C: 2002    	        JR NZ,$+4               ;Skip cursor draw
097E: 3E8F    	        LD A,CURSOR             ;Cursor
0980: CD8A0A  	        CALL DRAW_GRAPHIC
0983: C37A08  	        JP PLOT_TO_LCD          ;Plot screen and exit
              	
              	
              	
              	;Send a string of characters to the GLCD.  Prints a string pointed 
              	;by DE.  It stops printing and returns when either a CR is printed or
              	;when the next byte is the same as what is in register A
              	;Inputs: DE = address of string to print
              	;        A = character to stop printing.
              	;Destroy: All
0986:         	SEND_STRING_TO_GLCD:
0986: 47      	        LD B,A                  ;Save cp in B
0987:         	PS1:
0987: 1A      	        LD A,(DE)               ;Get character
0988: 13      	        INC DE                  ;Move pointer
0989: B8      	        CP B                    ;Same as B?
098A: 28EA    	        JR Z,DRAW_CURSOR        ;Yes exit and plot LCD screen
098C: FE0D    	        CP CR                   ;Is it a CR?
098E: 289D    	        JR Z,DO_CR              ;Yes do a CR and plot LCD screen and exit
0990: FE0C    	        CP CS                   ;Is it a FF?
0992: 28B3    	        JR Z,DO_FF              ;Yes do a Form Feed and plot LCD screen and exit
0994: D9      	        EXX                     ;Save bulk registers
0995: CD8A0A  	        CALL DRAW_GRAPHIC       ;Draw the character
0998: CDD909  	        CALL INC_CURSOR         ;Move cursor by one
099B: D9      	        EXX                     ;Restore bulk registers
099C: 18E9    	        JR PS1                  ;Repeat for next character
099E: C9      	        RET     
              	
              	;Display the register A in ASCII on the GLCD
              	;Input: A = value to convert and display
099F:         	SEND_A_TO_GLCD:
099F: CDA409  	        CALL DRAW_A             ;Do the conversion
09A2: 18D2    	        JR DRAW_CURSOR          ;exit and plot LCD screen
09A4:         	DRAW_A:
09A4: F5      	        PUSH AF                 ;Save AF
09A5: 0F      	        RRCA                    ;move high
09A6: 0F      	        RRCA                    ;nibble to low nibble
09A7: 0F      	        RRCA
09A8: 0F      	        RRCA
09A9: CDAD09  	        CALL NIBBLE_TO_GLCD     ;Convert and display
09AC: F1      	        POP AF                  ;Restore AF
09AD:         	NIBBLE_TO_GLCD:
09AD: E60F    	        AND 0FH                 ;mask out high nibble
09AF: C690    	        ADD A,90H               ;convert to 
09B1: 27      	        DAA                     ;ASCII
09B2: CE40    	        ADC A,40H               ;using this
09B4: 27      	        DAA                     ;amazing routine
09B5: CD8A0A  	        CALL DRAW_GRAPHIC       ;Draw the character
09B8: CDD909  	        CALL INC_CURSOR         ;Move cursor by one
09BB: C9      	        RET
              	
              	;Display the register HL in ASCII on the GLCD
              	;Input: HL = value to convert and display
09BC:         	SEND_HL_TO_GLCD:
09BC: E5      	        PUSH HL                 ;Save HL
09BD: 7C      	        LD A,H                  ;get H
09BE: CDA409  	        CALL DRAW_A             ;Do the conversion
09C1: E1      	        POP HL
09C2: 7D      	        LD A,L                  ;get L
09C3: CDA409  	        CALL DRAW_A             ;Do the conversion
09C6: 18AE    	        JR DRAW_CURSOR          ;exit and plot LCD screen
              	
              	;Set the Graphic cursor position
              	;Inputs: BC = X,Y where X = 0..127, Y = 0..63
              	;Ignores update if one of the X,Y values are out of range
              	;Destroys: A
09C8:         	SET_CURSOR:
              	        ;Check range. Exit if X,Y out of range
09C8: 79      	        LD A, C
09C9: FE40    	        CP 40H
09CB: D0      	        RET NC
09CC: 78      	        LD A, B
09CD: FE80    	        CP 80H
09CF: D0      	        RET NC
              	        ;Set Cursor and initial start row
09D0: ED4391FB	        LD (CURSOR_XY),BC       ;Save cursor
09D4: 79      	        LD A,C
09D5: 3293FB  	        LD (CURSOR_YS),A        ;And initial Y Start
09D8: C9      	        RET
              	
              	;Increment the cursor by one font character
              	;A Font Character is 6x6 Pixels.  Move column 6 across until it can't then reset
              	;column back to 0 and move 6 down.
              	;If can't go down any further then keep on last row but move column back to 0
              	;Font Characters maximum 20 across and 10 down
              	;Output: Carry Set = No screen overflow
              	;Destroys: A
09D9:         	INC_CURSOR:
09D9: 3A92FB  	        LD A,(CURSOR_X)         ;Get X
09DC: C606    	        ADD A,6                 ;Add 6
09DE: FE7E    	        CP 126                  ;Is it >= 126?
09E0: 3004    	        JR NC,INC_ROW           ;Yes, reset column and increment row
09E2: 3292FB  	        LD (CURSOR_X),A         ;Save new column
09E5: C9      	        RET
09E6:         	INC_ROW:
09E6: AF      	        XOR A
09E7: 3292FB  	        LD (CURSOR_X),A         ;reset column to 0
09EA: 3A91FB  	        LD A,(CURSOR_Y)         ;get row
09ED: C606    	        ADD A,6                 ;Add 6
09EF: FE3C    	        CP 60                   ;Is it >= 60
09F1: 3807    	        JR C,SAVE_ROW           ;No, save new row
09F3: F5      	        PUSH AF
09F4: CDFE09  	        CALL SHIFT_BUFFER       ;Shift buffer up one row
09F7: F1      	        POP AF
09F8: D606    	        SUB 6                   ;overflow, just leave the same
09FA:         	SAVE_ROW:
09FA: 3291FB  	        LD (CURSOR_Y),A         ;Save new row
09FD: C9      	        RET
              	
              	;Shift the graphics buffer (GBUF) into the scroll buffer (SBUF) by
              	;one row (6 lines).  Move the top buffer address to the new top of 
              	;the scroll buffer
09FE:         	SHIFT_BUFFER:
              	        ;Check if anymore buffer left
09FE: 2A82FB  	        LD HL,(TBUF)        ;Get top buffer address
0A01: 1100F0  	        LD DE,TGBUF-SBUF    ;Get scroll buffer address
0A04: B7      	        OR A                ;Clear carry
0A05: ED52    	        SBC HL,DE           ;TBUF-SBUF
0A07: 2809    	        JR Z,SKIP_TBUF
0A09: 19      	        ADD HL,DE           ;restore HL
0A0A: 116000  	        LD DE,16*6          ;Six pixel rows
0A0D: ED52    	        SBC HL,DE           ;Move TBUF down by 6 rows
0A0F: 2282FB  	        LD (TBUF),HL        ;Save new TBUF
0A12:         	SKIP_TBUF:
0A12: 2160F0  	        LD HL,TGBUF-SBUF+(16*6) ;Top of scroll buffer less one row
0A15: 1100F0  	        LD DE,TGBUF-SBUF    ;Top of scroll buffer
0A18: 01E00A  	        LD BC,16*6*29       ;19 rows (change to 20 lines 19 to 29 (+10)) Z80 Mini
0A1B: EDB0    	        LDIR
0A1D: 21E0FA  	        LD HL,TGBUF+0360H   ;clear last row (9*16)
0A20: 11E1FA  	        LD DE,TGBUF+0361H
0A23: 015F00  	        LD BC,5FH
0A26: AF      	        XOR A
0A27: 77      	        LD (HL),A
0A28: EDB0    	        LDIR
              	        ;Move Y Start up one row
0A2A: 3A93FB  	        LD A,(CURSOR_YS)    ;Get Y Start row
0A2D: D606    	        SUB 6
0A2F: D8      	        RET C               ;Ignore if less than zero
0A30: 3293FB  	        LD (CURSOR_YS),A    
0A33: C9      	        RET
              	
              	;Move the VPORT vertically between TBUF and end of GBUB.  VPORT will be 
              	;shifted by a standard termial row of 6 lines.
              	;input: A = 0 shift up else shift down
0A34:         	MOVE_VPORT:
0A34: 2A80FB  	        LD HL,(VPORT)       ;get viewport
0A37: EB      	        EX DE,HL
0A38: B7      	        OR A                ;check move
0A39: 200E    	        JR NZ,MOVE_DOWN     ;shift down
0A3B:         	MOVE_UP:
0A3B: 2A82FB  	        LD HL,(TBUF)        ;get top of buffer
0A3E: ED52    	        SBC HL,DE           ;
0A40: C8      	        RET Z               ;if the same, then at top already
0A41: 21A0FF  	        LD HL,0-60H         ;one row up 60
0A44:         	SAVE_VPORT:
0A44: 19      	        ADD HL,DE           ;get new VPORT value
0A45: 2280FB  	        LD (VPORT),HL
0A48: C9      	        RET
0A49:         	MOVE_DOWN:
0A49: 2180F7  	        LD HL,TGBUF         ;get top of graphics buffer
0A4C: ED52    	        SBC HL,DE           ;
0A4E: C8      	        RET Z               ;if the same, then at top already
0A4F: 216000  	        LD HL,60H           ;one row down 60
0A52: 18F0    	        JR SAVE_VPORT
              	
              	;Decrement the cursor by one font character up to the current row start
              	;Used to help with Backspace character or left arrow?
              	;Destroys: A
0A54:         	DEC_CURSOR:
0A54: 3A92FB  	        LD A,(CURSOR_X)         ;Get X
0A57: D606    	        SUB 6                   ;subract 6
0A59:         	SAVE_COL:
0A59: 3292FB  	        LD (CURSOR_X),A         ;Save new column
              	        ;if < 0 then just make 0 or 20 depending on Y Start
0A5C: D0      	        RET NC
0A5D: C5      	        PUSH BC
0A5E: 3A93FB  	        LD A,(CURSOR_YS)        ;Get Y Start
0A61: 47      	        LD B,A
0A62: 3A91FB  	        LD A,(CURSOR_Y)         ;Get Y
0A65: 90      	        SUB B
0A66: C1      	        POP BC
0A67: 3E00    	        LD A,0                  ;reset to 0
0A69: 28EE    	        JR Z,SAVE_COL
0A6B: 3E78    	        LD A,6*20               ;last column 20
0A6D: 3292FB  	        LD (CURSOR_X),A         ;Save new column
0A70: 3A91FB  	        LD A,(CURSOR_Y)
0A73: D606    	        SUB 6                   ;move row one line up
0A75: 3291FB  	        LD (CURSOR_Y),A         ;Save new row
0A78: C9      	        RET
              	
              	;Get cursor position
              	;Outputs: BC = X,Y where X = 0..127, Y = 0..63
0A79:         	GET_CURSOR:
0A79: ED4B91FB	        LD BC,(CURSOR_XY)
0A7D: C9      	        RET
              	
              	;Display Cursor
              	;Input: A = 0, Turn cursor on, A = non zero, Turn cursor off
              	;Default is Cursor ON
0A7E:         	DISPLAY_CURSOR:
0A7E: 3294FB  	        LD (CURSOR_ON),A
0A81: C9      	        RET
              	
              	;Inverse Graphic Drawing
              	;Initial state is normal.  Calling this routine will TOGGLE the inverse drawing flag
              	;Destroys: A
0A82:         	INV_GRAPHIC:
0A82: 3A95FB  	        LD A,(INVERSE)
0A85: 2F      	        CPL                 ;flip bits
0A86: 3295FB  	        LD (INVERSE),A
0A89: C9      	        RET
              	
              	;Draw Graphic at the current cursor.  Draw either an ASCII character or
              	;a custom sprite/picture
              	;Input: A = ASCII number or 
              	;    if A=0 Then 
              	;       HL = Address of graphic data
              	;       B = width of graphic in pixels (1-128)
              	;       C = height of graphic in pixels (1-64)
              	;Destroys: All
0A8A:         	DRAW_GRAPHIC:
0A8A: B7      	        OR A                ;is A=0
0A8B: 2810    	        JR Z,PLOT_GRAPHIC   ;yes, use data pointing to HL
              	        ;Use internal font table and index it to value in A
0A8D: 3D      	        DEC A               ;fix for A = 0..255
0A8E: 2600    	        LD H,0
0A90: 6F      	        LD L,A
0A91: 29      	        ADD HL,HL           ;Multipy A by 2
0A92: 54      	        LD D,H
0A93: 5D      	        LD E,L              ;Save in DE
0A94: 29      	        ADD HL,HL           ;Multipy A by 4
0A95: 19      	        ADD HL,DE           ;Multiply by 6
0A96: 11200B  	        LD DE,FONT_DATA     ;Font Table
0A99: 19      	        ADD HL,DE           ;Add index (A*8) to HL
0A9A: 010606  	        LD BC,0606H         ;Six pixels across, Six pixels down
0A9D:         	PLOT_GRAPHIC:
0A9D: 50      	        LD D,B              ;D=Column pixel count
0A9E: 7A      	        LD A,D
0A9F: 3296FB  	        LD (PIXEL_X),A      ;Save original pixel length
0AA2: 59      	        LD E,C              ;E=Row pixel count
0AA3: ED4B91FB	        LD BC,(CURSOR_XY)   ;Get graphics cursor position
0AA7:         	PLOT_BYTE:
0AA7: 7A      	        LD A,D              ;Get column bit count
0AA8: D608    	        SUB 8
0AAA: 57      	        LD D,A
0AAB: D5      	        PUSH DE        
0AAC: 1608    	        LD D,8
0AAE: 5E      	        LD E,(HL)           ;get pixel data
0AAF: 3009    	        JR NC,INV_BIT
0AB1: 82      	        ADD A,D             ;Restore column bit count
0AB2: 57      	        LD D,A
0AB3: 7A      	        LD A,D
              	        ;D = Rotate adjust count
0AB4: CB0B    	        RRC E               ;rotate it to get first bit in bit 7
0AB6: 15      	        DEC D
0AB7: 20FB    	        JR NZ,$-3
0AB9: 57      	        LD D,A              ;reset D to actual bit count
0ABA:         	INV_BIT:
0ABA: 3E00    	        LD A, 0      ;check inverse flag
0ABC: AB      	        XOR E               ;flip bits
0ABD: 5F      	        LD E,A              ;save new data
0ABE:         	PLOT_BIT:
0ABE: CB03    	        RLC E
0AC0: E5      	        PUSH HL
0AC1: 3005    	        JR NC,REMOVE_PIXEL
0AC3: CD2708  	        CALL DRAW_PIXEL
0AC6: 1803    	        JR $+5
0AC8:         	REMOVE_PIXEL:
0AC8: CD3808  	        CALL CLEAR_PIXEL
0ACB: E1      	        POP HL
0ACC: 04      	        INC B               ;move X to the right by one
0ACD: 15      	        DEC D
0ACE: 20EE    	        JR NZ,PLOT_BIT
              	        ;All bits are plotted check if D <= 0
0AD0: 23      	        INC HL              ;move to next pixel byte
0AD1: D1      	        POP DE              ;restore Column/Row bit count
0AD2: 7A      	        LD A,D
0AD3: B7      	        OR A                ;check for zero or lessor
0AD4: 2803    	        JR Z,$+5
0AD6: F2A70A  	        JP P,PLOT_BYTE      ;its greater or zero, do next byte
              	        ;Move down a row and set column to the start
0AD9: 1D      	        DEC E               ;move column pixel count down by one
0ADA: C8      	        RET Z               ;if its zero no more to do, just exit
0ADB: 0C      	        INC C               ;move down a row
0ADC: 3A92FB  	        LD A,(CURSOR_X)
0ADF: 47      	        LD B,A              ;reset column
0AE0: 3A96FB  	        LD A,(PIXEL_X)
0AE3: 57      	        LD D,A              ;reset pixel length per row
0AE4: 18C1    	        JR PLOT_BYTE
              	
              	;Serial/Paralled Communication routines
              	;Send information to the LCD screen via SERIAL or PARALLEL connection.  Parallel is straight
              	;forward.  Just send the Byte in the Accumilator to the relevante Instruction or Data port.
              	;Then call a delay for that byte to be processed by the LCD.
              	;For Serial communication, three Bytes are to be sent using the SPI protocol.
              	;The first byte is a synchronise/configuration byte.  This sets
              	;the Data/Instruction register bit.  The second and third bytes is the actual data to send.
              	;It is split into two bytes with 4 bits of data set at the upper nibble and zeros for the rest.
              	;A maximum of 256 Bytes of Data information can be send with only one Synchronise Byte.  The
              	;LCD Data routine doesn't send the sync byte.  It needs to be done prior by calling SER_SYNC first.
              	;
              	;The two routines to use are:
              	;LCD_DATA, Sends Data information.  Along with SER_SYNC called prior and
              	;LCD_INST, Sends Instruction information
              	
              	;Send to LCD Instruction register
              	;If serial connection it will send the byte with a synchronise byte.
              	;If parallel byte is sent to the Instruction register port and a delay is triggered
              	;Input: A = Byte to send
0AE6:         	LCD_INST:
              	;IF COMMS_MODE
              	;        PUSH AF
              	;        XOR A
              	;        CALL SER_SYNC
              	;        POP AF
              	;        JP SER_BYTE
              	;ELSE
0AE6: D370    	        OUT (LCD_IR), A
0AE8: C3ED08  	        JP DELAY_US
              	;ENDIF
              	
              	;Send to LCD Data register
              	;If serial connection it will send the byte with no synchronise byte.  The
              	;synchronise byte is to be sent separately.
              	;If parallel byte is sent to the Data register port and a delay is triggered
              	;Input: A = Byte to send
0AEB:         	LCD_DATA:
              	;IF COMMS_MODE
              	;        JP SER_BYTE
              	;ELSE
0AEB: D371    	        OUT (LCD_DR), A
0AED: C3ED08  	        JP DELAY_US
              	;ENDIF
              	
              	;Serial Byte Send
              	;Send a Byte in two halfs,  First half is the upper nibble with 4 zeros and second
              	;byte is the lower nibble shifted to the upper nibble with 4 zeros.
              	;   EG: if Byte to send is 10010110B, then
              	;   BYTE 1 = 10010000b and
              	;   BYTE 2 = 01100000b
              	;Input: A = byte to send
0AF0:         	SER_BYTE:
0AF0: F5      	        PUSH AF
0AF1: CDF90A  	        CALL SEND_PART
0AF4: F1      	        POP AF
0AF5: 07      	        RLCA
0AF6: 07      	        RLCA
0AF7: 07      	        RLCA
0AF8: 07      	        RLCA
0AF9:         	SEND_PART:
0AF9: E6F0    	        AND 0F0H                ;Mask out lower nibble
0AFB: C3FF0A  	        JP SPI_WR               ;Send First Half of Command/Data byte
              	
              	;Serial Synchronise Byte
              	;Send 5 consecutive '1's then '000's for instruction or '010' for data.
              	;Input: A = 0x00 for instruction register and 0x02 if data register
0AFE:         	SER_SYNC:
              	;IF COMMS_MODE
              	;        OR SER_BT
              	;ELSE
0AFE: C9      	        RET
              	;ENDIF
              	
              	;SPI Write Routine.
              	;Send a byte to the LCD using the SPI protocol
              	;Inputs: A = Byte to be sent
0AFF:         	SPI_WR:
0AFF: C5      	        PUSH BC
0B00: 0608    	        LD B, 08H       ;Eight Bits to send
0B02: 4F      	        LD C, A         ;SPI Byte
0B03: AF      	        XOR A           ;Clear A
0B04:         	CLK_LOOP:
0B04: CB01    	        RLC C           ;Put Bit 7 in Carry Flag
0B06: 8F      	        ADC A,A         ;Set Bit 0 with Carry Flag
0B07: F602    	        OR 02H          ;Set SCLK high (pulse clock)
0B09: D300    	        OUT (LCD_SER),A ;Output to LCD
0B0B: AF      	        XOR A           ;Set SCLK low (and SID)
0B0C: D300    	        OUT (LCD_SER),A ;Output to LCD
0B0E: 10F4    	        DJNZ CLK_LOOP   ;Get next Bit
0B10: C1      	        POP BC
0B11: C9      	        RET
              	
              	; Contstants
0B12: 80908898	ROWS:   DB      80H,90H,88H,98H ;Text Row start position
              	        
0B16:         	INIT_BASIC:
0B16: 30      	        DB  30H
0B17: 20      	        DB  20H
0B18: 30      	        DB  30H
0B19: 0C      	        DB  0CH
0B1A: 01      	        DB  01H
0B1B: 02      	        DB  02H
              	        ;fim
              	
              	
              	
              	
0B1C: 30      	        DB      30H             ;8 Bit interface, basic instruction
0B1D: 0C      	        DB      0CH             ;display on, cursor & blink off
0B1E: 06      	        DB      06H             ;cursor move to right ,no shift
0B1F: 01      	        DB      01H             ;clear RAM
              	
              	;General Graphic Data
              	;Byte 1 = X pixel length, Byte 2 = Y pixel length
              	;Byte n = Pixel data where bits represent pixels.  Read from LSB
0B20:         	FONT_DATA:
              	        ;001
0B20: 1E      	        DB 00011110b   ;  ####
0B21: 21      	        DB 00100001b   ; #    #
0B22: 21      	        DB 00100001b   ; #    #
0B23: 21      	        DB 00100001b   ; #    #
0B24: 21      	        DB 00100001b   ; #    #
0B25: 1E      	        DB 00011110b   ;  ####
              	        ;002
0B26: 1E      	        DB 00011110b   ;  ####
0B27: 3F      	        DB 00111111b   ; ######
0B28: 3F      	        DB 00111111b   ; ######
0B29: 3F      	        DB 00111111b   ; ######
0B2A: 3F      	        DB 00111111b   ; ######
0B2B: 1E      	        DB 00011110b   ;  ####
              	        ;003 Up Arrow
0B2C: 0C      	        DB 00001100b   ;   ##
0B2D: 1E      	        DB 00011110b   ;  ####
0B2E: 3F      	        DB 00111111b   ; ######
0B2F: 0C      	        DB 00001100b   ;   ##
0B30: 0C      	        DB 00001100b   ;   ##
0B31: 0C      	        DB 00001100b   ;   ##
              	        ;004 Down Arrow
0B32: 0C      	        DB 00001100b   ;   ##
0B33: 0C      	        DB 00001100b   ;   ##
0B34: 0C      	        DB 00001100b   ;   ##
0B35: 3F      	        DB 00111111b   ; ######
0B36: 1E      	        DB 00011110b   ;  ####
0B37: 0C      	        DB 00001100b   ;   ##
              	        ;005 Left Arrow
0B38: 08      	        DB 00001000b   ;   #
0B39: 18      	        DB 00011000b   ;  ##
0B3A: 3F      	        DB 00111111b   ; ######
0B3B: 3F      	        DB 00111111b   ; ######
0B3C: 18      	        DB 00011000b   ;  ##
0B3D: 08      	        DB 00001000b   ;   #
              	        ;006 Right Arrow
0B3E: 04      	        DB 00000100b   ;    #
0B3F: 06      	        DB 00000110b   ;    ##
0B40: 3F      	        DB 00111111b   ; ######
0B41: 3F      	        DB 00111111b   ; ######
0B42: 06      	        DB 00000110b   ;    ##
0B43: 04      	        DB 00000100b   ;    #
              	        ;007 Up Hat
0B44: 0C      	        DB 00001100b   ;   ##
0B45: 1E      	        DB 00011110b   ;  ####
0B46: 3F      	        DB 00111111b   ; ######
0B47: 00      	        DB 00000000b   ;
0B48: 00      	        DB 00000000b   ;
0B49: 00      	        DB 00000000b   ;
              	        ;008 Down Hat
0B4A: 00      	        DB 00000000b   ;
0B4B: 00      	        DB 00000000b   ;
0B4C: 00      	        DB 00000000b   ;
0B4D: 3F      	        DB 00111111b   ; ######
0B4E: 1E      	        DB 00011110b   ;  ####
0B4F: 0C      	        DB 00001100b   ;   ##
              	        ;009 Left Hat
0B50: 08      	        DB 00001000b   ;   #
0B51: 18      	        DB 00011000b   ;  ##
0B52: 38      	        DB 00111000b   ; ###
0B53: 38      	        DB 00111000b   ; ###
0B54: 18      	        DB 00011000b   ;  ##
0B55: 08      	        DB 00001000b   ;   #
              	        ;010 Right Hat
0B56: 04      	        DB 00000100b   ;    #
0B57: 06      	        DB 00000110b   ;    ##
0B58: 07      	        DB 00000111b   ;    ###
0B59: 07      	        DB 00000111b   ;    ###
0B5A: 06      	        DB 00000110b   ;    ##
0B5B: 04      	        DB 00000100b   ;    #
              	        ;011 Note 1
0B5C: 04      	        DB 00000100b   ;    #
0B5D: 04      	        DB 00000100b   ;    # 
0B5E: 04      	        DB 00000100b   ;    # 
0B5F: 1C      	        DB 00011100b   ;  ###
0B60: 3C      	        DB 00111100b   ; ####
0B61: 18      	        DB 00011000b   ;  ##
              	        ;012 Note 2
0B62: 04      	        DB 00000100b   ;    #
0B63: 06      	        DB 00000110b   ;    ## 
0B64: 05      	        DB 00000101b   ;    # #
0B65: 1C      	        DB 00011100b   ;  ###
0B66: 3C      	        DB 00111100b   ; ####
0B67: 18      	        DB 00011000b   ;  ##
              	        ;013 Rocket
0B68: 0C      	        DB 00001100b   ;   ##
0B69: 0C      	        DB 00001100b   ;   ##
0B6A: 0C      	        DB 00001100b   ;   ##
0B6B: 0C      	        DB 00001100b   ;   ##
0B6C: 1E      	        DB 00011110b   ;  ####
0B6D: 33      	        DB 00110011b   ; ##  ##
              	        ;014 Bomb
0B6E: 1E      	        DB 00011110b   ;  ####
0B6F: 0C      	        DB 00001100b   ;   ##
0B70: 1E      	        DB 00011110b   ;  ####
0B71: 1E      	        DB 00011110b   ;  ####
0B72: 1E      	        DB 00011110b   ;  ####
0B73: 0C      	        DB 00001100b   ;   ##
              	        ;015 Explosion
0B74: 0C      	        DB 00001100b   ;   ##
0B75: 3F      	        DB 00111111b   ; ######
0B76: 06      	        DB 00000110b   ;    ##
0B77: 0C      	        DB 00001100b   ;   ##
0B78: 18      	        DB 00011000b   ;  ##
0B79: 0C      	        DB 00001100b   ;   ##
              	        ;016
0B7A: 36      	        DB 00110110b   ; ## ##
0B7B: 24      	        DB 00100100b   ; #  #
0B7C: 00      	        DB 00000000b   ;
0B7D: 00      	        DB 00000000b   ;
0B7E: 00      	        DB 00000000b   ;
0B7F: 00      	        DB 00000000b   ;
              	        ;017
0B80: 36      	        DB 00110110b   ; ## ##
0B81: 12      	        DB 00010010b   ;  #  #
0B82: 00      	        DB 00000000b   ;
0B83: 00      	        DB 00000000b   ;
0B84: 00      	        DB 00000000b   ;
0B85: 00      	        DB 00000000b   ;
              	        ;018
0B86: 0E      	        DB 00001110b   ;   ###
0B87: 12      	        DB 00010010b   ;  #  #
0B88: 38      	        DB 00111000b   ; ###
0B89: 12      	        DB 00010010b   ;  #  #
0B8A: 3E      	        DB 00111110b   ; #####
0B8B: 00      	        DB 00000000b   ;
              	        ;019
0B8C: 1C      	        DB 00011100b   ;  ###
0B8D: 22      	        DB 00100010b   ; #   #
0B8E: 2A      	        DB 00101010b   ; # # #
0B8F: 22      	        DB 00100010b   ; #   #
0B90: 1C      	        DB 00011100b   ;  ###
0B91: 00      	        DB 00000000b   ;
              	        ;020
0B92: 3E      	        DB 00111110b   ; #####
0B93: 34      	        DB 00110100b   ; ## #
0B94: 34      	        DB 00110100b   ; ## #
0B95: 14      	        DB 00010100b   ;  # #
0B96: 14      	        DB 00010100b   ;  # #
0B97: 00      	        DB 00000000b   ;
              	        ;021
0B98: 1C      	        DB 00011100b   ;  ###
0B99: 18      	        DB 00011000b   ;  ##
0B9A: 24      	        DB 00100100b   ; #  #
0B9B: 18      	        DB 00011000b   ;  ##
0B9C: 38      	        DB 00111000b   ; ###
0B9D: 00      	        DB 00000000b   ;
              	        ;022
0B9E: 0C      	        DB 00001100b   ;   ##
0B9F: 0C      	        DB 00001100b   ;   ##
0BA0: 02      	        DB 00000010b   ;     #
0BA1: 00      	        DB 00000000b   ;
0BA2: 00      	        DB 00000000b   ;
0BA3: 00      	        DB 00000000b   ;
              	        ;023
0BA4: 14      	        DB 00010100b   ;  # #
0BA5: 00      	        DB 00000000b   ;
0BA6: 08      	        DB 00001000b   ;   #
0BA7: 22      	        DB 00100010b   ; #   # 
0BA8: 1C      	        DB 00011100b   ;  ###
0BA9: 00      	        DB 00000000b   ;
              	        ;024
0BAA: 14      	        DB 00010100b   ;  # #
0BAB: 00      	        DB 00000000b   ;
0BAC: 00      	        DB 00000000b   ;
0BAD: 1C      	        DB 00011100b   ;  ###
0BAE: 22      	        DB 00100010b   ; #   # 
0BAF: 00      	        DB 00000000b   ;
              	        ;025
0BB0: 08      	        DB 00001000b   ;   #
0BB1: 00      	        DB 00000000b   ;
0BB2: 18      	        DB 00011000b   ;  ##
0BB3: 22      	        DB 00100010b   ; #   #
0BB4: 1C      	        DB 00011100b   ;  ###
0BB5: 00      	        DB 00000000b   ;
              	        ;026
0BB6: 08      	        DB 00001000b   ;   #
0BB7: 00      	        DB 00000000b   ;
0BB8: 08      	        DB 00001000b   ;   #
0BB9: 08      	        DB 00001000b   ;   #
0BBA: 08      	        DB 00001000b   ;   #
0BBB: 00      	        DB 00000000b   ;
              	        ;027
0BBC: 00      	        DB 00000000b   ;
0BBD: 00      	        DB 00000000b   ;
0BBE: 3E      	        DB 00111110b   ; #####
0BBF: 06      	        DB 00000110b   ;    ##
0BC0: 06      	        DB 00000110b   ;    ##
0BC1: 00      	        DB 00000000b   ;
              	        ;028
0BC2: 1C      	        DB 00011100b   ;  ###
0BC3: 1C      	        DB 00011100b   ;  ###
0BC4: 3E      	        DB 00111110b   ; #####
0BC5: 08      	        DB 00001000b   ;   #
0BC6: 1C      	        DB 00011100b   ;  ###
0BC7: 00      	        DB 00000000b   ;
              	        ;029
0BC8: 08      	        DB 00001000b   ;   #
0BC9: 1C      	        DB 00011100b   ;  ###
0BCA: 3E      	        DB 00111110b   ; #####
0BCB: 1C      	        DB 00011100b   ;  ###
0BCC: 08      	        DB 00001000b   ;   #
0BCD: 00      	        DB 00000000b   ;
              	        ;030
0BCE: 14      	        DB 00010100b   ;  # #
0BCF: 3E      	        DB 00111110b   ; #####
0BD0: 3E      	        DB 00111110b   ; #####
0BD1: 1C      	        DB 00011100b   ;  ###
0BD2: 08      	        DB 00001000b   ;   #
0BD3: 00      	        DB 00000000b   ;
              	        ;031
0BD4: 08      	        DB 00001000b   ;   #
0BD5: 1C      	        DB 00011100b   ;  ###
0BD6: 3E      	        DB 00111110b   ; #####
0BD7: 08      	        DB 00001000b   ;   #
0BD8: 1C      	        DB 00011100b   ;  ###
0BD9: 00      	        DB 00000000b   ;
              	        ;032 Space
0BDA: 00      	        DB 00000000b   ;
0BDB: 00      	        DB 00000000b   ;
0BDC: 00      	        DB 00000000b   ;
0BDD: 00      	        DB 00000000b   ;
0BDE: 00      	        DB 00000000b   ;
0BDF: 00      	        DB 00000000b   ;
              	        ;033 !
0BE0: 08      	        DB 00001000b   ;   #
0BE1: 08      	        DB 00001000b   ;   #
0BE2: 08      	        DB 00001000b   ;   #
0BE3: 00      	        DB 00000000b   ;
0BE4: 08      	        DB 00001000b   ;   #
0BE5: 00      	        DB 00000000b   ;
              	        ;034 "
0BE6: 14      	        DB 00010100b   ;  # #
0BE7: 14      	        DB 00010100b   ;  # #
0BE8: 00      	        DB 00000000b   ;
0BE9: 00      	        DB 00000000b   ;
0BEA: 00      	        DB 00000000b   ;
0BEB: 00      	        DB 00000000b   ;
              	        ;035 #
0BEC: 14      	        DB 00010100b   ;  # #
0BED: 3E      	        DB 00111110b   ; #####
0BEE: 14      	        DB 00010100b   ;  # #
0BEF: 3E      	        DB 00111110b   ; #####
0BF0: 14      	        DB 00010100b   ;  # #
0BF1: 00      	        DB 00000000b   ;
              	        ;036 $
0BF2: 1E      	        DB 00011110b   ;  ####
0BF3: 28      	        DB 00101000b   ; # #
0BF4: 1C      	        DB 00011100b   ;  ###
0BF5: 0A      	        DB 00001010b   ;   # #
0BF6: 3C      	        DB 00111100b   ; ####
0BF7: 00      	        DB 00000000b   ;
              	        ;037 %
0BF8: 32      	        DB 00110010b   ; ##  #
0BF9: 34      	        DB 00110100b   ; ## #
0BFA: 08      	        DB 00001000b   ;   #
0BFB: 16      	        DB 00010110b   ;  # ##
0BFC: 26      	        DB 00100110b   ; #  ##
0BFD: 00      	        DB 00000000b   ;
              	        ;038 &
0BFE: 18      	        DB 00011000b   ;  ##
0BFF: 24      	        DB 00100100b   ; #  #
0C00: 1A      	        DB 00011010b   ;  ## #
0C01: 24      	        DB 00100100b   ; #  #
0C02: 1A      	        DB 00011010b   ;  ## #
0C03: 00      	        DB 00000000b   ;
              	        ;039 '
0C04: 04      	        DB 00000100b   ;    #
0C05: 08      	        DB 00001000b   ;   #
0C06: 00      	        DB 00000000b   ;
0C07: 00      	        DB 00000000b   ;
0C08: 00      	        DB 00000000b   ;
0C09: 00      	        DB 00000000b   ;
              	        ;040 (
0C0A: 04      	        DB 00000100b   ;    #
0C0B: 08      	        DB 00001000b   ;   #
0C0C: 08      	        DB 00001000b   ;   #
0C0D: 08      	        DB 00001000b   ;   #
0C0E: 04      	        DB 00000100b   ;    #
0C0F: 00      	        DB 00000000b   ;
              	        ;041 )
0C10: 10      	        DB 00010000b   ;  #
0C11: 08      	        DB 00001000b   ;   #
0C12: 08      	        DB 00001000b   ;   #
0C13: 08      	        DB 00001000b   ;   #
0C14: 10      	        DB 00010000b   ;  #
0C15: 00      	        DB 00000000b   ;
              	        ;042 *
0C16: 2A      	        DB 00101010b   ; # # #
0C17: 1C      	        DB 00011100b   ;  ###
0C18: 3E      	        DB 00111110b   ; #####
0C19: 1C      	        DB 00011100b   ;  ###
0C1A: 2A      	        DB 00101010b   ; # # #
0C1B: 00      	        DB 00000000b   ;
              	        ;043 +
0C1C: 00      	        DB 00000000b   ;
0C1D: 08      	        DB 00001000b   ;   #
0C1E: 1C      	        DB 00011100b   ;  ###
0C1F: 08      	        DB 00001000b   ;   #
0C20: 00      	        DB 00000000b   ;
0C21: 00      	        DB 00000000b   ;
              	        ;044 ,
0C22: 00      	        DB 00000000b   ;
0C23: 00      	        DB 00000000b   ;
0C24: 00      	        DB 00000000b   ;
0C25: 08      	        DB 00001000b   ;   #
0C26: 10      	        DB 00010000b   ;  #
0C27: 00      	        DB 00000000b   ;
              	        ;045 -
0C28: 00      	        DB 00000000b   ;
0C29: 00      	        DB 00000000b   ;
0C2A: 1C      	        DB 00011100b   ;  ###
0C2B: 00      	        DB 00000000b   ;
0C2C: 00      	        DB 00000000b   ;
0C2D: 00      	        DB 00000000b   ;
              	        ;046 .
0C2E: 00      	        DB 00000000b   ;
0C2F: 00      	        DB 00000000b   ;
0C30: 00      	        DB 00000000b   ;
0C31: 00      	        DB 00000000b   ;
0C32: 10      	        DB 00010000b   ;  #
0C33: 00      	        DB 00000000b   ;
              	        ;047 /
0C34: 04      	        DB 00000100b   ;    #
0C35: 08      	        DB 00001000b   ;   #
0C36: 08      	        DB 00001000b   ;   #
0C37: 08      	        DB 00001000b   ;   #
0C38: 10      	        DB 00010000b   ;  #
0C39: 00      	        DB 00000000b   ;
              	        ;048 0
0C3A: 1C      	        DB 00011100b   ;  ###
0C3B: 14      	        DB 00010100b   ;  # #
0C3C: 14      	        DB 00010100b   ;  # #
0C3D: 14      	        DB 00010100b   ;  # #
0C3E: 1C      	        DB 00011100b   ;  ###
0C3F: 00      	        DB 00000000b   ;
              	        ;049 1
0C40: 08      	        DB 00001000b   ;   #
0C41: 18      	        DB 00011000b   ;  ##
0C42: 08      	        DB 00001000b   ;   #
0C43: 08      	        DB 00001000b   ;   #
0C44: 1C      	        DB 00011100b   ;  ###
0C45: 00      	        DB 00000000b   ;
              	        ;050 2
0C46: 1C      	        DB 00011100b   ;  ###
0C47: 04      	        DB 00000100b   ;    #
0C48: 1C      	        DB 00011100b   ;  ###
0C49: 10      	        DB 00010000b   ;  #
0C4A: 1C      	        DB 00011100b   ;  ###
0C4B: 00      	        DB 00000000b   ;
              	        ;051 3
0C4C: 1C      	        DB 00011100b   ;  ###
0C4D: 04      	        DB 00000100b   ;    #
0C4E: 0C      	        DB 00001100b   ;   ##
0C4F: 04      	        DB 00000100b   ;    #
0C50: 1C      	        DB 00011100b   ;  ###
0C51: 00      	        DB 00000000b   ;
              	        ;052 4
0C52: 10      	        DB 00010000b   ;  #
0C53: 10      	        DB 00010000b   ;  #
0C54: 14      	        DB 00010100b   ;  # #
0C55: 1C      	        DB 00011100b   ;  ###
0C56: 04      	        DB 00000100b   ;    #
0C57: 00      	        DB 00000000b   ;
              	        ;053 5
0C58: 1C      	        DB 00011100b   ;  ###
0C59: 10      	        DB 00010000b   ;  #
0C5A: 1C      	        DB 00011100b   ;  ###
0C5B: 04      	        DB 00000100b   ;    #
0C5C: 1C      	        DB 00011100b   ;  ###
0C5D: 00      	        DB 00000000b   ;
              	        ;054 6
0C5E: 18      	        DB 00011000b   ;  ##
0C5F: 10      	        DB 00010000b   ;  #
0C60: 1C      	        DB 00011100b   ;  ###
0C61: 14      	        DB 00010100b   ;  # #
0C62: 1C      	        DB 00011100b   ;  ###
0C63: 00      	        DB 00000000b   ;
              	        ;055 7
0C64: 1C      	        DB 00011100b   ;  ###
0C65: 04      	        DB 00000100b   ;    #
0C66: 08      	        DB 00001000b   ;   #
0C67: 10      	        DB 00010000b   ;  #
0C68: 10      	        DB 00010000b   ;  #
0C69: 00      	        DB 00000000b   ;
              	        ;056 8
0C6A: 1C      	        DB 00011100b   ;  ###
0C6B: 14      	        DB 00010100b   ;  # #
0C6C: 1C      	        DB 00011100b   ;  ###
0C6D: 14      	        DB 00010100b   ;  # #
0C6E: 1C      	        DB 00011100b   ;  ###
0C6F: 00      	        DB 00000000b   ;
              	        ;057 9
0C70: 1C      	        DB 00011100b   ;  ###
0C71: 14      	        DB 00010100b   ;  # #
0C72: 1C      	        DB 00011100b   ;  ###
0C73: 04      	        DB 00000100b   ;    #
0C74: 1C      	        DB 00011100b   ;  ###
0C75: 00      	        DB 00000000b   ;
              	        ;058 :
0C76: 00      	        DB 00000000b   ;
0C77: 08      	        DB 00001000b   ;   #
0C78: 00      	        DB 00000000b   ;
0C79: 08      	        DB 00001000b   ;   #
0C7A: 00      	        DB 00000000b   ;
0C7B: 00      	        DB 00000000b   ;
              	        ;059 ;
0C7C: 00      	        DB 00000000b   ;
0C7D: 08      	        DB 00001000b   ;   #
0C7E: 00      	        DB 00000000b   ;
0C7F: 08      	        DB 00001000b   ;   #
0C80: 10      	        DB 00010000b   ;  #
0C81: 00      	        DB 00000000b   ;
              	        ;060 <
0C82: 04      	        DB 00000100b   ;    #
0C83: 08      	        DB 00001000b   ;   #
0C84: 10      	        DB 00010000b   ;  #
0C85: 08      	        DB 00001000b   ;   #
0C86: 04      	        DB 00000100b   ;    #
0C87: 00      	        DB 00000000b   ;
              	        ;061 =
0C88: 00      	        DB 00000000b   ;
0C89: 1C      	        DB 00011100b   ;  ###
0C8A: 00      	        DB 00000000b   ;
0C8B: 1C      	        DB 00011100b   ;  ###
0C8C: 00      	        DB 00000000b   ;
0C8D: 00      	        DB 00000000b   ;
              	        ;062 >
0C8E: 10      	        DB 00010000b   ;  #
0C8F: 08      	        DB 00001000b   ;   #
0C90: 04      	        DB 00000100b   ;    #
0C91: 08      	        DB 00001000b   ;   #
0C92: 10      	        DB 00010000b   ;  #
0C93: 00      	        DB 00000000b   ;
              	        ;063 ?
0C94: 1C      	        DB 00011100b   ;  ###
0C95: 22      	        DB 00100010b   ; #   # 
0C96: 0C      	        DB 00001100b   ;   ##
0C97: 00      	        DB 00000000b   ;
0C98: 08      	        DB 00001000b   ;   #
0C99: 00      	        DB 00000000b   ;
              	        ;064 @
0C9A: 1C      	        DB 00011100b   ;  ###
0C9B: 22      	        DB 00100010b   ; #   #
0C9C: 26      	        DB 00100110b   ; #  ##
0C9D: 2A      	        DB 00101010b   ; # # # 
0C9E: 0C      	        DB 00001100b   ;   ##
0C9F: 00      	        DB 00000000b   ;
              	        ;065 A
0CA0: 18      	        DB 00011000b   ;  ##
0CA1: 24      	        DB 00100100b   ; #  #
0CA2: 22      	        DB 00100010b   ; #   #
0CA3: 3E      	        DB 00111110b   ; #####
0CA4: 22      	        DB 00100010b   ; #   #
0CA5: 00      	        DB 00000000b   ; 
              	        ;066 B
0CA6: 38      	        DB 00111000b   ; ###
0CA7: 24      	        DB 00100100b   ; #  #
0CA8: 3C      	        DB 00111100b   ; ####
0CA9: 22      	        DB 00100010b   ; #   #
0CAA: 3C      	        DB 00111100b   ; ####
0CAB: 00      	        DB 00000000b   ; 
              	        ;067 C
0CAC: 1C      	        DB 00011100b   ;  ###
0CAD: 22      	        DB 00100010b   ; #   # 
0CAE: 20      	        DB 00100000b   ; #
0CAF: 22      	        DB 00100010b   ; #   # 
0CB0: 1C      	        DB 00011100b   ;  ###
0CB1: 00      	        DB 00000000b   ;
              	        ;068 D
0CB2: 3C      	        DB 00111100b   ; ####
0CB3: 26      	        DB 00100110b   ; #  ##
0CB4: 22      	        DB 00100010b   ; #   #
0CB5: 22      	        DB 00100010b   ; #   #
0CB6: 3C      	        DB 00111100b   ; ####
0CB7: 00      	        DB 00000000b   ;
              	        ;069 E
0CB8: 3E      	        DB 00111110b   ; #####
0CB9: 20      	        DB 00100000b   ; #
0CBA: 3C      	        DB 00111100b   ; ####
0CBB: 20      	        DB 00100000b   ; #
0CBC: 3E      	        DB 00111110b   ; #####
0CBD: 00      	        DB 00000000b   ;
              	        ;070 F
0CBE: 3E      	        DB 00111110b   ; #####
0CBF: 20      	        DB 00100000b   ; #
0CC0: 3C      	        DB 00111100b   ; ####
0CC1: 20      	        DB 00100000b   ; #
0CC2: 20      	        DB 00100000b   ; #
0CC3: 00      	        DB 00000000b   ;
              	        ;071 G
0CC4: 1C      	        DB 00011100b   ;  ###
0CC5: 20      	        DB 00100000b   ; #    
0CC6: 26      	        DB 00100110b   ; #  ##
0CC7: 22      	        DB 00100010b   ; #   # 
0CC8: 1C      	        DB 00011100b   ;  ###
0CC9: 00      	        DB 00000000b   ;
              	        ;072 H
0CCA: 24      	        DB 00100100b   ; #  #
0CCB: 22      	        DB 00100010b   ; #   #
0CCC: 3E      	        DB 00111110b   ; #####
0CCD: 22      	        DB 00100010b   ; #   #
0CCE: 22      	        DB 00100010b   ; #   #
0CCF: 00      	        DB 00000000b   ;
              	        ;073 I
0CD0: 1C      	        DB 00011100b   ;  ###
0CD1: 08      	        DB 00001000b   ;   #
0CD2: 08      	        DB 00001000b   ;   #
0CD3: 08      	        DB 00001000b   ;   #
0CD4: 1C      	        DB 00011100b   ;  ###
0CD5: 00      	        DB 00000000b   ;
              	        ;074 J
0CD6: 0C      	        DB 00001100b   ;   ##
0CD7: 04      	        DB 00000100b   ;    #
0CD8: 04      	        DB 00000100b   ;    #
0CD9: 14      	        DB 00010100b   ;  # #
0CDA: 1C      	        DB 00011100b   ;  ###
0CDB: 00      	        DB 00000000b   ;
              	        ;075 K
0CDC: 24      	        DB 00100100b   ; #  #
0CDD: 28      	        DB 00101000b   ; # #
0CDE: 30      	        DB 00110000b   ; ##
0CDF: 28      	        DB 00101000b   ; # #
0CE0: 24      	        DB 00100100b   ; #  #
0CE1: 00      	        DB 00000000b   ;
              	        ;076 L
0CE2: 20      	        DB 00100000b   ; #
0CE3: 20      	        DB 00100000b   ; #
0CE4: 20      	        DB 00100000b   ; #
0CE5: 20      	        DB 00100000b   ; #
0CE6: 3C      	        DB 00111100b   ; ####
0CE7: 00      	        DB 00000000b   ; 
              	        ;077 M
0CE8: 22      	        DB 00100010b   ; #   #
0CE9: 36      	        DB 00110110b   ; ## ##
0CEA: 2A      	        DB 00101010b   ; # # #
0CEB: 22      	        DB 00100010b   ; #   #
0CEC: 22      	        DB 00100010b   ; #   #
0CED: 00      	        DB 00000000b   ; 
              	        ;078 N
0CEE: 22      	        DB 00100010b   ; #   #
0CEF: 32      	        DB 00110010b   ; ##  #
0CF0: 2A      	        DB 00101010b   ; # # #
0CF1: 26      	        DB 00100110b   ; #  ##
0CF2: 22      	        DB 00100010b   ; #   #
0CF3: 00      	        DB 00000000b   ; 
              	        ;079 O
0CF4: 1C      	        DB 00011100b   ;  ###
0CF5: 26      	        DB 00100110b   ; #  ## 
0CF6: 22      	        DB 00100010b   ; #   #
0CF7: 22      	        DB 00100010b   ; #   # 
0CF8: 1C      	        DB 00011100b   ;  ###
0CF9: 00      	        DB 00000000b   ; 
              	        ;080 P
0CFA: 38      	        DB 00111000b   ; ###
0CFB: 24      	        DB 00100100b   ; #  #
0CFC: 38      	        DB 00111000b   ; ###
0CFD: 20      	        DB 00100000b   ; #
0CFE: 20      	        DB 00100000b   ; #
0CFF: 00      	        DB 00000000b   ; 
              	        ;081 Q
0D00: 1C      	        DB 00011100b   ;  ###
0D01: 22      	        DB 00100010b   ; #   # 
0D02: 22      	        DB 00100010b   ; #   #
0D03: 26      	        DB 00100110b   ; #  ## 
0D04: 1E      	        DB 00011110b   ;  ####
0D05: 00      	        DB 00000000b   ; 
              	        ;082 R
0D06: 38      	        DB 00111000b   ; ###
0D07: 24      	        DB 00100100b   ; #  #
0D08: 38      	        DB 00111000b   ; ###
0D09: 28      	        DB 00101000b   ; # #
0D0A: 24      	        DB 00100100b   ; #  #
0D0B: 00      	        DB 00000000b   ; 
              	        ;083 S
0D0C: 1E      	        DB 00011110b   ;  ####
0D0D: 20      	        DB 00100000b   ; #
0D0E: 1C      	        DB 00011100b   ;  ###
0D0F: 02      	        DB 00000010b   ;     #
0D10: 3C      	        DB 00111100b   ; ####
0D11: 00      	        DB 00000000b   ; 
              	        ;084 T
0D12: 3E      	        DB 00111110b   ; #####
0D13: 08      	        DB 00001000b   ;   #
0D14: 08      	        DB 00001000b   ;   #
0D15: 08      	        DB 00001000b   ;   #
0D16: 08      	        DB 00001000b   ;   #
0D17: 00      	        DB 00000000b   ; 
              	        ;085 U
0D18: 24      	        DB 00100100b   ; #  #
0D19: 22      	        DB 00100010b   ; #   #
0D1A: 22      	        DB 00100010b   ; #   #
0D1B: 22      	        DB 00100010b   ; #   #
0D1C: 1C      	        DB 00011100b   ;  ###
0D1D: 00      	        DB 00000000b   ; 
              	        ;086 V
0D1E: 22      	        DB 00100010b   ; #   #
0D1F: 22      	        DB 00100010b   ; #   #
0D20: 14      	        DB 00010100b   ;  # #
0D21: 14      	        DB 00010100b   ;  # #
0D22: 08      	        DB 00001000b   ;   #
0D23: 00      	        DB 00000000b   ; 
              	        ;087 W
0D24: 24      	        DB 00100100b   ; #  #
0D25: 22      	        DB 00100010b   ; #   #
0D26: 2A      	        DB 00101010b   ; # # #
0D27: 2A      	        DB 00101010b   ; # # #
0D28: 14      	        DB 00010100b   ;  # #
0D29: 00      	        DB 00000000b   ; 
              	        ;088 X
0D2A: 22      	        DB 00100010b   ; #   #
0D2B: 14      	        DB 00010100b   ;  # #
0D2C: 08      	        DB 00001000b   ;   #
0D2D: 14      	        DB 00010100b   ;  # #
0D2E: 22      	        DB 00100010b   ; #   #
0D2F: 00      	        DB 00000000b   ; 
              	        ;089 Y
0D30: 22      	        DB 00100010b   ; #   #
0D31: 14      	        DB 00010100b   ;  # #
0D32: 08      	        DB 00001000b   ;   #
0D33: 08      	        DB 00001000b   ;   #
0D34: 08      	        DB 00001000b   ;   #
0D35: 00      	        DB 00000000b   ; 
              	        ;090 Z
0D36: 3E      	        DB 00111110b   ; #####
0D37: 04      	        DB 00000100b   ;    #
0D38: 08      	        DB 00001000b   ;   #
0D39: 10      	        DB 00010000b   ;  #
0D3A: 3E      	        DB 00111110b   ; #####
0D3B: 00      	        DB 00000000b   ; 
              	        ;091 [
0D3C: 0C      	        DB 00001100b   ;   ##
0D3D: 08      	        DB 00001000b   ;   #
0D3E: 08      	        DB 00001000b   ;   #
0D3F: 08      	        DB 00001000b   ;   #
0D40: 0C      	        DB 00001100b   ;   ##
0D41: 00      	        DB 00000000b   ; 
              	        ;092 \
0D42: 10      	        DB 00010000b   ;  #
0D43: 08      	        DB 00001000b   ;   #
0D44: 08      	        DB 00001000b   ;   #
0D45: 08      	        DB 00001000b   ;   #
0D46: 04      	        DB 00000100b   ;    #
0D47: 00      	        DB 00000000b   ; 
              	        ;093 ]
0D48: 18      	        DB 00011000b   ;  ##
0D49: 08      	        DB 00001000b   ;   #
0D4A: 08      	        DB 00001000b   ;   #
0D4B: 08      	        DB 00001000b   ;   #
0D4C: 18      	        DB 00011000b   ;  ##
0D4D: 00      	        DB 00000000b   ; 
              	        ;094 ^
0D4E: 08      	        DB 00001000b   ;   #
0D4F: 14      	        DB 00010100b   ;  # #
0D50: 00      	        DB 00000000b   ; 
0D51: 00      	        DB 00000000b   ; 
0D52: 00      	        DB 00000000b   ; 
0D53: 00      	        DB 00000000b   ; 
              	        ;095 _
0D54: 00      	        DB 00000000b   ; 
0D55: 00      	        DB 00000000b   ; 
0D56: 00      	        DB 00000000b   ; 
0D57: 00      	        DB 00000000b   ; 
0D58: 3E      	        DB 00111110b   ; #####
0D59: 00      	        DB 00000000b   ; 
              	        ;096 `
0D5A: 08      	        DB 00001000b   ;   #
0D5B: 04      	        DB 00000100b   ;    #
0D5C: 00      	        DB 00000000b   ;
0D5D: 00      	        DB 00000000b   ;
0D5E: 00      	        DB 00000000b   ;
0D5F: 00      	        DB 00000000b   ;
              	        ;097 a
0D60: 00      	        DB 00000000b   ; 
0D61: 1C      	        DB 00011100b   ;  ###
0D62: 22      	        DB 00100010b   ; #   #
0D63: 26      	        DB 00100110b   ; #  ##
0D64: 1A      	        DB 00011010b   ;  ## #
0D65: 00      	        DB 00000000b   ; 
              	        ;098 b
0D66: 20      	        DB 00100000b   ; #
0D67: 3C      	        DB 00111100b   ; ####
0D68: 22      	        DB 00100010b   ; #   #
0D69: 22      	        DB 00100010b   ; #   #
0D6A: 3C      	        DB 00111100b   ; ####
0D6B: 00      	        DB 00000000b   ; 
              	        ;099 c
0D6C: 00      	        DB 00000000b   ; 
0D6D: 1C      	        DB 00011100b   ;  ###
0D6E: 20      	        DB 00100000b   ; #   
0D6F: 20      	        DB 00100000b   ; #   
0D70: 1C      	        DB 00011100b   ;  ###
0D71: 00      	        DB 00000000b   ; 
              	        ;100 d
0D72: 02      	        DB 00000010b   ;     #
0D73: 1E      	        DB 00011110b   ;  ####
0D74: 22      	        DB 00100010b   ; #   #
0D75: 22      	        DB 00100010b   ; #   #
0D76: 1E      	        DB 00011110b   ;  ####
0D77: 00      	        DB 00000000b   ; 
              	        ;101 e
0D78: 1C      	        DB 00011100b   ;  ###
0D79: 22      	        DB 00100010b   ; #   #
0D7A: 3C      	        DB 00111100b   ; ####
0D7B: 20      	        DB 00100000b   ; #
0D7C: 1E      	        DB 00011110b   ;  ####
0D7D: 00      	        DB 00000000b   ; 
              	        ;102 f
0D7E: 0E      	        DB 00001110b   ;   ###
0D7F: 10      	        DB 00010000b   ;  # 
0D80: 3C      	        DB 00111100b   ; ####
0D81: 10      	        DB 00010000b   ;  # 
0D82: 10      	        DB 00010000b   ;  # 
0D83: 00      	        DB 00000000b   ; 
              	        ;103 g
0D84: 1E      	        DB 00011110b   ;  ####
0D85: 22      	        DB 00100010b   ; #   #
0D86: 1E      	        DB 00011110b   ;  ####
0D87: 02      	        DB 00000010b   ;     #
0D88: 3C      	        DB 00111100b   ; ####
0D89: 00      	        DB 00000000b   ; 
              	        ;104 h
0D8A: 20      	        DB 00100000b   ; #
0D8B: 20      	        DB 00100000b   ; #
0D8C: 3C      	        DB 00111100b   ; ####
0D8D: 22      	        DB 00100010b   ; #   #
0D8E: 22      	        DB 00100010b   ; #   #
0D8F: 00      	        DB 00000000b   ; 
              	        ;105 i
0D90: 08      	        DB 00001000b   ;   #
0D91: 00      	        DB 00000000b   ; 
0D92: 08      	        DB 00001000b   ;   #
0D93: 08      	        DB 00001000b   ;   #
0D94: 08      	        DB 00001000b   ;   #
0D95: 00      	        DB 00000000b   ; 
              	        ;106 j
0D96: 04      	        DB 00000100b   ;    # 
0D97: 00      	        DB 00000000b   ; 
0D98: 04      	        DB 00000100b   ;    # 
0D99: 04      	        DB 00000100b   ;    # 
0D9A: 18      	        DB 00011000b   ;  ##
0D9B: 00      	        DB 00000000b   ; 
              	        ;107 k
0D9C: 20      	        DB 00100000b   ; #
0D9D: 24      	        DB 00100100b   ; #  #
0D9E: 28      	        DB 00101000b   ; # #
0D9F: 34      	        DB 00110100b   ; ## #
0DA0: 22      	        DB 00100010b   ; #   #
0DA1: 00      	        DB 00000000b   ; 
              	        ;108 l
0DA2: 08      	        DB 00001000b   ;   #
0DA3: 08      	        DB 00001000b   ;   #
0DA4: 08      	        DB 00001000b   ;   #
0DA5: 08      	        DB 00001000b   ;   #
0DA6: 0C      	        DB 00001100b   ;   ##
0DA7: 00      	        DB 00000000b   ; 
              	        ;109 m
0DA8: 00      	        DB 00000000b   ; 
0DA9: 14      	        DB 00010100b   ;  # #
0DAA: 2A      	        DB 00101010b   ; # # #
0DAB: 2A      	        DB 00101010b   ; # # #
0DAC: 2A      	        DB 00101010b   ; # # #
0DAD: 00      	        DB 00000000b   ; 
              	        ;110 n
0DAE: 00      	        DB 00000000b   ; 
0DAF: 1C      	        DB 00011100b   ;  ###
0DB0: 22      	        DB 00100010b   ; #   #
0DB1: 22      	        DB 00100010b   ; #   #
0DB2: 22      	        DB 00100010b   ; #   #
0DB3: 00      	        DB 00000000b   ; 
              	        ;111 o
0DB4: 00      	        DB 00000000b   ; 
0DB5: 1C      	        DB 00011100b   ;  ###
0DB6: 22      	        DB 00100010b   ; #   #
0DB7: 22      	        DB 00100010b   ; #   #
0DB8: 1C      	        DB 00011100b   ;  ###
0DB9: 00      	        DB 00000000b   ; 
              	        ;112 p
0DBA: 1C      	        DB 00011100b   ;  ###
0DBB: 22      	        DB 00100010b   ; #   #
0DBC: 22      	        DB 00100010b   ; #   #
0DBD: 3C      	        DB 00111100b   ; ####
0DBE: 20      	        DB 00100000b   ; #
0DBF: 00      	        DB 00000000b   ; 
              	        ;113 q
0DC0: 1C      	        DB 00011100b   ;  ###
0DC1: 22      	        DB 00100010b   ; #   #
0DC2: 22      	        DB 00100010b   ; #   #
0DC3: 1E      	        DB 00011110b   ;  ####
0DC4: 02      	        DB 00000010b   ;     #
0DC5: 00      	        DB 00000000b   ; 
              	        ;114 r
0DC6: 00      	        DB 00000000b   ; 
0DC7: 2C      	        DB 00101100b   ; # ##
0DC8: 30      	        DB 00110000b   ; ##
0DC9: 20      	        DB 00100000b   ; #
0DCA: 20      	        DB 00100000b   ; #
0DCB: 00      	        DB 00000000b   ; 
              	        ;115 s
0DCC: 1C      	        DB 00011100b   ;  ###
0DCD: 20      	        DB 00100000b   ; #
0DCE: 1C      	        DB 00011100b   ;  ###
0DCF: 02      	        DB 00000010b   ;     #
0DD0: 3C      	        DB 00111100b   ; ####
0DD1: 00      	        DB 00000000b   ; 
              	        ;116 t
0DD2: 08      	        DB 00001000b   ;   #
0DD3: 1C      	        DB 00011100b   ;  ###
0DD4: 08      	        DB 00001000b   ;   #
0DD5: 08      	        DB 00001000b   ;   #
0DD6: 04      	        DB 00000100b   ;    #
0DD7: 00      	        DB 00000000b   ; 
              	        ;117 u
0DD8: 00      	        DB 00000000b   ; 
0DD9: 22      	        DB 00100010b   ; #   # 
0DDA: 22      	        DB 00100010b   ; #   # 
0DDB: 22      	        DB 00100010b   ; #   # 
0DDC: 1C      	        DB 00011100b   ;  ###
0DDD: 00      	        DB 00000000b   ; 
              	        ;118 v
0DDE: 00      	        DB 00000000b   ; 
0DDF: 22      	        DB 00100010b   ; #   # 
0DE0: 22      	        DB 00100010b   ; #   # 
0DE1: 14      	        DB 00010100b   ;  # # 
0DE2: 08      	        DB 00001000b   ;   #
0DE3: 00      	        DB 00000000b   ; 
              	        ;119 w
0DE4: 00      	        DB 00000000b   ; 
0DE5: 22      	        DB 00100010b   ; #   # 
0DE6: 22      	        DB 00100010b   ; #   # 
0DE7: 2A      	        DB 00101010b   ; # # # 
0DE8: 36      	        DB 00110110b   ; ## ##
0DE9: 00      	        DB 00000000b   ; 
              	        ;120 x
0DEA: 00      	        DB 00000000b   ; 
0DEB: 22      	        DB 00100010b   ; #   # 
0DEC: 1C      	        DB 00011100b   ;  ###
0DED: 1C      	        DB 00011100b   ;  ###
0DEE: 22      	        DB 00100010b   ; #   # 
0DEF: 00      	        DB 00000000b   ; 
              	        ;121 y
0DF0: 22      	        DB 00100010b   ; #   # 
0DF1: 22      	        DB 00100010b   ; #   # 
0DF2: 1E      	        DB 00011110b   ;  ####
0DF3: 02      	        DB 00000010b   ;     #
0DF4: 3C      	        DB 00111100b   ; ####
0DF5: 00      	        DB 00000000b   ; 
              	        ;122 z
0DF6: 00      	        DB 00000000b   ; 
0DF7: 3C      	        DB 00111100b   ; #### 
0DF8: 08      	        DB 00001000b   ;   #
0DF9: 10      	        DB 00010000b   ;  #
0DFA: 3C      	        DB 00111100b   ; #### 
0DFB: 00      	        DB 00000000b   ; 
              	        ;123 {
0DFC: 0C      	        DB 00001100b   ;   ##
0DFD: 08      	        DB 00001000b   ;   #
0DFE: 10      	        DB 00010000b   ;  #
0DFF: 08      	        DB 00001000b   ;   #
0E00: 0C      	        DB 00001100b   ;   ##
0E01: 00      	        DB 00000000b   ; 
              	        ;124 |
0E02: 08      	        DB 00001000b   ;   # 
0E03: 08      	        DB 00001000b   ;   # 
0E04: 08      	        DB 00001000b   ;   # 
0E05: 08      	        DB 00001000b   ;   # 
0E06: 08      	        DB 00001000b   ;   # 
0E07: 00      	        DB 00000000b   ; 
              	        ;125 }
0E08: 18      	        DB 00011000b   ;  ##
0E09: 08      	        DB 00001000b   ;   #
0E0A: 04      	        DB 00000100b   ;    #
0E0B: 08      	        DB 00001000b   ;   #
0E0C: 18      	        DB 00011000b   ;  ##
0E0D: 00      	        DB 00000000b   ; 
              	        ;126 ~
0E0E: 14      	        DB 00010100b   ;  # #
0E0F: 28      	        DB 00101000b   ; # #
0E10: 00      	        DB 00000000b   ; 
0E11: 00      	        DB 00000000b   ; 
0E12: 00      	        DB 00000000b   ; 
0E13: 00      	        DB 00000000b   ; 
              	        ;127 
0E14: 2A      	        DB 00101010b   ; # # #
0E15: 15      	        DB 00010101b   ;  # # #
0E16: 2A      	        DB 00101010b   ; # # #
0E17: 15      	        DB 00010101b   ;  # # #
0E18: 2A      	        DB 00101010b   ; # # #
0E19: 15      	        DB 00010101b   ;  # # #
              	        ;128
0E1A: 00      	        DB 00000000b   ; 
0E1B: 00      	        DB 00000000b   ; 
0E1C: 00      	        DB 00000000b   ; 
0E1D: 00      	        DB 00000000b   ; 
0E1E: 00      	        DB 00000000b   ; 
0E1F: 00      	        DB 00000000b   ; 
              	        ;129
0E20: 38      	        DB 00111000b   ; ###
0E21: 38      	        DB 00111000b   ; ###
0E22: 38      	        DB 00111000b   ; ###
0E23: 00      	        DB 00000000b   ; 
0E24: 00      	        DB 00000000b   ; 
0E25: 00      	        DB 00000000b   ; 
              	        ;130
0E26: 07      	        DB 00000111b   ;    ###
0E27: 07      	        DB 00000111b   ;    ###
0E28: 07      	        DB 00000111b   ;    ###
0E29: 00      	        DB 00000000b   ; 
0E2A: 00      	        DB 00000000b   ; 
0E2B: 00      	        DB 00000000b   ; 
              	        ;131
0E2C: 3F      	        DB 00111111b   ; ######
0E2D: 3F      	        DB 00111111b   ; ######
0E2E: 3F      	        DB 00111111b   ; ######
0E2F: 00      	        DB 00000000b   ; 
0E30: 00      	        DB 00000000b   ; 
0E31: 00      	        DB 00000000b   ; 
              	        ;132
0E32: 00      	        DB 00000000b   ; 
0E33: 00      	        DB 00000000b   ; 
0E34: 00      	        DB 00000000b   ; 
0E35: 38      	        DB 00111000b   ; ###
0E36: 38      	        DB 00111000b   ; ###
0E37: 38      	        DB 00111000b   ; ###
              	        ;133
0E38: 38      	        DB 00111000b   ; ###
0E39: 38      	        DB 00111000b   ; ###
0E3A: 38      	        DB 00111000b   ; ###
0E3B: 38      	        DB 00111000b   ; ###
0E3C: 38      	        DB 00111000b   ; ###
0E3D: 38      	        DB 00111000b   ; ###
              	        ;134
0E3E: 07      	        DB 00000111b   ;    ###
0E3F: 07      	        DB 00000111b   ;    ###
0E40: 07      	        DB 00000111b   ;    ###
0E41: 38      	        DB 00111000b   ; ###
0E42: 38      	        DB 00111000b   ; ###
0E43: 38      	        DB 00111000b   ; ###
              	        ;135
0E44: 3F      	        DB 00111111b   ; ######
0E45: 3F      	        DB 00111111b   ; ######
0E46: 3F      	        DB 00111111b   ; ######
0E47: 38      	        DB 00111000b   ; ###
0E48: 38      	        DB 00111000b   ; ###
0E49: 38      	        DB 00111000b   ; ###
              	        ;136
0E4A: 00      	        DB 00000000b   ; 
0E4B: 00      	        DB 00000000b   ; 
0E4C: 00      	        DB 00000000b   ; 
0E4D: 07      	        DB 00000111b   ;    ###
0E4E: 07      	        DB 00000111b   ;    ###
0E4F: 07      	        DB 00000111b   ;    ###
              	        ;137
0E50: 38      	        DB 00111000b   ; ###
0E51: 38      	        DB 00111000b   ; ###
0E52: 38      	        DB 00111000b   ; ###
0E53: 07      	        DB 00000111b   ;    ###
0E54: 07      	        DB 00000111b   ;    ###
0E55: 07      	        DB 00000111b   ;    ###
              	        ;138
0E56: 07      	        DB 00000111b   ;    ###
0E57: 07      	        DB 00000111b   ;    ###
0E58: 07      	        DB 00000111b   ;    ###
0E59: 07      	        DB 00000111b   ;    ###
0E5A: 07      	        DB 00000111b   ;    ###
0E5B: 07      	        DB 00000111b   ;    ###
              	        ;139
0E5C: 3F      	        DB 00111111b   ; ######
0E5D: 3F      	        DB 00111111b   ; ######
0E5E: 3F      	        DB 00111111b   ; ######
0E5F: 07      	        DB 00000111b   ;    ###
0E60: 07      	        DB 00000111b   ;    ###
0E61: 07      	        DB 00000111b   ;    ###
              	        ;140
0E62: 00      	        DB 00000000b   ; 
0E63: 00      	        DB 00000000b   ; 
0E64: 00      	        DB 00000000b   ; 
0E65: 3F      	        DB 00111111b   ; ######
0E66: 3F      	        DB 00111111b   ; ######
0E67: 3F      	        DB 00111111b   ; ######
              	        ;141
0E68: 38      	        DB 00111000b   ; ###
0E69: 38      	        DB 00111000b   ; ###
0E6A: 38      	        DB 00111000b   ; ###
0E6B: 3F      	        DB 00111111b   ; ######
0E6C: 3F      	        DB 00111111b   ; ######
0E6D: 3F      	        DB 00111111b   ; ######
              	        ;142
0E6E: 07      	        DB 00000111b   ;    ###
0E6F: 07      	        DB 00000111b   ;    ###
0E70: 07      	        DB 00000111b   ;    ###
0E71: 3F      	        DB 00111111b   ; ######
0E72: 3F      	        DB 00111111b   ; ######
0E73: 3F      	        DB 00111111b   ; ######
              	        ;143
0E74: 3F      	        DB 00111111b   ; ######
0E75: 3F      	        DB 00111111b   ; ######
0E76: 3F      	        DB 00111111b   ; ######
0E77: 3F      	        DB 00111111b   ; ######
0E78: 3F      	        DB 00111111b   ; ######
0E79: 3F      	        DB 00111111b   ; ######
              	        ;144
0E7A: 00      	        DB 00000000b   ; 
0E7B: 00      	        DB 00000000b   ; 
0E7C: 0C      	        DB 00001100b   ;   ##
0E7D: 0C      	        DB 00001100b   ;   ##
0E7E: 00      	        DB 00000000b   ; 
0E7F: 00      	        DB 00000000b   ; 
              	        ;145
0E80: 0C      	        DB 00001100b   ;   ##
0E81: 0C      	        DB 00001100b   ;   ##
0E82: 0C      	        DB 00001100b   ;   ##
0E83: 0C      	        DB 00001100b   ;   ##
0E84: 00      	        DB 00000000b   ; 
0E85: 00      	        DB 00000000b   ; 
              	        ;146
0E86: 00      	        DB 00000000b   ; 
0E87: 00      	        DB 00000000b   ; 
0E88: 0F      	        DB 00001111b   ;   ####
0E89: 0F      	        DB 00001111b   ;   ####
0E8A: 00      	        DB 00000000b   ; 
0E8B: 00      	        DB 00000000b   ; 
              	        ;147
0E8C: 0C      	        DB 00001100b   ;   ##
0E8D: 0C      	        DB 00001100b   ;   ##
0E8E: 0F      	        DB 00001111b   ;   ####
0E8F: 07      	        DB 00000111b   ;    ###
0E90: 00      	        DB 00000000b   ; 
0E91: 00      	        DB 00000000b   ; 
              	        ;148
0E92: 00      	        DB 00000000b   ; 
0E93: 00      	        DB 00000000b   ; 
0E94: 0C      	        DB 00001100b   ;   ##
0E95: 0C      	        DB 00001100b   ;   ##
0E96: 0C      	        DB 00001100b   ;   ##
0E97: 0C      	        DB 00001100b   ;   ##
              	        ;149
0E98: 0C      	        DB 00001100b   ;   ##
0E99: 0C      	        DB 00001100b   ;   ##
0E9A: 0C      	        DB 00001100b   ;   ##
0E9B: 0C      	        DB 00001100b   ;   ##
0E9C: 0C      	        DB 00001100b   ;   ##
0E9D: 0C      	        DB 00001100b   ;   ##
              	        ;150
0E9E: 00      	        DB 00000000b   ; 
0E9F: 00      	        DB 00000000b   ; 
0EA0: 07      	        DB 00000111b   ;    ###
0EA1: 0F      	        DB 00001111b   ;   ####
0EA2: 0C      	        DB 00001100b   ;   ##
0EA3: 0C      	        DB 00001100b   ;   ##
              	        ;151
0EA4: 0C      	        DB 00001100b   ;   ##
0EA5: 0C      	        DB 00001100b   ;   ##
0EA6: 0F      	        DB 00001111b   ;   ####
0EA7: 0F      	        DB 00001111b   ;   ####
0EA8: 0C      	        DB 00001100b   ;   ##
0EA9: 0C      	        DB 00001100b   ;   ##
              	        ;152
0EAA: 00      	        DB 00000000b   ; 
0EAB: 00      	        DB 00000000b   ; 
0EAC: 3C      	        DB 00111100b   ; ####
0EAD: 3C      	        DB 00111100b   ; ####
0EAE: 00      	        DB 00000000b   ; 
0EAF: 00      	        DB 00000000b   ; 
              	        ;153
0EB0: 0C      	        DB 00001100b   ;   ##
0EB1: 0C      	        DB 00001100b   ;   ##
0EB2: 3C      	        DB 00111100b   ; ####
0EB3: 38      	        DB 00111000b   ; ###
0EB4: 00      	        DB 00000000b   ; 
0EB5: 00      	        DB 00000000b   ; 
              	        ;154
0EB6: 00      	        DB 00000000b   ; 
0EB7: 00      	        DB 00000000b   ; 
0EB8: 3F      	        DB 00111111b   ; ######
0EB9: 3F      	        DB 00111111b   ; ######
0EBA: 00      	        DB 00000000b   ; 
0EBB: 00      	        DB 00000000b   ; 
              	        ;155
0EBC: 0C      	        DB 00001100b   ;   ##
0EBD: 0C      	        DB 00001100b   ;   ##
0EBE: 3F      	        DB 00111111b   ; ######
0EBF: 3F      	        DB 00111111b   ; ######
0EC0: 00      	        DB 00000000b   ; 
0EC1: 00      	        DB 00000000b   ; 
              	        ;156
0EC2: 00      	        DB 00000000b   ; 
0EC3: 00      	        DB 00000000b   ; 
0EC4: 38      	        DB 00111000b   ; ###
0EC5: 3C      	        DB 00111100b   ; ####
0EC6: 0C      	        DB 00001100b   ;   ##
0EC7: 0C      	        DB 00001100b   ;   ##
              	        ;157
0EC8: 0C      	        DB 00001100b   ;   ##
0EC9: 0C      	        DB 00001100b   ;   ##
0ECA: 3C      	        DB 00111100b   ; ####
0ECB: 3C      	        DB 00111100b   ; ####
0ECC: 0C      	        DB 00001100b   ;   ##
0ECD: 0C      	        DB 00001100b   ;   ##
              	        ;158
0ECE: 00      	        DB 00000000b   ; 
0ECF: 00      	        DB 00000000b   ; 
0ED0: 3F      	        DB 00111111b   ; ######
0ED1: 3F      	        DB 00111111b   ; ######
0ED2: 0C      	        DB 00001100b   ;   ##
0ED3: 0C      	        DB 00001100b   ;   ##
              	        ;159
0ED4: 0C      	        DB 00001100b   ;   ##
0ED5: 0C      	        DB 00001100b   ;   ##
0ED6: 3F      	        DB 00111111b   ; ######
0ED7: 3F      	        DB 00111111b   ; ######
0ED8: 0C      	        DB 00001100b   ;   ##
0ED9: 0C      	        DB 00001100b   ;   ##
              	        ;160
0EDA: 00      	        DB 00000000b   ; 
0EDB: 12      	        DB 00010010b   ;  #  #
0EDC: 00      	        DB 00000000b   ; 
0EDD: 00      	        DB 00000000b   ; 
0EDE: 12      	        DB 00010010b   ;  #  #
0EDF: 00      	        DB 00000000b   ; 
              	        ;161
0EE0: 12      	        DB 00010010b   ;  #  #
0EE1: 12      	        DB 00010010b   ;  #  #
0EE2: 12      	        DB 00010010b   ;  #  #
0EE3: 12      	        DB 00010010b   ;  #  #
0EE4: 00      	        DB 00000000b   ; 
0EE5: 00      	        DB 00000000b   ; 
              	        ;162
0EE6: 00      	        DB 00000000b   ; 
0EE7: 0F      	        DB 00001111b   ;   ####
0EE8: 00      	        DB 00000000b   ; 
0EE9: 00      	        DB 00000000b   ; 
0EEA: 0F      	        DB 00001111b   ;   ####
0EEB: 00      	        DB 00000000b   ; 
              	        ;163
0EEC: 12      	        DB 00010010b   ;  #  #
0EED: 13      	        DB 00010011b   ;  #  ##
0EEE: 10      	        DB 00010000b   ;  #
0EEF: 10      	        DB 00010000b   ;  #
0EF0: 0F      	        DB 00001111b   ;   ####
0EF1: 00      	        DB 00000000b   ; 
              	        ;164
0EF2: 00      	        DB 00000000b   ; 
0EF3: 00      	        DB 00000000b   ; 
0EF4: 12      	        DB 00010010b   ;  #  #
0EF5: 12      	        DB 00010010b   ;  #  #
0EF6: 12      	        DB 00010010b   ;  #  #
0EF7: 12      	        DB 00010010b   ;  #  #
              	        ;165
0EF8: 12      	        DB 00010010b   ;  #  #
0EF9: 12      	        DB 00010010b   ;  #  #
0EFA: 12      	        DB 00010010b   ;  #  #
0EFB: 12      	        DB 00010010b   ;  #  #
0EFC: 12      	        DB 00010010b   ;  #  #
0EFD: 12      	        DB 00010010b   ;  #  #
              	        ;166
0EFE: 00      	        DB 00000000b   ; 
0EFF: 0F      	        DB 00001111b   ;   ####
0F00: 10      	        DB 00010000b   ;  #
0F01: 10      	        DB 00010000b   ;  #
0F02: 13      	        DB 00010011b   ;  #  ##
0F03: 12      	        DB 00010010b   ;  #  #
              	        ;167
0F04: 12      	        DB 00010010b   ;  #  #
0F05: 13      	        DB 00010011b   ;  #  ##
0F06: 10      	        DB 00010000b   ;  #
0F07: 10      	        DB 00010000b   ;  #
0F08: 13      	        DB 00010011b   ;  #  ##
0F09: 12      	        DB 00010010b   ;  #  #
              	        ;168
0F0A: 00      	        DB 00000000b   ; 
0F0B: 3C      	        DB 00111100b   ; ####
0F0C: 00      	        DB 00000000b   ; 
0F0D: 00      	        DB 00000000b   ; 
0F0E: 3C      	        DB 00111100b   ; ####
0F0F: 00      	        DB 00000000b   ; 
              	        ;169
0F10: 12      	        DB 00010010b   ;  #  #
0F11: 32      	        DB 00110010b   ; ##  #
0F12: 02      	        DB 00000010b   ;     #
0F13: 02      	        DB 00000010b   ;     #
0F14: 3C      	        DB 00111100b   ; ####
0F15: 00      	        DB 00000000b   ; 
              	        ;170
0F16: 00      	        DB 00000000b   ; 
0F17: 3F      	        DB 00111111b   ; ######
0F18: 00      	        DB 00000000b   ; 
0F19: 00      	        DB 00000000b   ; 
0F1A: 3F      	        DB 00111111b   ; ######
0F1B: 00      	        DB 00000000b   ; 
              	        ;171
0F1C: 12      	        DB 00010010b   ;  #  #
0F1D: 33      	        DB 00110011b   ; ##  ##
0F1E: 00      	        DB 00000000b   ; 
0F1F: 00      	        DB 00000000b   ; 
0F20: 3F      	        DB 00111111b   ; ######
0F21: 00      	        DB 00000000b   ; 
              	        ;172
0F22: 00      	        DB 00000000b   ; 
0F23: 3C      	        DB 00111100b   ; ####
0F24: 02      	        DB 00000010b   ;     #
0F25: 02      	        DB 00000010b   ;     #
0F26: 32      	        DB 00110010b   ; ##  #
0F27: 12      	        DB 00010010b   ;  #  #
              	        ;173
0F28: 12      	        DB 00010010b   ;  #  #
0F29: 32      	        DB 00110010b   ; ##  #
0F2A: 02      	        DB 00000010b   ;     #
0F2B: 02      	        DB 00000010b   ;     #
0F2C: 32      	        DB 00110010b   ; ##  #
0F2D: 12      	        DB 00010010b   ;  #  #
              	        ;174
0F2E: 00      	        DB 00000000b   ; 
0F2F: 3F      	        DB 00111111b   ; ######
0F30: 00      	        DB 00000000b   ; 
0F31: 00      	        DB 00000000b   ; 
0F32: 33      	        DB 00110011b   ; ##  ##
0F33: 12      	        DB 00010010b   ;  #  #
              	        ;175
0F34: 12      	        DB 00010010b   ;  #  #
0F35: 33      	        DB 00110011b   ; ##  ##
0F36: 00      	        DB 00000000b   ; 
0F37: 00      	        DB 00000000b   ; 
0F38: 33      	        DB 00110011b   ; ##  ##
0F39: 12      	        DB 00010010b   ;  #  #
              	        ;176
0F3A: 0C      	        DB 00001100b   ;   ##
0F3B: 18      	        DB 00011000b   ;  ##
0F3C: 30      	        DB 00110000b   ; ##
0F3D: 20      	        DB 00100000b   ; #
0F3E: 00      	        DB 00000000b   ; 
0F3F: 00      	        DB 00000000b   ; 
              	        ;177
0F40: 0C      	        DB 00001100b   ;   ##
0F41: 06      	        DB 00000110b   ;    ##
0F42: 03      	        DB 00000011b   ;     ##
0F43: 01      	        DB 00000001b   ;      #
0F44: 00      	        DB 00000000b   ; 
0F45: 00      	        DB 00000000b   ; 
              	        ;178
0F46: 00      	        DB 00000000b   ; 
0F47: 00      	        DB 00000000b   ; 
0F48: 01      	        DB 00000001b   ;      #
0F49: 03      	        DB 00000011b   ;     ##
0F4A: 06      	        DB 00000110b   ;    ##
0F4B: 0C      	        DB 00001100b   ;   ##
              	        ;179
0F4C: 00      	        DB 00000000b   ; 
0F4D: 00      	        DB 00000000b   ; 
0F4E: 20      	        DB 00100000b   ; #
0F4F: 30      	        DB 00110000b   ; ##
0F50: 18      	        DB 00011000b   ;  ##
0F51: 0C      	        DB 00001100b   ;   ##
              	        ;180
0F52: 0C      	        DB 00001100b   ;   ##
0F53: 1E      	        DB 00011110b   ;  ####
0F54: 33      	        DB 00110011b   ; ##  ##
0F55: 21      	        DB 00100001b   ; #    # 
0F56: 00      	        DB 00000000b   ; 
0F57: 00      	        DB 00000000b   ; 
              	        ;181
0F58: 0C      	        DB 00001100b   ;   ##
0F59: 06      	        DB 00000110b   ;    ##
0F5A: 03      	        DB 00000011b   ;     ##
0F5B: 03      	        DB 00000011b   ;     ##
0F5C: 06      	        DB 00000110b   ;    ##
0F5D: 0C      	        DB 00001100b   ;   ##
              	        ;182
0F5E: 00      	        DB 00000000b   ; 
0F5F: 00      	        DB 00000000b   ; 
0F60: 21      	        DB 00100001b   ; #    # 
0F61: 33      	        DB 00110011b   ; ##  ##
0F62: 1E      	        DB 00011110b   ;  ####
0F63: 0C      	        DB 00001100b   ;   ##
              	        ;183
0F64: 0C      	        DB 00001100b   ;   ##
0F65: 18      	        DB 00011000b   ;  ##
0F66: 30      	        DB 00110000b   ; ##
0F67: 30      	        DB 00110000b   ; ##
0F68: 18      	        DB 00011000b   ;  ##
0F69: 0C      	        DB 00001100b   ;   ##
              	        ;184
0F6A: 0C      	        DB 00001100b   ;   ##
0F6B: 18      	        DB 00011000b   ;  ##
0F6C: 31      	        DB 00110001b   ; ##   #
0F6D: 23      	        DB 00100011b   ; #   ##
0F6E: 06      	        DB 00000110b   ;    ##
0F6F: 0C      	        DB 00001100b   ;   ##
              	        ;185
0F70: 0C      	        DB 00001100b   ;   ##
0F71: 06      	        DB 00000110b   ;    ##
0F72: 23      	        DB 00100011b   ; #   ##
0F73: 31      	        DB 00110001b   ; ##   #
0F74: 18      	        DB 00011000b   ;  ##
0F75: 0C      	        DB 00001100b   ;   ##
              	        ;186
0F76: 0C      	        DB 00001100b   ;   ##
0F77: 1E      	        DB 00011110b   ;  ####
0F78: 33      	        DB 00110011b   ; ##  ##
0F79: 33      	        DB 00110011b   ; ##  ##
0F7A: 1E      	        DB 00011110b   ;  ####
0F7B: 0C      	        DB 00001100b   ;   ##
              	        ;187
0F7C: 33      	        DB 00110011b   ; ##  ##
0F7D: 33      	        DB 00110011b   ; ##  ##
0F7E: 0C      	        DB 00001100b   ;   ##
0F7F: 0C      	        DB 00001100b   ;   ##
0F80: 33      	        DB 00110011b   ; ##  ##
0F81: 33      	        DB 00110011b   ; ##  ##
              	        ;188
0F82: 03      	        DB 00000011b   ;     ##
0F83: 03      	        DB 00000011b   ;     ##
0F84: 0C      	        DB 00001100b   ;   ##
0F85: 0C      	        DB 00001100b   ;   ##
0F86: 30      	        DB 00110000b   ; ##
0F87: 30      	        DB 00110000b   ; ##
              	        ;189
0F88: 30      	        DB 00110000b   ; ##
0F89: 30      	        DB 00110000b   ; ##
0F8A: 0C      	        DB 00001100b   ;   ##
0F8B: 0C      	        DB 00001100b   ;   ##
0F8C: 03      	        DB 00000011b   ;     ##
0F8D: 03      	        DB 00000011b   ;     ##
              	        ;190
0F8E: 2A      	        DB 00101010b   ; # # #
0F8F: 14      	        DB 00010100b   ;  # #
0F90: 2A      	        DB 00101010b   ; # # #
0F91: 14      	        DB 00010100b   ;  # #
0F92: 2A      	        DB 00101010b   ; # # #
0F93: 00      	        DB 00000000b   ; 
              	        ;191
0F94: 14      	        DB 00010100b   ;  # #
0F95: 2A      	        DB 00101010b   ; # # #
0F96: 14      	        DB 00010100b   ;  # #
0F97: 2A      	        DB 00101010b   ; # # #
0F98: 14      	        DB 00010100b   ;  # #
0F99: 00      	        DB 00000000b   ; 
              	        ;192
0F9A: 00      	        DB 00000000b   ; 
0F9B: 1A      	        DB 00011010b   ;  ## #
0F9C: 24      	        DB 00100100b   ; #  #
0F9D: 24      	        DB 00100100b   ; #  #
0F9E: 1A      	        DB 00011010b   ;  ## #
0F9F: 00      	        DB 00000000b   ; 
              	        ;193
0FA0: 18      	        DB 00011000b   ;  ##
0FA1: 24      	        DB 00100100b   ; #  #
0FA2: 2C      	        DB 00101100b   ; # ##
0FA3: 22      	        DB 00100010b   ; #   #
0FA4: 2C      	        DB 00101100b   ; # ##
0FA5: 00      	        DB 00000000b   ; 
              	        ;194
0FA6: 00      	        DB 00000000b   ; 
0FA7: 22      	        DB 00100010b   ; #   #
0FA8: 1C      	        DB 00011100b   ;  ###
0FA9: 22      	        DB 00100010b   ; #   #
0FAA: 1C      	        DB 00011100b   ;  ###
0FAB: 00      	        DB 00000000b   ; 
              	        ;195
0FAC: 1C      	        DB 00011100b   ;  ###
0FAD: 30      	        DB 00110000b   ; ##
0FAE: 1C      	        DB 00011100b   ;  ###
0FAF: 22      	        DB 00100010b   ; #   #
0FB0: 1C      	        DB 00011100b   ;  ### 
0FB1: 00      	        DB 00000000b   ; 
              	        ;196
0FB2: 0E      	        DB 00001110b   ;   ### 
0FB3: 30      	        DB 00110000b   ; ##
0FB4: 3C      	        DB 00111100b   ; ####
0FB5: 30      	        DB 00110000b   ; ##
0FB6: 0E      	        DB 00001110b   ;   ###
0FB7: 00      	        DB 00000000b   ; 
              	        ;197
0FB8: 1C      	        DB 00011100b   ;  ###
0FB9: 22      	        DB 00100010b   ; #   #
0FBA: 3E      	        DB 00111110b   ; #####
0FBB: 22      	        DB 00100010b   ; #   #
0FBC: 1C      	        DB 00011100b   ;  ###
0FBD: 00      	        DB 00000000b   ; 
              	        ;198
0FBE: 20      	        DB 00100000b   ; #
0FBF: 10      	        DB 00010000b   ;  #
0FC0: 08      	        DB 00001000b   ;   #
0FC1: 14      	        DB 00010100b   ;  # #
0FC2: 22      	        DB 00100010b   ; #   # 
0FC3: 00      	        DB 00000000b   ; 
              	        ;199
0FC4: 24      	        DB 00100100b   ; #  #
0FC5: 24      	        DB 00100100b   ; #  #
0FC6: 38      	        DB 00111000b   ; ###
0FC7: 20      	        DB 00100000b   ; #
0FC8: 20      	        DB 00100000b   ; # 
0FC9: 00      	        DB 00000000b   ; 
              	        ;200
0FCA: 00      	        DB 00000000b   ; 
0FCB: 3E      	        DB 00111110b   ; #####
0FCC: 14      	        DB 00010100b   ;  # #
0FCD: 14      	        DB 00010100b   ;  # #
0FCE: 24      	        DB 00100100b   ; #  #
0FCF: 00      	        DB 00000000b   ; 
              	        ;201
0FD0: 00      	        DB 00000000b   ; 
0FD1: 1E      	        DB 00011110b   ;  ####
0FD2: 34      	        DB 00110100b   ; ## #
0FD3: 34      	        DB 00110100b   ; ## #
0FD4: 18      	        DB 00011000b   ;  ##
0FD5: 00      	        DB 00000000b   ; 
              	        ;202
0FD6: 06      	        DB 00000110b   ;    ##
0FD7: 1C      	        DB 00011100b   ;  ###
0FD8: 36      	        DB 00110110b   ; ## ##
0FD9: 1C      	        DB 00011100b   ;  ###
0FDA: 30      	        DB 00110000b   ; ##
0FDB: 00      	        DB 00000000b   ; 
              	        ;203
0FDC: 06      	        DB 00000110b   ;    ##
0FDD: 04      	        DB 00000100b   ;    #
0FDE: 36      	        DB 00110110b   ; ## ##
0FDF: 1C      	        DB 00011100b   ;  ###
0FE0: 30      	        DB 00110000b   ; ##
0FE1: 00      	        DB 00000000b   ; 
              	        ;204
0FE2: 32      	        DB 00110010b   ; ##  #
0FE3: 1C      	        DB 00011100b   ;  ###
0FE4: 0C      	        DB 00001100b   ;   ##
0FE5: 16      	        DB 00010110b   ;  # ##
0FE6: 22      	        DB 00100010b   ; #   #
0FE7: 00      	        DB 00000000b   ; 
              	        ;205
0FE8: 00      	        DB 00000000b   ; 
0FE9: 14      	        DB 00010100b   ;  # #
0FEA: 22      	        DB 00100010b   ; #   #
0FEB: 2A      	        DB 00101010b   ; # # #
0FEC: 1C      	        DB 00011100b   ;  ###
0FED: 00      	        DB 00000000b   ; 
              	        ;206
0FEE: 3E      	        DB 00111110b   ; #####
0FEF: 12      	        DB 00010010b   ;  #  #
0FF0: 08      	        DB 00001000b   ;   #
0FF1: 12      	        DB 00010010b   ;  #  #
0FF2: 3E      	        DB 00111110b   ; #####
0FF3: 00      	        DB 00000000b   ; 
              	        ;207
0FF4: 1C      	        DB 00011100b   ;  ###
0FF5: 22      	        DB 00100010b   ; #   #
0FF6: 22      	        DB 00100010b   ; #   #
0FF7: 14      	        DB 00010100b   ;  # #
0FF8: 36      	        DB 00110110b   ; ## ##
0FF9: 00      	        DB 00000000b   ; 
              	        ;208
0FFA: 1C      	        DB 00011100b   ;  ###
0FFB: 1C      	        DB 00011100b   ;  ###
0FFC: 0A      	        DB 00001010b   ;   # #
0FFD: 1C      	        DB 00011100b   ;  ###
0FFE: 28      	        DB 00101000b   ; # #
0FFF: 08      	        DB 00001000b   ;   #
              	        ;209
1000: 1C      	        DB 00011100b   ;  ###
1001: 1C      	        DB 00011100b   ;  ###
1002: 28      	        DB 00101000b   ; # #
1003: 1C      	        DB 00011100b   ;  ###
1004: 0A      	        DB 00001010b   ;   # #
1005: 08      	        DB 00001000b   ;   #
              	        ;210
1006: 1C      	        DB 00011100b   ;  ###
1007: 1C      	        DB 00011100b   ;  ###
1008: 2A      	        DB 00101010b   ; # # #
1009: 1C      	        DB 00011100b   ;  ###
100A: 08      	        DB 00001000b   ;   # 
100B: 08      	        DB 00001000b   ;   #
              	        ;211
100C: 1C      	        DB 00011100b   ;  ###
100D: 1C      	        DB 00011100b   ;  ###
100E: 08      	        DB 00001000b   ;   # 
100F: 1C      	        DB 00011100b   ;  ###
1010: 2A      	        DB 00101010b   ; # # #
1011: 08      	        DB 00001000b   ;   #
              	        ;212
1012: 14      	        DB 00010100b   ;  # # 
1013: 00      	        DB 00000000b   ; 
1014: 14      	        DB 00010100b   ;  # # 
1015: 14      	        DB 00010100b   ;  # # 
1016: 1C      	        DB 00011100b   ;  ###
1017: 00      	        DB 00000000b   ; 
              	        ;213
1018: 14      	        DB 00010100b   ;  # # 
1019: 00      	        DB 00000000b   ; 
101A: 1C      	        DB 00011100b   ;  ###
101B: 14      	        DB 00010100b   ;  # # 
101C: 1C      	        DB 00011100b   ;  ###
101D: 00      	        DB 00000000b   ; 
              	        ;214
101E: 14      	        DB 00010100b   ;  # # 
101F: 00      	        DB 00000000b   ; 
1020: 1C      	        DB 00011100b   ;  ###
1021: 14      	        DB 00010100b   ;  # # 
1022: 1E      	        DB 00011110b   ;  ####
1023: 00      	        DB 00000000b   ; 
              	        ;215
1024: 14      	        DB 00010100b   ;  # # 
1025: 00      	        DB 00000000b   ; 
1026: 1C      	        DB 00011100b   ;  ###
1027: 14      	        DB 00010100b   ;  # # 
1028: 14      	        DB 00010100b   ;  # # 
1029: 00      	        DB 00000000b   ; 
              	        ;216
102A: 28      	        DB 00101000b   ; # #
102B: 2C      	        DB 00101100b   ; # ## 
102C: 3E      	        DB 00111110b   ; ##### 
102D: 0C      	        DB 00001100b   ;   ## 
102E: 08      	        DB 00001000b   ;   #
102F: 00      	        DB 00000000b   ; 
              	        ;217
1030: 0A      	        DB 00001010b   ;   # #
1031: 1A      	        DB 00011010b   ;  ## #
1032: 3E      	        DB 00111110b   ; #####
1033: 18      	        DB 00011000b   ;  ## 
1034: 08      	        DB 00001000b   ;   #
1035: 00      	        DB 00000000b   ; 
              	        ;218
1036: 08      	        DB 00001000b   ;   #
1037: 1C      	        DB 00011100b   ;  ###
1038: 08      	        DB 00001000b   ;   #
1039: 00      	        DB 00000000b   ;  
103A: 1C      	        DB 00011100b   ;  ###
103B: 00      	        DB 00000000b   ;
              	        ;219
103C: 08      	        DB 00001000b   ;   #
103D: 00      	        DB 00000000b   ; 
103E: 3E      	        DB 00111110b   ; #####
103F: 00      	        DB 00000000b   ;
1040: 08      	        DB 00001000b   ;   #
1041: 00      	        DB 00000000b   ;
              	        ;220
1042: 04      	        DB 00000100b   ;    #
1043: 08      	        DB 00001000b   ;   # 
1044: 10      	        DB 00010000b   ;  #
1045: 08      	        DB 00001000b   ;   # 
1046: 1C      	        DB 00011100b   ;  ###
1047: 00      	        DB 00000000b   ; 
              	        ;221
1048: 10      	        DB 00010000b   ;  #
1049: 08      	        DB 00001000b   ;   # 
104A: 04      	        DB 00000100b   ;    #
104B: 08      	        DB 00001000b   ;   # 
104C: 1C      	        DB 00011100b   ;  ###
104D: 00      	        DB 00000000b   ; 
              	        ;222
104E: 1C      	        DB 00011100b   ;  ###
104F: 00      	        DB 00000000b   ; 
1050: 1C      	        DB 00011100b   ;  ###
1051: 00      	        DB 00000000b   ; 
1052: 1C      	        DB 00011100b   ;  ###
1053: 00      	        DB 00000000b   ; 
              	        ;223
1054: 06      	        DB 00000110b   ;    ## 
1055: 04      	        DB 00000100b   ;    # 
1056: 34      	        DB 00110100b   ; ## #
1057: 14      	        DB 00010100b   ;  # # 
1058: 08      	        DB 00001000b   ;   # 
1059: 00      	        DB 00000000b   ; 
              	        ;224
105A: 1E      	        DB 00011110b   ;  #### 
105B: 0E      	        DB 00001110b   ;   ### 
105C: 0E      	        DB 00001110b   ;   ### 
105D: 12      	        DB 00010010b   ;  #  #
105E: 20      	        DB 00100000b   ; # 
105F: 00      	        DB 00000000b   ; 
              	        ;225
1060: 20      	        DB 00100000b   ; #
1061: 12      	        DB 00010010b   ;  #  #
1062: 0E      	        DB 00001110b   ;   ###
1063: 0E      	        DB 00001110b   ;   ###
1064: 1E      	        DB 00011110b   ;  ####
1065: 00      	        DB 00000000b   ; 
              	        ;226
1066: 02      	        DB 00000010b   ;      #
1067: 24      	        DB 00100100b   ;  #  #
1068: 38      	        DB 00111000b   ;  ###
1069: 38      	        DB 00111000b   ;  ###
106A: 3C      	        DB 00111100b   ;  #### 
106B: 00      	        DB 00000000b   ; 
              	        ;227
106C: 3C      	        DB 00111100b   ; ####
106D: 38      	        DB 00111000b   ; ###
106E: 38      	        DB 00111000b   ; ###
106F: 24      	        DB 00100100b   ; #  # 
1070: 02      	        DB 00000010b   ;     #
1071: 00      	        DB 00000000b   ; 
              	        ;228
1072: 3E      	        DB 00111110b   ; #####
1073: 22      	        DB 00100010b   ; #   #
1074: 22      	        DB 00100010b   ; #   #
1075: 22      	        DB 00100010b   ; #   #
1076: 3E      	        DB 00111110b   ; #####
1077: 00      	        DB 00000000b   ; 
              	        ;229
1078: 3E      	        DB 00111110b   ; #####
1079: 26      	        DB 00100110b   ; #  ##
107A: 2A      	        DB 00101010b   ; # # #
107B: 32      	        DB 00110010b   ; ##  #
107C: 3E      	        DB 00111110b   ; #####
107D: 00      	        DB 00000000b   ; 
              	        ;230
107E: 08      	        DB 00001000b   ;   # 
107F: 12      	        DB 00010010b   ;  #  #
1080: 24      	        DB 00100100b   ; #  #
1081: 12      	        DB 00010010b   ;  #  #
1082: 08      	        DB 00001000b   ;   # 
1083: 00      	        DB 00000000b   ; 
              	        ;231
1084: 08      	        DB 00001000b   ;   # 
1085: 24      	        DB 00100100b   ; #  #
1086: 12      	        DB 00010010b   ;  #  #
1087: 24      	        DB 00100100b   ; #  #
1088: 08      	        DB 00001000b   ;   # 
1089: 00      	        DB 00000000b   ; 
              	        ;232 TEC-1G
108A: 1D      	        DB 00011101b   ;  ### #
108B: 08      	        DB 00001000b   ;   #
108C: 09      	        DB 00001001b   ;   #  #
108D: 08      	        DB 00001000b   ;   #
108E: 09      	        DB 00001001b   ;   #  #
108F: 00      	        DB 00000000b   ; 
              	        ;233 TEC-1G
1090: 37      	        DB 00110111b   ; ## ###
1091: 04      	        DB 00000100b   ;    #
1092: 34      	        DB 00110100b   ; ## #
1093: 04      	        DB 00000100b   ;    #
1094: 37      	        DB 00110111b   ; ## ###
1095: 00      	        DB 00000000b   ; 
              	        ;234 TEC-1G
1096: 00      	        DB 00000000b   ; 
1097: 01      	        DB 00000001b   ;      #
1098: 1C      	        DB 00011100b   ;  ###
1099: 00      	        DB 00000000b   ; 
109A: 00      	        DB 00000000b   ; 
109B: 00      	        DB 00000000b   ; 
              	        ;235 TEC-1G
109C: 2E      	        DB 00101110b   ; # ###
109D: 28      	        DB 00101000b   ; # #
109E: 2A      	        DB 00101010b   ; # # #
109F: 2A      	        DB 00101010b   ; # # #
10A0: 2E      	        DB 00101110b   ; # ###
10A1: 00      	        DB 00000000b   ; 
              	        ;236 Z80
10A2: 1D      	        DB 00011101b   ;  ### #
10A3: 05      	        DB 00000101b   ;    # #
10A4: 09      	        DB 00001001b   ;   #  #
10A5: 11      	        DB 00010001b   ;  #   #
10A6: 1D      	        DB 00011101b   ;  ### #
10A7: 00      	        DB 00000000b   ; 
              	        ;237 Z80
10A8: 37      	        DB 00110111b   ; ## ###
10A9: 15      	        DB 00010101b   ;  # # #
10AA: 35      	        DB 00110101b   ; ## # #
10AB: 15      	        DB 00010101b   ;  # # #
10AC: 37      	        DB 00110111b   ; ## ###
10AD: 00      	        DB 00000000b   ; 
              	        ;238 CPU
10AE: 1D      	        DB 00011101b   ;  ### #
10AF: 11      	        DB 00010001b   ;  #   #
10B0: 11      	        DB 00010001b   ;  #   #
10B1: 11      	        DB 00010001b   ;  #   #
10B2: 1D      	        DB 00011101b   ;  ### #
10B3: 00      	        DB 00000000b   ; 
              	        ;239 CPU
10B4: 35      	        DB 00110101b   ; ## # #
10B5: 15      	        DB 00010101b   ;  # # #
10B6: 35      	        DB 00110101b   ; ## # #
10B7: 05      	        DB 00000101b   ;    # #
10B8: 07      	        DB 00000111b   ;    ###
10B9: 00      	        DB 00000000b   ; 
              	        ;240
10BA: 00      	        DB 00000000b   ; 
10BB: 00      	        DB 00000000b   ; 
10BC: 00      	        DB 00000000b   ; 
10BD: 00      	        DB 00000000b   ; 
10BE: 00      	        DB 00000000b   ; 
10BF: 00      	        DB 00000000b   ; 
              	        ;241
10C0: 00      	        DB 00000000b   ; 
10C1: 00      	        DB 00000000b   ; 
10C2: 00      	        DB 00000000b   ; 
10C3: 00      	        DB 00000000b   ; 
10C4: 00      	        DB 00000000b   ; 
10C5: 00      	        DB 00000000b   ; 
              	        ;242
10C6: 00      	        DB 00000000b   ; 
10C7: 00      	        DB 00000000b   ; 
10C8: 00      	        DB 00000000b   ; 
10C9: 00      	        DB 00000000b   ; 
10CA: 00      	        DB 00000000b   ; 
10CB: 00      	        DB 00000000b   ; 
              	        ;243
10CC: 00      	        DB 00000000b   ; 
10CD: 00      	        DB 00000000b   ; 
10CE: 00      	        DB 00000000b   ; 
10CF: 00      	        DB 00000000b   ; 
10D0: 00      	        DB 00000000b   ; 
10D1: 00      	        DB 00000000b   ; 
              	        ;244
10D2: 00      	        DB 00000000b   ; 
10D3: 00      	        DB 00000000b   ; 
10D4: 00      	        DB 00000000b   ; 
10D5: 00      	        DB 00000000b   ; 
10D6: 00      	        DB 00000000b   ; 
10D7: 00      	        DB 00000000b   ; 
              	        ;245
10D8: 00      	        DB 00000000b   ; 
10D9: 00      	        DB 00000000b   ; 
10DA: 00      	        DB 00000000b   ; 
10DB: 00      	        DB 00000000b   ; 
10DC: 00      	        DB 00000000b   ; 
10DD: 00      	        DB 00000000b   ; 
              	        ;246
10DE: 00      	        DB 00000000b   ; 
10DF: 00      	        DB 00000000b   ; 
10E0: 00      	        DB 00000000b   ; 
10E1: 00      	        DB 00000000b   ; 
10E2: 00      	        DB 00000000b   ; 
10E3: 00      	        DB 00000000b   ; 
              	        ;247
10E4: 00      	        DB 00000000b   ; 
10E5: 00      	        DB 00000000b   ; 
10E6: 00      	        DB 00000000b   ; 
10E7: 00      	        DB 00000000b   ; 
10E8: 00      	        DB 00000000b   ; 
10E9: 00      	        DB 00000000b   ; 
              	        ;248
10EA: 00      	        DB 00000000b   ; 
10EB: 00      	        DB 00000000b   ; 
10EC: 00      	        DB 00000000b   ; 
10ED: 00      	        DB 00000000b   ; 
10EE: 00      	        DB 00000000b   ; 
10EF: 00      	        DB 00000000b   ; 
              	        ;249
10F0: 00      	        DB 00000000b   ; 
10F1: 00      	        DB 00000000b   ; 
10F2: 00      	        DB 00000000b   ; 
10F3: 00      	        DB 00000000b   ; 
10F4: 00      	        DB 00000000b   ; 
10F5: 00      	        DB 00000000b   ; 
              	        ;250
10F6: 00      	        DB 00000000b   ; 
10F7: 00      	        DB 00000000b   ; 
10F8: 00      	        DB 00000000b   ; 
10F9: 00      	        DB 00000000b   ; 
10FA: 00      	        DB 00000000b   ; 
10FB: 00      	        DB 00000000b   ; 
              	        ;251
10FC: 00      	        DB 00000000b   ; 
10FD: 00      	        DB 00000000b   ; 
10FE: 00      	        DB 00000000b   ; 
10FF: 00      	        DB 00000000b   ; 
1100: 00      	        DB 00000000b   ; 
1101: 00      	        DB 00000000b   ; 
              	        ;252
1102: 00      	        DB 00000000b   ; 
1103: 00      	        DB 00000000b   ; 
1104: 00      	        DB 00000000b   ; 
1105: 00      	        DB 00000000b   ; 
1106: 00      	        DB 00000000b   ; 
1107: 00      	        DB 00000000b   ; 
              	        ;253
1108: 00      	        DB 00000000b   ; 
1109: 00      	        DB 00000000b   ; 
110A: 00      	        DB 00000000b   ; 
110B: 00      	        DB 00000000b   ; 
110C: 00      	        DB 00000000b   ; 
110D: 00      	        DB 00000000b   ; 
              	        ;254
110E: 00      	        DB 00000000b   ; 
110F: 00      	        DB 00000000b   ; 
1110: 00      	        DB 00000000b   ; 
1111: 00      	        DB 00000000b   ; 
1112: 00      	        DB 00000000b   ; 
1113: 00      	        DB 00000000b   ; 
              	        ;255
1114: 00      	        DB 00000000b   ; 
1115: 00      	        DB 00000000b   ; 
1116: 00      	        DB 00000000b   ; 
1117: 00      	        DB 00000000b   ; 
1118: 00      	        DB 00000000b   ; 
1119: 00      	        DB 00000000b   ; 
              	        ;256
111A: 00      	        DB 00000000b   ; 
111B: 00      	        DB 00000000b   ; 
111C: 00      	        DB 00000000b   ; 
111D: 00      	        DB 00000000b   ; 
111E: 00      	        DB 00000000b   ; 
111F: 01      	        DB 00000001b   ;      #
              	        
              	
              	;    JP INIT_LCD             ;Initalise the LCD
              	;    JP CLEAR_GBUF           ;Clear the Graphics Buffer
              	;    JP CLEAR_GR_LCD         ;Clear the Graphics LCD Screen
              	;    JP CLEAR_TXT_LCD        ;Clear the Text LCD Screen
              	;    JP SET_GR_MODE          ;Set Graphics Mode
              	;    JP SET_TXT_MODE         ;Set Text Mode
              	;    JP DRAW_BOX             ;Draw a rectangle between two points
              	;    JP DRAW_LINE            ;Draw a line between two points
              	;    JP DRAW_CIRCLE          ;Draw a circle from Mid X,Y to Radius
              	;    JP DRAW_PIXEL           ;Draw one pixel at X,Y
              	;    JP FILL_BOX             ;Draw a filled rectangle between two points
              	;    JP FILL_CIRCLE          ;Draw a filled circle from Mid X,Y to Radius
              	;    JP PLOT_TO_LCD          ;Display the Graphics Buffer to the LCD Screen
              	;    JP PRINT_STRING         ;Print Text on the screen in a given row
              	;    JP PRINT_CHARS          ;Print Characters on the screen in a given row and column
              	;    JP DELAY_US             ;Microsecond delay for LCD updates
              	;    JP DELAY_MS             ;Millisecond delay for LCD updates
              	;    JP SET_BUF_CLEAR        ;Clear the Graphics buffer on after Plotting to the screen
              	;    JP SET_BUF_NO_CLEAR     ;Retain the Graphics buffer on after Plotting to the screen
              	;    JP CLEAR_PIXEL          ;Remove a Pixel at X,Y
              	;    JP FLIP_PIXEL           ;Flip a Pixel On/Off at X,Y
              	;    JP LCD_INST             ;Send a parallel or serial instruction to LCD
              	;    JP LCD_DATA             ;Send a parallel or serial datum to LCD
              	;    JP SER_SYNC             ;Send serial synchronise byte to LCD
              	;    JP DRAW_GRAPHIC         ;Draw an ASCII charcter or Sprite to the LCD
              	;    JP INV_GRAPHIC          ;Inverse graphics printing
              	;    JP INIT_TERMINAL        ;Initialize the LCD for terminal emulation
              	;    JP SEND_CHAR_TO_GLCD    ;Send an ASCII Character to the LCD
              	;    JP SEND_STRING_TO_GLCD  ;Send an ASCII String to the LCD
              	;    JP SEND_A_TO_GLCD       ;Send register A to the LCD
              	;    JP SEND_HL_TO_GLCD      ;Send register HL to the LCD
              	;    JP SET_CURSOR           ;Set the graphics cursor
              	;    JP GET_CURSOR           ;Get the current cursor
              	;    JP DISPLAY_CURSOR       ;Set Cursor on or off
              	#include "I2C.asm"
              	; **********************************************************************
              	; I2C support functions
              	
              	; I2C bus open device
              	;   On entry: A = Device address (bit zero is read flag)
              	;             SCL = unknown, SDA = unknown
              	;   On exit:  If successfully A = 0 and Z flagged
              	;             If unsuccessfully A = Error and NZ flagged
              	;             BC DE HL IX IY preserved
1120: F5      	I2C_Open:   PUSH AF
1121: CD9411  	            CALL I2C_Start      ;Output start condition
1124: F1      	            POP  AF
1125: 1803    	            JR   I2C_Write      ;Write data byte
              	
              	
              	; I2C bus close device
              	;   On entry: SCL = unknown, SDA = unknown
              	;   On exit:  If successfully A=0 and Z flagged
              	;             If unsuccessfully A=Error and NZ flagged
              	;             SCL = hi, SDA = hi
              	;             BC DE HL IX IY preserved
1127: C39F11  	I2C_Close:  JP   I2C_Stop       ;Output stop condition
              	
              	
              	; **********************************************************************
              	; **********************************************************************
              	; I2C bus master driver
              	; **********************************************************************
              	; **********************************************************************
              	
              	; Functions provided are:
              	;     I2C_Start
              	;     I2C_Stop
              	;     I2C_Read
              	;     I2C_Write
              	;
              	; This code has delays between all I/O operations to ensure it works
              	; with the slowest I2C devices
              	;
              	; I2C transfer sequence
              	;   +-------+  +---------+  +---------+     +---------+  +-------+
              	;   | Start |  | Address |  | Data    | ... | Data    |  | Stop  |
              	;   |       |  | frame   |  | frame 1 |     | frame N |  |       |
              	;   +-------+  +---------+  +---------+     +---------+  +-------+
              	;
              	;
              	; Start condition                     Stop condition
              	; Output by master device             Output by master device
              	;       ----+                                      +----
              	; SDA       |                         SDA          |
              	;           +-------                        -------+
              	;       -------+                                +-------
              	; SCL          |                      SCL       |
              	;              +----                        ----+
              	;
              	;
              	; Address frame
              	; Clock and data output from master device
              	; Receiving device outputs acknowledge 
              	;        +-----+-----+-----+-----+-----+-----+-----+-----+     +---+
              	; SDA    | A 7 | A 6 | A 5 | A 4 | A 3 | A 2 | A 1 | R/W | ACK |   |
              	;     ---+-----+-----+-----+-----+-----+-----+-----+-----+-----+   +---
              	;          +-+   +-+   +-+   +-+   +-+   +-+   +-+   +-+   +-+
              	; SCL      | |   | |   | |   | |   | |   | |   | |   | |   | |
              	;     -----+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ +---------
              	;
              	;
              	; Data frame 
              	; Clock output by master device
              	; Data output by transmitting device
              	; Receiving device outputs acknowledge 
              	;        +-----+-----+-----+-----+-----+-----+-----+-----+     +---+
              	; SDA    | D 7 | D 6 | D 5 | D 4 | D 3 | D 2 | D 1 | D 0 | ACK |   |
              	;     ---+-----+-----+-----+-----+-----+-----+-----+-----+-----+   +---
              	;          +-+   +-+   +-+   +-+   +-+   +-+   +-+   +-+   +-+
              	; SCL      | |   | |   | |   | |   | |   | |   | |   | |   | |
              	;     -----+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ +---------
              	;
              	
              	
              	; **********************************************************************
              	; I2C constants
              	
              	
              	; I2C bus master interface
              	; The default device option is for SC126 or compatible
              	
0021:         	I2C_PORT:   .EQU $21           ;Host I2C port address
0007:         	I2C_SDA_WR: .EQU 7              ;Host I2C write SDA bit number
0007:         	I2C_SDA_RD: .EQU 7              ;Host I2C read SDA bit number
0000:         	I2C_SCL_WR: .EQU 0              ;Host I2C write SCL bit number
0000:         	I2C_SCL_RD: .EQU 0              ;Host I2C read SCL bit number 
0081:         	I2C_QUIES:  .EQU 0b10000001     ;Host I2C output port quiescent value
              	
              	
              	; I2C support constants
0000:         	ERR_NONE:   .EQU 0              ;Error = None
0001:         	ERR_JAM:    .EQU 1              ;Error = Bus jammed [not used]
0002:         	ERR_NOACK:  .EQU 2              ;Error = No ackonowledge
0003:         	ERR_TOUT:   .EQU 3              ;Error = Timeout
              	
              	
              	; **********************************************************************
              	; Hardware dependent I2C bus functions
              	
              	
              	; I2C bus transmit frame (address or data)
              	;   On entry: A = Data byte, or
              	;                 Address byte (bit zero is read flag)
              	;             SCL = low, SDA = low
              	;   On exit:  If successful A=0 and Z flagged
              	;                SCL = lo, SDA = lo
              	;             If unsuccessful A=Error and NZ flagged
              	;                SCL = high, SDA = high, I2C closed
              	;             BC DE HL IX IY preserved
112A: C5      	I2C_Write:  PUSH BC             ;Preserve registers
112B: D5      	            PUSH DE
112C: 57      	            LD   D,A            ;Store byte to be written
112D: 0608    	            LD   B,8            ;8 data bits, bit 7 first
112F: CB12    	I2C_WriteWr_Loop:   RL   D              ;Test M.S.Bit
1131: 3805    	            JR   C,I2C_WriteBit_Hi      ;High, so skip
1133: CDC611  	            CALL I2C_SDA_LO     ;SDA low   (SCL lo, SDA = data bit)
1136: 1803    	            JR   I2C_WriteBit_Clk
1138: CDBF11  	I2C_WriteBit_Hi:    CALL I2C_SDA_HI     ;SDA high  (SCL lo, SDA = data bit)
113B: CDB111  	I2C_WriteBit_Clk:   CALL I2C_SCL_HI     ;SCL high  (SCL hi, SDA = data bit)
113E: CDB811  	            CALL I2C_SCL_LO     ;SCL low   (SCL lo, SDA = data bit)
1141: 10EC    	            DJNZ I2C_WriteWr_Loop
              	; Test for acknowledge from slave (receiver)
              	; On arriving here, SCL = lo, SDA = data bit
1143: CDBF11  	            CALL I2C_SDA_HI     ;SDA high  (SCL lo, SDA hi/ack)
1146: CDB111  	            CALL I2C_SCL_HI     ;SCL high  (SCL hi, SDA hi/ack)
1149: CDD711  	            CALL I2C_RdPort     ;Read SDA input
114C: 47      	            LD   B,A
114D: CDB811  	            CALL I2C_SCL_LO     ;SCL low   (SCL lo, SDA = hi)
1150: CB78    	            BIT  I2C_SDA_RD,B
1152: 2004    	            JR   NZ,I2C_WriteNoAck      ;Skip if no acknowledge
1154: D1      	            POP  DE             ;Restore registers
1155: C1      	            POP  BC
1156: AF      	            XOR  A              ;Return success A=0 and Z flagged
1157: C9      	            RET
              	; I2C STOP required as no acknowledge
              	; On arriving here, SCL = lo, SDA = hi
1158: CDC611  	I2C_WriteNoAck:     CALL I2C_SDA_LO     ;SDA low   (SCL lo, SDA = lo)
115B: CDB111  	            CALL I2C_SCL_HI     ;SCL high  (SCL hi, SDA = lo)
115E: CDBF11  	            CALL I2C_SDA_HI     ;SDA low   (SCL hi, SDA = hi)
1161: D1      	            POP  DE             ;Restore registers
1162: C1      	            POP  BC
1163: 3E02    	            LD   A,ERR_NOACK    ;Return error = No Acknowledge
1165: B7      	            OR   A              ;  and NZ flagged
1166: C9      	            RET
              	
              	
              	; I2C bus receive frame (data)
              	;   On entry: A = Acknowledge flag
              	;               If A != 0 the read is acknowledged
              	;             SCL low, SDA low
              	;   On exit:  If successful A = data byte and Z flagged
              	;               SCL = low, SDA = low
              	;             If unsuccessul* A = Error and NZ flagged
              	;               SCL = low, SDA = low
              	;             BC DE HL IX IY preserved
              	; *This function always returns successful
1167: C5      	I2C_Read:   PUSH BC             ;Preserve registers
1168: D5      	            PUSH DE
1169: 5F      	            LD   E,A            ;Store acknowledge flag
116A: 0608    	            LD   B,8            ;8 data bits, 7 first
116C: CDBF11  	            CALL I2C_SDA_HI     ;SDA high  (SCL lo, SDA hi/input)
116F: CDB111  	I2C_ReadRd_Loop:   CALL I2C_SCL_HI     ;SCL high  (SCL hi, SDA hi/input)
1172: CDD711  	            CALL I2C_RdPort     ;Read SDA input bit
1175: 37      	            SCF                 ;Set carry flag
1176: CB7F    	            BIT  I2C_SDA_RD,A   ;SDA input high?
1178: 2001    	            JR   NZ, I2C_ReadRotate     ;Yes, skip with carry flag set
117A: 3F      	            CCF                 ;Clear carry flag
117B: CB12    	I2C_ReadRotate:    RL   D              ;Rotate result into D
117D: CDB811  	            CALL I2C_SCL_LO     ;SCL low   (SCL lo, SDA hi/input)
1180: 10ED    	            DJNZ  I2C_ReadRd_Loop       ;Repeat for all 8 bits
              	; Acknowledge input byte
              	; On arriving here, SCL = lo, SDA = hi/input
1182: 7B      	            LD   A,E            ;Get acknowledge flag
1183: B7      	            OR   A              ;A = 0? (indicates no acknowledge)
1184: 2803    	            JR   Z, I2C_ReadNoAck       ;Yes, so skip acknowledge
1186: CDC611  	            CALL I2C_SDA_LO     ;SDA low   (SCL lo, SDA lo)
1189: CDB111  	I2C_ReadNoAck:     CALL I2C_SCL_HI     ;SCL hi    (SCL hi, SDA lo)
118C: CDB811  	            CALL I2C_SCL_LO     ;SCL low   (SCL lo, SDA lo)
118F: 7A      	            LD   A,D            ;Get data byte received
1190: D1      	            POP  DE             ;Restore registers
1191: C1      	            POP  BC
1192: BF      	            CP   A              ;Return success Z flagged
1193: C9      	            RET
              	
              	
              	; I2C bus start
              	;   On entry: SCL = unknown, SDA = unknown
              	;   On exit:  SCL = low, SDA = low
              	;             A = 0 and Z flagged as we always succeed
              	;             BC DE HL IX IY preserved
              	; First ensure SDA and SCL are high
1194: CDAD11  	I2C_Start:  CALL I2C_INIT       ;Initialise I2C control port
              	;           CALL I2C_SCL_HI     ;SCL high  (SCL hi, SDA ??)
              	;           CALL I2C_SDA_HI     ;SDA high  (SCL hi, SDA hi)
              	; Generate I2C start condition
1197: CDC611  	            CALL I2C_SDA_LO     ;SDA low   (SCL hi, SDA lo)
119A: CDB811  	            CALL I2C_SCL_LO     ;SCL low   (SCL lo, SDA lo)
119D: AF      	            XOR  A              ;Return success A=0 and Z flagged
119E: C9      	            RET
              	
              	
              	; I2C bus stop 
              	;   On entry: SCL = unknown, SDA = unknown
              	;   On exit:  SCL = high, SDA = high
              	;             A = 0 and Z flagged as we always succeed
              	;             BC DE HL IX IY preserved
              	; First ensure SDA and SCL are low
119F: CDC611  	I2C_Stop:   CALL I2C_SDA_LO     ;SDA low   (SCL hi, SDA lo)
11A2: CDB811  	            CALL I2C_SCL_LO     ;SCL low   (SCL lo, SDA lo)
              	; Generate stop condition
11A5: CDB111  	            CALL I2C_SCL_HI     ;SCL high  (SCL hi, SDA lo)
11A8: CDBF11  	            CALL I2C_SDA_HI     ;SDA low   (SCL hi, SDA hi)
11AB: AF      	            XOR  A              ;Return success A=0 and Z flagged
11AC: C9      	            RET
              	
              	
              	; **********************************************************************
              	; I2C bus simple I/O functions
              	;   On entry: No parameters required
              	;   On exit:  BC DE HL IX IY preserved
              	
11AD: 3E81    	I2C_INIT:   LD   A,I2C_QUIES    ;I2C control port quiescent value
11AF: 181A    	            JR   I2C_WrPort
              	
11B1: 3A9BFB  	I2C_SCL_HI: LD   A,(I2C_RAMCPY)
11B4: CBC7    	            SET  I2C_SCL_WR,A
11B6: 1813    	            JR   I2C_WrPort
              	
11B8: 3A9BFB  	I2C_SCL_LO: LD   A,(I2C_RAMCPY)
11BB: CB87    	            RES  I2C_SCL_WR,A
11BD: 180C    	            JR   I2C_WrPort
              	
11BF: 3A9BFB  	I2C_SDA_HI: LD   A,(I2C_RAMCPY)
11C2: CBFF    	            SET  I2C_SDA_WR,A
11C4: 1805    	            JR   I2C_WrPort
              	
11C6: 3A9BFB  	I2C_SDA_LO: LD   A,(I2C_RAMCPY)
11C9: CBBF    	            RES  I2C_SDA_WR,A
              	
11CB: C5      	I2C_WrPort: PUSH BC             ;Preserve registers
11CC: 0600    	            LD   B,0            ;Set up BC for 16-bit
11CE: 0E21    	            LD   C,I2C_PORT     ;  I/O address of I2C port
11D0: ED79    	            OUT  (C),A          ;Write A to I2C I/O port
11D2: 329BFB  	            LD   (I2C_RAMCPY),A ;Write A to RAM copy
11D5: C1      	            POP  BC             ;Restore registers
11D6: C9      	            RET
              	
11D7: C5      	I2C_RdPort: PUSH BC             ;Preserve registers
11D8: 0600    	            LD   B,0            ;Set up BC for 16-bit
11DA: 0E21    	            LD   C,I2C_PORT     ;  I/O address of I2C port
11DC: ED78    	            IN   A,(C)          ;Read A from I/O port
11DE: C1      	            POP  BC             ;Restore registers
11DF: C9      	            RET
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	;==============================================================================
              	;==============================================================================
              	;==============================================================================
              	;===================       FUNCTIONS    =======================================
              	;==============================================================================
              	;==============================================================================
              	
              	
              	
              	
              	; **********************************************************************
              	; List devices found on the I2C bus
              	;
              	; Test each I2C device address and reports any that acknowledge
              	
11E0: 214013  	I2CLIST:    LD   HL, I2C_LIST_MSG        ;Address of message string
11E3: AF      	            XOR A ; A = character to stop printing.
11E4: CD9605  	            CALL LCD_PRINT_STRING         ;Output string
11E7: 1600    	            LD   D,0            ;First I2C device address to test
11E9: D5      	LISTLOOP:      PUSH DE             ;Preserve DE
11EA: 7A      	            LD   A,D            ;Get device address to be tested
11EB: CD0612  	            CALL LISTTEST          ;Test if device is present
11EE: D1      	            POP  DE             ;Restore DE
11EF: 2009    	            JR   NZ,LISTNEXT       ;Skip if no acknowledge
11F1: 7A      	            LD   A,D            ;Get address of device tested
11F2: CD7A12  	            CALL HexOut         ;Output as two character hex 
11F5: 3E20    	            LD A, ' '; space
11F7: CDB205  	            CALL LCD_PRINT_A       ;Output space character
11FA: 14      	LISTNEXT:      INC  D              ;Get next write address
11FB: 14      	            INC  D
11FC: 7A      	            LD   A,D            ;Address of next device to test
11FD: B7      	            OR   A              ;Have we tested all addresses?
11FE: 20E9    	            JR   NZ,LISTLOOP       ;No, so loop again
1200: 3E0D    	            LD A, CR; enter
1202: CDB205  	            CALL LCD_PRINT_A       ;Output space character
1205: C9      	            RET
              	
              	; Test if device at I2C address A acknowledges
              	;   On entry: A = I2C device address (8-bit, bit 0 = lo for write)
              	;   On exit:  Z flagged if device acknowledges
              	;             NZ flagged if devices does not acknowledge
1206: CD2011  	LISTTEST:      CALL I2C_Open       ;Open I2C device for write
1209: C0      	            RET  NZ             ;Abort if failed to open
120A: CD2711  	            CALL I2C_Close      ;Close I2C device 
120D: AF      	            XOR  A              ;Return with Z flagged
120E: C9      	            RET
              	
              	
              	
              	
              	; Copy a block from I2C memory to CPU memory
              	;   On entry: DE = First address in I2C memory
              	;             HL = First address in CPU memory
              	;             BC = Number of bytes to be copied
              	;             SCL = unknown, SDA = unknown
              	;   On exit:  If successfully A = 0 and Z flagged
              	;             If unsuccessfully A = Error and NZ flagged
              	;             IX IY preserved
120F: C5      	I2C_MemRd:  PUSH BC
1210: 011027  	            LD   BC,TIMEOUT     ;Timeout loop counter
1213: 3EAE    	I2C_MemRdRepeat:    LD   A,I2CA_BLOCK   ;I2C address to write to
1215: CD2011  	            CALL I2C_Open       ;Open for write
1218: 280A    	            JR   Z,I2C_MemRdReady       ;If open okay then skip on
121A: 0B      	            DEC  BC
121B: 78      	            LD   A,B
121C: B1      	            OR   C              ;Timeout?
121D: 20F4    	            JR   NZ,I2C_MemRdRepeat     ;No, so go try again
121F: C1      	            POP  BC
1220: 3E03    	            LD   A,ERR_TOUT     ;Error code
1222: B7      	            OR   A              ;Error, so NZ flagged
1223: C9      	            RET                 ;Return with error
              	; Device opened okay
1224: C1      	I2C_MemRdReady:     POP  BC             ;Restore byte counter
1225: 7A      	            LD   A,D            ;Address (hi) in I2C memory
1226: CD2A11  	            CALL I2C_Write      ;Write address
1229: 7B      	            LD   A,E            ;Address (lo) in I2C memory
122A: CD2A11  	            CALL I2C_Write      ;Write address
122D: 3EAF    	            LD   A,I2CA_BLOCK+1 ;I2C device to be read from
122F: CD2011  	            CALL I2C_Open       ;Open for read
1232: C0      	            RET  NZ             ;Abort if error
1233: 0B      	I2C_MemRdRead:      DEC  BC             ;Decrement byte counter
1234: 78      	            LD   A,B
1235: B1      	            OR   C              ;Last byte to be read?
1236: CD6711  	            CALL I2C_Read       ;Read byte with no ack on last byte
1239: 77      	            LD   (HL),A         ;Write byte in CPU memory
123A: 23      	            INC  HL             ;Increment CPU memory pointer
123B: 78      	            LD   A,B
123C: B1      	            OR   C              ;Finished?
123D: 20F4    	            JR   NZ,I2C_MemRdRead       ;No, so go read next byte
123F: CD9F11  	            CALL I2C_Stop       ;Generate I2C stop
1242: AF      	            XOR  A              ;Return with success (Z flagged)
1243: C9      	            RET
              	
              	
              	; Copy a block from CPU memory to I2C memory
              	;   On entry: DE = First address in I2C memory
              	;             HL = First address in CPU memory
              	;             BC = Number of bytes to be copied
              	;             SCL = unknown, SDA = unknown
              	;   On exit:  If successfully A = 0 and Z flagged
              	;             If unsuccessfully A = Error and NZ flagged
              	;             IX IY preserved
              	; The 24LC64 requires blocks of data to be written in 64 byte (or less)
              	; pages.
1244: C5      	I2C_MemWr:  PUSH BC
1245: 011027  	            LD   BC,TIMEOUT     ;Timeout loop counter
1248: 3EAE    	I2C_MemWrRepeat:    LD   A,I2CA_BLOCK   ;I2C address to write to
124A: CD2011  	            CALL I2C_Open       ;Open for write
124D: 280A    	            JR   Z,I2C_MemWrReady       ;If open okay then skip on
124F: 0B      	            DEC  BC
1250: 78      	            LD   A,B
1251: B1      	            OR   C              ;Timeout?
1252: 20F4    	            JR   NZ,I2C_MemWrRepeat     ;No, so go try again
1254: C1      	            POP  BC
1255: 3E03    	            LD   A,ERR_TOUT     ;Error code
1257: B7      	            OR   A              ;Error, so NZ flagged
1258: C9      	            RET                 ;Return with error
              	; Device opened okay
1259: C1      	I2C_MemWrReady:     POP  BC             ;Restore byte counter
125A: 7A      	I2C_MemWrBlock:     LD   A,D            ;Address (hi) in I2C memory
125B: CD2A11  	            CALL I2C_Write      ;Write address
125E: 7B      	            LD   A,E            ;Address (lo) in I2C memory
125F: CD2A11  	            CALL I2C_Write      ;Write address
1262: 7E      	I2C_MemWrWrite:     LD   A,(HL)         ;Get data byte from CPU memory
1263: CD2A11  	            CALL I2C_Write      ;Read byte from I2C memory
1266: 23      	            INC  HL             ;Increment CPU memory pointer
1267: 13      	            INC  DE             ;Increment I2C memory pointer
1268: 0B      	            DEC  BC             ;Decrement byte counter
1269: 78      	            LD   A,B
126A: B1      	            OR   C              ;Finished?
126B: 2805    	            JR   Z,I2C_MemWrStore       ;Yes, so go store this page
126D: 7B      	            LD   A,E            ;Get address in I2C memory (lo byte)
126E: E63F    	            AND  63             ;64 byte page boundary?
1270: 20F0    	            JR   NZ,I2C_MemWrWrite      ;No, so go write another byte
1272: CD9F11  	I2C_MemWrStore:     CALL I2C_Stop       ;Generate I2C stop
1275: 78      	            LD   A,B
1276: B1      	            OR   C              ;Finished?
1277: 20CB    	            JR   NZ,I2C_MemWr   ;No, so go write some more
1279: C9      	            RET   
              	
              	
              	; Hex byte output to console
              	;   On entry: A = Byte to be output in hex
              	;   On exit:  BC DE HL IX IY preserved
127A: F5      	HexOut:     PUSH AF             ;Preserve byte to be output
127B: 1F      	            RRA                 ;Shift top nibble to
127C: 1F      	            RRA                 ;  botom four bits..
127D: 1F      	            RRA
127E: 1F      	            RRA
127F: E60F    	            AND  $0F           ;Mask off unwanted bits
1281: CD8712  	            CALL HexOutHex           ;Output hi nibble
1284: F1      	            POP  AF             ;Restore byte to be output
1285: E60F    	            AND  $0F           ;Mask off unwanted bits
              	; Output nibble as ascii character
1287: FE0A    	HexOutHex:       CP   $0A           ;Nibble > 10 ?
1289: 3802    	            JR   C,HexOutSkip        ;No, so skip
128B: C607    	            ADD  A,7            ;Yes, so add 7
128D: C630    	HexOutSkip:      ADD  A,$30         ;Add ASCII '0'
128F: CD0800  	            CALL $0008       ;Write character
1292: C9      	            RET
              	
              	
              	
              	
              	
              	
1293:         	msg_help:
1293: 0D0A    			.BYTE	CR, LF
1295: 52202020			.TEXT	"R           - Reset"
1299: 20202020	
129D: 20202020	
12A1: 2D205265	
12A5: 736574  	
12A8: 0D0A    			.BYTE	CR, LF
12AA: 47202020			.TEXT	"G           - Goto nnnn"
12AE: 20202020	
12B2: 20202020	
12B6: 2D20476F	
12BA: 746F206E	
12BE: 6E6E6E  	
12C1: 0D0A    			.BYTE	CR, LF
12C3: 3A6E6E6E			.TEXT	":nnnnnn...  - Load Intel-Hex file record"
12C7: 6E6E6E2E	
12CB: 2E2E2020	
12CF: 2D204C6F	
12D3: 61642049	
12D7: 6E74656C	
12DB: 2D486578	
12DF: 2066696C	
12E3: 65207265	
12E7: 636F7264	
12EB: 0D0A    			.BYTE	CR, LF
12ED: 00      	        .BYTE   $00
              	
12EE:         	CKSUMERR:
12EE: 43686563			.BYTE	"Checksum error"
12F2: 6B73756D	
12F6: 20657272	
12FA: 6F72    	
12FC: 0D0A00  			.BYTE	CR, LF,$00
              	
12FF:         	LDETXT:
12FF: 4C6F6164			.TEXT	"Load complete."
1303: 20636F6D	
1307: 706C6574	
130B: 652E    	
130D: 0D0A00  			.BYTE	CR, LF, $00
              	
1310: 0C0D0D0A	WELLCOME: .db CS, CR, CR, LF,"Z80Mini - Game core", CR, LF, 00H
1314: 5A38304D	
1318: 696E6920	
131C: 2D204761	
1320: 6D652063	
1324: 6F72650D	
1328: 0A00    	
              	
132A: 5A38304D	WELLCOME_LCD: .db "Z80Mini - Game core", CR, CR, 00H
132E: 696E6920	
1332: 2D204761	
1336: 6D652063	
133A: 6F72650D	
133E: 0D00    	
              	
1340: 49324320	I2C_LIST_MSG:    .DB "I2C device found at:",CR,0
1344: 64657669	
1348: 63652066	
134C: 6F756E64	
1350: 2061743A	
1354: 0D00    	
1356: 202D202D	MSG_EOF  .db " - - - FIM - - - ", 00H
135A: 202D2046	
135E: 494D202D	
1362: 202D202D	
1366: 2000    	
1368: 5F455845	MSG_READFILE_EXE .db "_EXE", 00H
136C: 00      	
136D: 5F494D47	MSG_READFILE_IMG .db "_IMG", 00H
1371: 00      	
1372: 5F545854	MSG_READFILE_TXT .db "_TXT", 00H
1376: 00      	
              	
1377: 20537461	MENU_LCD_1:         .db " Start game", CR, 00H
137B: 72742067	
137F: 616D650D	
1383: 00      	
1384: 204C6F61	MENU_LCD_2:         .db " Load from card", CR, 00H
1388: 64206672	
138C: 6F6D2063	
1390: 6172640D	
1394: 00      	
1395: 20546573	MENU_LCD_3:         .db " Test keys", CR, 00H
1399: 74206B65	
139D: 79730D00	
13A1: 20526573	MENU_LCD_4:         .db " Reset", CR, 00H
13A5: 65740D00	
              	
              	
              	; RAM Locations - Move this section to RAM if necessary
              	;---------------
13A9: FFFFFFFF	.ORG $F000              ;Start location
13AD: FF...   	
              	        
0780:         	SBUF:   EQU 16 * $78     ;Scroll Buffer size  16 * 60 = 960 byte (10 lines), change to 20 lines (16 * 120($78))
F000: FFFFFFFF	        DS SBUF         ;Scroll Buffer space abover GBUF 
F004: FF...   	
F780: FFFFFFFF	GBUF:   DS 0400H        ;Graphics Buffer 16 * 64 = 1024 byte
F784: FF...   	
F780:         	TGBUF:  EQU GBUF        ;Terminal GBUF
FB80: 80F7    	VPORT:  DW GBUF         ;View port start address
FB82: 80F7    	TBUF:   DW GBUF         ;Top of Buffer pointer
FB84: 0000    	ENDPT:  DW 0000H        ;End Point for Line
FB86: 00      	SX:     DB 00H          ;Sign of X
FB87: 00      	SY:     DB 00H          ;Sign of Y
FB88: 0000    	DX:     DW 0000H        ;Change of X
FB8A: 0000    	DY:     DW 0000H        ;Change of Y
FB8C: 0000    	ERR:    DW 0000H        ;Error Rate
FB8E: 0000    	RAD:    DW 0000H        ;Radius
FB90: 00      	CLRBUF: DB 00H          ;Clear Buffer Flag on LCD Displaying
FB91: 0000    	CURSOR_XY: DW 0000H     ;Cursor Address X,Y
FB91:         	CURSOR_Y: EQU CURSOR_XY   ;Cursor Y
FB92:         	CURSOR_X: EQU CURSOR_XY+1 ;Cursor X
FB93: 00      	CURSOR_YS: DB 00H       ;Start Y row for new line
FB94: 00      	CURSOR_ON: DB 00H       ;Cursor on/off flag
FB95: 00      	INVERSE: DB 00H         ;Inverse Flag
FB96: 00      	PIXEL_X: DB 00H         ;Pixel X length
FB97: 0000    	INT_VEC: DW 0000H       ;Vetor de interrupção
FB99: 00      	GAMEPAD_KEY: DB 00H 	;Guarda tecla lida na interrupcao
FB9A: 00      	CURSOR_MENU:      .db $00	; Cursor menu
              	
FB9B: 00      	I2C_RAMCPY:         .DB    $00   ; 1 byte - RAM copy of output port
              	.end


; +++ segments +++

#CODE          = $0000 =     0,  size = $FB9C = 64412

; +++ global symbols +++

ABSHL               = $0748 =  1864          LCD.asm:450
BASE_COL            = $086B =  2155          LCD.asm:700
BCTOA               = $0523 =  1315          Z80MiniGame.asm:807
BCTOA1              = $052C =  1324          Z80MiniGame.asm:812
BCTOA2              = $053A =  1338          Z80MiniGame.asm:822
BDEL                = $0595 =  1429          LCD.asm:72
BKSP                = $0008 =     8          LCD.asm:64 (unused)
CIRCLE_LOOP         = $076E =  1902          LCD.asm:500
CKSIOA              = $04D2 =  1234          Z80MiniGame.asm:734
CKSUMERR            = $12EE =  4846          Z80MiniGame.asm:932
CLEAR_GBUF          = $060F =  1551          LCD.asm:190
CLEAR_GR_LCD        = $061F =  1567          LCD.asm:201
CLEAR_PIXEL         = $0838 =  2104          LCD.asm:645
CLEAR_TXT_LCD       = $0646 =  1606          LCD.asm:225
CLK_LOOP            = $0B04 =  2820          LCD.asm:1283
CLRBUF              = $FB90 = 64400          Z80MiniGame.asm:973
CLR_ROWS            = $0655 =  1621          LCD.asm:232
CLR_X               = $0624 =  1572          LCD.asm:204
CLR_Y               = $0637 =  1591          LCD.asm:214
CR                  = $000D =    13          LCD.asm:68
CS                  = $000C =    12          LCD.asm:67
CTRLC               = $0003 =     3          LCD.asm:73 (unused)
CURSOR              = $008F =   143          LCD.asm:70
CURSOR_MENU         = $FB9A = 64410          Z80MiniGame.asm:983
CURSOR_ON           = $FB94 = 64404          Z80MiniGame.asm:978
CURSOR_X            = $FB92 = 64402          Z80MiniGame.asm:976
CURSOR_XY           = $FB91 = 64401          Z80MiniGame.asm:974
CURSOR_Y            = $FB91 = 64401          Z80MiniGame.asm:975
CURSOR_YS           = $FB93 = 64403          Z80MiniGame.asm:977
DEC_CURSOR          = $0A54 =  2644          LCD.asm:1080
DEL                 = $007F =   127          LCD.asm:71
DELAY_DE            = $053F =  1343          Z80MiniGame.asm:838
DELAY_MS            = $08F0 =  2288          LCD.asm:809
DELAY_US            = $08ED =  2285          LCD.asm:807
DELETE_CHAR         = $05D6 =  1494          LCD.asm:143
DISPLAY_CURSOR      = $0A7E =  2686          LCD.asm:1111
DN                  = $00B6 =   182          LCD.asm:63
DO_BS               = $094B =  2379          LCD.asm:885 (unused)
DO_CHAR             = $0970 =  2416          LCD.asm:902
DO_CR               = $092D =  2349          LCD.asm:869
DO_FF               = $0947 =  2375          LCD.asm:882
DO_SCRL_DN          = $0925 =  2341          LCD.asm:864
DO_SCRL_UP          = $091A =  2330          LCD.asm:858 (unused)
DO_TAB              = $0959 =  2393          LCD.asm:892
DRAW_A              = $09A4 =  2468          LCD.asm:945
DRAW_BOX            = $066C =  1644          LCD.asm:254
DRAW_CIRCLE         = $0752 =  1874          LCD.asm:479
DRAW_CURSOR         = $0976 =  2422          LCD.asm:905
DRAW_GRAPHIC        = $0A8A =  2698          LCD.asm:1132
DRAW_LINE           = $06A7 =  1703          LCD.asm:331
DRAW_PIXEL          = $0827 =  2087          LCD.asm:625
DS1                 = $07DA =  2010          LCD.asm:568
DS2                 = $07FE =  2046          LCD.asm:587
DS3                 = $0811 =  2065          LCD.asm:599
DS_EXIT             = $08CD =  2253          LCD.asm:775
DS_LOOP             = $08C3 =  2243          LCD.asm:768
DX                  = $FB88 = 64392          Z80MiniGame.asm:969
DY                  = $FB8A = 64394          Z80MiniGame.asm:970
ECHO                = $053C =  1340          Z80MiniGame.asm:828
ENDPT               = $FB84 = 64388          Z80MiniGame.asm:966
ERR                 = $FB8C = 64396          Z80MiniGame.asm:971
ERR_JAM             = $0001 =     1          I2C.asm:98 (unused)
ERR_NOACK           = $0002 =     2          I2C.asm:99
ERR_NONE            = $0000 =     0          I2C.asm:97 (unused)
ERR_TOUT            = $0003 =     3          I2C.asm:100
FILL_BOX            = $0697 =  1687          LCD.asm:299
FILL_CIRCLE         = $0819 =  2073          LCD.asm:609
FLIP_PIXEL          = $084A =  2122          LCD.asm:666
FONT_DATA           = $0B20 =  2848          LCD.asm:1317
GAMEPAD             = $0040 =    64          Z80MiniGame.asm:57
GAMEPAD_KEY         = $FB99 = 64409          Z80MiniGame.asm:982
GBOTTOM             = $0678 =  1656          LCD.asm:266
GBUF                = $F780 = 63360          Z80MiniGame.asm:962
GET2                = $04E4 =  1252          Z80MiniGame.asm:759
GETCHR              = $04DB =  1243          Z80MiniGame.asm:747
GETHL               = $04F5 =  1269          Z80MiniGame.asm:774
GETX                = $0501 =  1281          Z80MiniGame.asm:784 (unused)
GETX1               = $0504 =  1284          Z80MiniGame.asm:785
GETX2               = $050D =  1293          Z80MiniGame.asm:790
GETX3               = $051D =  1309          Z80MiniGame.asm:800
GET_CURSOR          = $0A79 =  2681          LCD.asm:1104
GLEFT               = $0682 =  1666          LCD.asm:275
GOTO                = $049E =  1182          Z80MiniGame.asm:679
GRIGHT              = $068D =  1677          LCD.asm:285
GTOP                = $066D =  1645          LCD.asm:256
HELP                = $04A4 =  1188          Z80MiniGame.asm:687
HexOut              = $127A =  4730          I2C.asm:454
HexOutHex           = $1287 =  4743          I2C.asm:464
HexOutSkip          = $128D =  4749          I2C.asm:467
I2CA_BLOCK          = $00AE =   174          Z80MiniGame.asm:83
I2CLIST             = $11E0 =  4576          I2C.asm:325 (unused)
I2C_Close           = $1127 =  4391          I2C.asm:22
I2C_INIT            = $11AD =  4525          I2C.asm:228
I2C_LIST_MSG        = $1340 =  4928          Z80MiniGame.asm:944
I2C_MemRd           = $120F =  4623          I2C.asm:368
I2C_MemRdRead       = $1233 =  4659          I2C.asm:390
I2C_MemRdReady      = $1224 =  4644          I2C.asm:382
I2C_MemRdRepeat     = $1213 =  4627          I2C.asm:370
I2C_MemWr           = $1244 =  4676          I2C.asm:414
I2C_MemWrBlock      = $125A =  4698          I2C.asm:429 (unused)
I2C_MemWrReady      = $1259 =  4697          I2C.asm:428
I2C_MemWrRepeat     = $1248 =  4680          I2C.asm:416
I2C_MemWrStore      = $1272 =  4722          I2C.asm:444
I2C_MemWrWrite      = $1262 =  4706          I2C.asm:433
I2C_Open            = $1120 =  4384          I2C.asm:10
I2C_PORT            = $0021 =    33          I2C.asm:88
I2C_QUIES           = $0081 =   129          I2C.asm:93
I2C_RAMCPY          = $FB9B = 64411          Z80MiniGame.asm:985
I2C_RdPort          = $11D7 =  4567          I2C.asm:254
I2C_Read            = $1167 =  4455          I2C.asm:163
I2C_ReadNoAck       = $1189 =  4489          I2C.asm:183
I2C_ReadRd_Loop     = $116F =  4463          I2C.asm:168
I2C_ReadRotate      = $117B =  4475          I2C.asm:174
I2C_SCL_HI          = $11B1 =  4529          I2C.asm:231
I2C_SCL_LO          = $11B8 =  4536          I2C.asm:235
I2C_SCL_RD          = $0000 =     0          I2C.asm:92 (unused)
I2C_SCL_WR          = $0000 =     0          I2C.asm:91
I2C_SDA_HI          = $11BF =  4543          I2C.asm:239
I2C_SDA_LO          = $11C6 =  4550          I2C.asm:243
I2C_SDA_RD          = $0007 =     7          I2C.asm:90
I2C_SDA_WR          = $0007 =     7          I2C.asm:89
I2C_Start           = $1194 =  4500          I2C.asm:198
I2C_Stop            = $119F =  4511          I2C.asm:214
I2C_WrPort          = $11CB =  4555          I2C.asm:246
I2C_Write           = $112A =  4394          I2C.asm:116
I2C_WriteBit_Clk    = $113B =  4411          I2C.asm:125
I2C_WriteBit_Hi     = $1138 =  4408          I2C.asm:124
I2C_WriteNoAck      = $1158 =  4440          I2C.asm:143
I2C_WriteWr_Loop    = $112F =  4399          I2C.asm:120
INC_CURSOR          = $09D9 =  2521          LCD.asm:999
INC_ROW             = $09E6 =  2534          LCD.asm:1006
INIT                = $016C =   364          Z80MiniGame.asm:161
INIT_BASIC          = $0B16 =  2838          LCD.asm:1297
INIT_LCD            = $05FA =  1530          LCD.asm:176
INIT_TERMINAL       = $0903 =  2307          LCD.asm:832
INT38               = $037E =   894          Z80MiniGame.asm:514
INT38_END           = $0388 =   904          Z80MiniGame.asm:520
INT_VEC             = $FB97 = 64407          Z80MiniGame.asm:981
INVERSE             = $FB95 = 64405          Z80MiniGame.asm:979
INV_BIT             = $0ABA =  2746          LCD.asm:1169
INV_GRAPHIC         = $0A82 =  2690          LCD.asm:1118
KEYDOWN             = $031B =   795          Z80MiniGame.asm:455
KEYDOWN_RES         = $0331 =   817          Z80MiniGame.asm:465
KEYUP               = $02FD =   765          Z80MiniGame.asm:440
KEYUP_RES           = $0313 =   787          Z80MiniGame.asm:450
KEY_A               = $039F =   927          Z80MiniGame.asm:536
LCDCTRL             = $0070 =   112          Z80MiniGame.asm:55 (unused)
LCDDATA             = $0071 =   113          Z80MiniGame.asm:56 (unused)
LCD_CLEAR           = $05A6 =  1446          LCD.asm:98
LCD_CR              = $05AC =  1452          LCD.asm:106
LCD_DATA            = $0AEB =  2795          LCD.asm:1238
LCD_DR              = $0071 =   113          LCD.asm:51
LCD_IMAGE_128x64    = $05E1 =  1505          LCD.asm:156
LCD_INST            = $0AE6 =  2790          LCD.asm:1221
LCD_IR              = $0070 =   112          LCD.asm:50
LCD_PRINT_A         = $05B2 =  1458          LCD.asm:115
LCD_PRINT_A_FIM     = $05D1 =  1489          LCD.asm:136
LCD_PRINT_A_OK      = $05CE =  1486          LCD.asm:134
LCD_PRINT_STRING    = $0596 =  1430          LCD.asm:80
LCD_SER             = $0000 =     0          LCD.asm:52
LDETXT              = $12FF =  4863          Z80MiniGame.asm:936
LF                  = $000A =    10          LCD.asm:66
LINE_LOOP           = $0702 =  1794          LCD.asm:400
LISTLOOP            = $11E9 =  4585          I2C.asm:329
LISTNEXT            = $11FA =  4602          I2C.asm:338
LISTTEST            = $1206 =  4614          I2C.asm:351
LL2                 = $072D =  1837          LCD.asm:432
LL3                 = $073A =  1850          LCD.asm:440
LOAD                = $0554 =  1364          Z80MiniGame.asm:871
LOAD00              = $058E =  1422          Z80MiniGame.asm:907
LOAD2               = $0572 =  1394          Z80MiniGame.asm:887
LOAD3               = $0581 =  1409          Z80MiniGame.asm:898
LOADERR             = $0587 =  1415          Z80MiniGame.asm:903
LOAD_GAME           = $01F0 =   496          Z80MiniGame.asm:248
LoopBC              = $0545 =  1349          Z80MiniGame.asm:844
LoopDE              = $0542 =  1346          Z80MiniGame.asm:842
MENU1               = $0338 =   824          Z80MiniGame.asm:470
MENU2               = $0348 =   840          Z80MiniGame.asm:479
MENU3               = $0358 =   856          Z80MiniGame.asm:488
MENU4               = $0368 =   872          Z80MiniGame.asm:497
MENU_LCD_1          = $1377 =  4983          Z80MiniGame.asm:950
MENU_LCD_2          = $1384 =  4996          Z80MiniGame.asm:951
MENU_LCD_3          = $1395 =  5013          Z80MiniGame.asm:952
MENU_LCD_4          = $13A1 =  5025          Z80MiniGame.asm:953
MOVE_DOWN           = $0A49 =  2633          LCD.asm:1070
MOVE_UP             = $0A3B =  2619          LCD.asm:1061 (unused)
MOVE_VPORT          = $0A34 =  2612          LCD.asm:1056
MSG_EOF             = $1356 =  4950          Z80MiniGame.asm:945
MSG_READFILE_EXE    = $1368 =  4968          Z80MiniGame.asm:946
MSG_READFILE_IMG    = $136D =  4973          Z80MiniGame.asm:947
MSG_READFILE_TXT    = $1372 =  4978          Z80MiniGame.asm:948
NEW_LINE_LCD        = $0378 =   888          Z80MiniGame.asm:508
NEXT_CIRCLE         = $081B =  2075          LCD.asm:611
NEXT_CMD            = $05FF =  1535          LCD.asm:179
NEXT_PIXEL          = $0698 =  1688          LCD.asm:301
NIBBLE_TO_GLCD      = $09AD =  2477          LCD.asm:953
PC_LOOP             = $08E4 =  2276          LCD.asm:798
PIXEL_X             = $FB96 = 64406          Z80MiniGame.asm:980
PLOT_BIT            = $0ABE =  2750          LCD.asm:1173
PLOT_BYTE           = $0AA7 =  2727          LCD.asm:1153
PLOT_COLUMN         = $0897 =  2199          LCD.asm:732
PLOT_GRAPHIC        = $0A9D =  2717          LCD.asm:1147
PLOT_ROW            = $087F =  2175          LCD.asm:720
PLOT_TO_LCD         = $087A =  2170          LCD.asm:717
PRINT               = $04AB =  1195          Z80MiniGame.asm:696
PRINT_CHARS         = $08CE =  2254          LCD.asm:785
PRINT_STRING        = $08AC =  2220          LCD.asm:754
PS1                 = $0987 =  2439          LCD.asm:924
RAD                 = $FB8E = 64398          Z80MiniGame.asm:972
READ_FILE           = $0208 =   520          Z80MiniGame.asm:262
READ_FILE_EXE       = $0271 =   625          Z80MiniGame.asm:328
READ_FILE_IMG       = $0287 =   647          Z80MiniGame.asm:347
READ_FILE_IMG_K     = $029F =   671          Z80MiniGame.asm:367
READ_FILE_TXT       = $02A9 =   681          Z80MiniGame.asm:374
READ_FILE_TXT_L     = $02B7 =   695          Z80MiniGame.asm:388
READ_IIC_DE         = $02DC =   732          Z80MiniGame.asm:418
READ_MEM_FILES      = $01F0 =   496          Z80MiniGame.asm:249 (unused)
READ_MEM_KEY        = $021E =   542          Z80MiniGame.asm:275
READ_MEM_NEXT       = $01F3 =   499          Z80MiniGame.asm:251
READ_MEM_STEP       = $025A =   602          Z80MiniGame.asm:309
READ_MEM_STEP_L     = $0265 =   613          Z80MiniGame.asm:317
READ_NAME           = $0210 =   528          Z80MiniGame.asm:266
REMOVE_PIXEL        = $0AC8 =  2760          LCD.asm:1179
ROWS                = $0B12 =  2834          LCD.asm:1295
RST00               = $0000 =     0          Z80MiniGame.asm:91
RST08               = $0008 =     8          Z80MiniGame.asm:98 (unused)
RST10               = $0010 =    16          Z80MiniGame.asm:104 (unused)
RST38               = $0038 =    56          Z80MiniGame.asm:110 (unused)
SAVE_COL            = $0A59 =  2649          LCD.asm:1083
SAVE_ROW            = $09FA =  2554          LCD.asm:1017
SAVE_VPORT          = $0A44 =  2628          LCD.asm:1066
SBUF                = $0780 =  1920          Z80MiniGame.asm:960
SEND_A_TO_GLCD      = $099F =  2463          LCD.asm:942
SEND_CHAR_TO_GLCD   = $0917 =  2327          LCD.asm:854
SEND_HL_TO_GLCD     = $09BC =  2492          LCD.asm:965
SEND_PART           = $0AF9 =  2809          LCD.asm:1261
SEND_STRING_TO_GLCD = $0986 =  2438          LCD.asm:922
SER_BT              = $00F8 =   248          LCD.asm:61 (unused)
SER_BYTE            = $0AF0 =  2800          LCD.asm:1253 (unused)
SER_SYNC            = $0AFE =  2814          LCD.asm:1268
SETCY               = $04FF =  1279          Z80MiniGame.asm:778
SET_BUF_CLEAR       = $08F6 =  2294          LCD.asm:818
SET_BUF_NO_CLEAR    = $08FE =  2302          LCD.asm:823
SET_CURSOR          = $09C8 =  2504          LCD.asm:978
SET_GBUF            = $085B =  2139          LCD.asm:687
SET_GR_MODE         = $065D =  1629          LCD.asm:239
SET_TXT_MODE        = $0667 =  1639          LCD.asm:246
SHIFT_BIT           = $0874 =  2164          LCD.asm:709
SHIFT_BUFFER        = $09FE =  2558          LCD.asm:1024
SHOW_MSG_EXE        = $02C7 =   711          Z80MiniGame.asm:401
SHOW_MSG_IMG        = $02CE =   718          Z80MiniGame.asm:406
SHOW_MSG_TXT        = $02D5 =   725          Z80MiniGame.asm:411
SIOA_C              = $0002 =     2          Z80MiniGame.asm:60
SIOA_D              = $0000 =     0          Z80MiniGame.asm:59
SIOB_C              = $0003 =     3          Z80MiniGame.asm:62 (unused)
SIOB_D              = $0001 =     1          Z80MiniGame.asm:61 (unused)
SKIP_TBUF           = $0A12 =  2578          LCD.asm:1035
SPACE               = $0020 =    32          LCD.asm:69
SPI_WR              = $0AFF =  2815          LCD.asm:1278
SX                  = $FB86 = 64390          Z80MiniGame.asm:967
SY                  = $FB87 = 64391          Z80MiniGame.asm:968
SYSTEM_SP           = $FFF0 = 65520          Z80MiniGame.asm:77
TAB                 = $0009 =     9          LCD.asm:65
TBUF                = $FB82 = 64386          Z80MiniGame.asm:965
TEST_KEYS           = $03C0 =   960          Z80MiniGame.asm:552
TGBUF               = $F780 = 63360          Z80MiniGame.asm:963
TIMEOUT             = $2710 = 10000          Z80MiniGame.asm:84
TXCRLF              = $04B2 =  1202          Z80MiniGame.asm:703
UP                  = $00B5 =   181          LCD.asm:62
VPORT               = $FB80 = 64384          Z80MiniGame.asm:964
V_DELAY_US          = $0010 =    16          LCD.asm:53
WELLCOME            = $1310 =  4880          Z80MiniGame.asm:940
WELLCOME_LCD        = $132A =  4906          Z80MiniGame.asm:942
_end                = $FB9C = 64412          Z80MiniGame.asm:90 (unused)
_size               = $FB9C = 64412          Z80MiniGame.asm:90 (unused)
_z80_               = $0001 =     1          Z80MiniGame.asm:1 (unused)
check_keypad        = $038D =   909          Z80MiniGame.asm:526
conin               = $04C3 =  1219          Z80MiniGame.asm:720
conout              = $04B9 =  1209          Z80MiniGame.asm:713
conoutA1            = $04BA =  1210          Z80MiniGame.asm:714
kCPUClock           = $8000 =7372800          Z80MiniGame.asm:67
kDelayCnt           = $011A =   282          Z80MiniGame.asm:72
kDelayLP            = $001A =    26          Z80MiniGame.asm:69
kDelayOH            = $0024 =    36          Z80MiniGame.asm:68
kDelayTA            = $1CCC =  7372          Z80MiniGame.asm:70
kDelayTB            = $1CA8 =  7336          Z80MiniGame.asm:71
monitor             = $01C4 =   452          Z80MiniGame.asm:212
monitor0            = $01C8 =   456          Z80MiniGame.asm:215
monitor1            = $01CE =   462          Z80MiniGame.asm:220
msg_help            = $1293 =  4755          Z80MiniGame.asm:922
read_loop           = $0234 =   564          Z80MiniGame.asm:289
setup_serial        = $0485 =  1157          Z80MiniGame.asm:657
start               = $018B =   395          Z80MiniGame.asm:179
waitForChar         = $04C3 =  1219          Z80MiniGame.asm:721


total time: 0.1727 sec.
no errors
