              	; --------------------------------------
              	; zasm: assemble "Z80MiniGame.asm"
              	; date: 2025-05-28 23:32:32
              	; --------------------------------------


              	; Z80Mini - GameCore
              	; 05/2025
              	; Requerimento: Placa base + Game core - Face.
              	;
              	;
              	;
              	;   ============== COMPILADOR ===================
              	;
              	;   Compilador (https://k1.spdns.de/Develop/Projects/zasm/Distributions/):
              	;
              	;       Win(CMD):           zasm.exe --z80 -w -u --bin  Z80MiniGame.asm
              	;       Win(Powershell):    ./zasm.exe --z80 -w -u --bin  Z80MiniGame.asm
              	;       Macos:              ./zasm --z80 -w -u --bin  Z80MiniGame.asm
              	;
              	;
              	;   =============== GRAVAÇÃO ====================
              	;
              	;     GRAVAÇÃO (32kb) (TL866 2 Plus - MacOS):
              	;	    minipro -p AT28C64B -w Z80MiniGame.rom -s	
              	;
              	;
              	;   =============== HARDWARE ====================
              	;         - CPU Z80@7.37280Mhz
              	;         - Rom 32k 0000h - 7FFFh
              	;         - Ram 32k 8000h - FFFFh
              	;			
              	;		  - Display Grafico - 70h
              	;		  		- 128x64
              	;         
              	;         - Ports:
              	;               - Onboard IN/OUT: 40H
              	;					- Controle - pullDown (Input)
              	;						- bit0 - A
              	;						- bit1 - B
              	;						- bit2 - Start
              	;						- bit3 - Select
              	;						- bit4 - Right
              	;						- bit5 - Down
              	;						- bit6 - Left
              	;						- bit7 - Up
              	;
              	;               - User IN/OUT: C0H
              	;
              	;   =============== LCD LIB ======================
              	;   ; Graphical LCD 128 x 64 Library
              	;   ------------------------------
              	;   By B. Chiha May-2023
              	;   https://github.com/bchiha/Z80_LCD_128x64_Graphics_Library/tree/
              	;
              	;
              	;
              	; -----------------------------------------------------------------------------
              	; PORTS
              	; -----------------------------------------------------------------------------
0070:         	LCDCTRL	    .EQU    $70
0071:         	LCDDATA     .EQU    $71
0040:         	GAMEPAD     .EQU    $40
              	; SIO/2 - 115200
0000:         	SIOA_D		.EQU	$00 ; USB - SERIAL
0002:         	SIOA_C		.EQU	$02 ; USB - SERIAL
0001:         	SIOB_D		.EQU	$01 ; SERIAL - P2
0003:         	SIOB_C		.EQU	$03 ; SERIAL - P2
              	
              	; -----------------------------------------------------------------------------
              	; H_Delay CONFIG
              	; -----------------------------------------------------------------------------
708000:         	kCPUClock:  .EQU 7372800       ;CPU clock speed in Hz
0024:         	kDelayOH:   .EQU 36             ;Overhead for each 1ms in Tcycles
001A:         	kDelayLP:   .EQU 26             ;Inner loop time in Tcycles
1CCC:         	kDelayTA:   .EQU kCPUClock / 1000 ;CPU clock cycles per millisecond
1CA8:         	kDelayTB:   .EQU kDelayTA - kDelayOH  ;Cycles required for inner loop
011A:         	kDelayCnt:  .EQU kDelayTB / kDelayLP  ;Loop counter for inner loop
              	
              	; -----------------------------------------------------------------------------
              	; SYSTEM SETTINGS
              	; -----------------------------------------------------------------------------
FFF0:         	SYSTEM_SP:	.EQU 	$FFF0	;INITIAL STACK POINTER
              	
              	
              	; -----------------------------------------------------------------------------
              	; I2C SETTINGS
              	; -----------------------------------------------------------------------------
00AE:         	I2CA_BLOCK: .EQU $AE            ;I2C device addess: 24LC256 (Copy from/to Mem)
2710:         	TIMEOUT:    .EQU 10000          ;Timeout loop counter
              	
              	
              	; -----------------------------------------------------------------------------
              	; INIT SYSTEM 
              	; -----------------------------------------------------------------------------
0000:         	    .ORG $0000
0000: F3      	RST00:	DI			    ;Disable INTerrupts
0001: C38A01  			JP	INIT		;Initialize Hardware and go
              	
              	;------------------------------------------------------------------------------
              	; TX a character over RS232 wait for TXDONE first.
              	;------------------------------------------------------------------------------
0004: FFFFFFFF	    .ORG $0008
0008: C36305  	RST08:	JP	conout
              	
              	;------------------------------------------------------------------------------
              	; RX a character from buffer wait until char ready.
              	;------------------------------------------------------------------------------
000B: FFFFFFFF	    .ORG $0010
000F: FF      	
0010: C36D05  	RST10:		JP	conin
              	
              	; =========================================================
              	; Int 38h - Monitor 
              	; =========================================================
0013: FFFFFFFF		.org    $0038
0017: FF...   	
0038:         	RST38:
0038: F3      	    DI
0039: E5      		PUSH HL
003A: 2A97FB  	    LD HL, (INT_VEC)
003D: E9      	    JP (HL)
              	
              	; -----------------------------------------------------------------------------
              	; API
              	; -----------------------------------------------------------------------------
003E: FFFFFFFF		.ORG $0100 ; API POINTER
0042: FF...   	
              	; LCD
0100: C3A406  	    JP INIT_LCD             ;Initalise the LCD
0103: C3B906  	    JP CLEAR_GBUF           ;Clear the Graphics Buffer
0106: C3C906  	    JP CLEAR_GR_LCD         ;Clear the Graphics LCD Screen
0109: C3F006  	    JP CLEAR_TXT_LCD        ;Clear the Text LCD Screen
010C: C30707  	    JP SET_GR_MODE          ;Set Graphics Mode
010F: C31107  	    JP SET_TXT_MODE         ;Set Text Mode
0112: C31607  	    JP DRAW_BOX             ;Draw a rectangle between two points
0115: C35107  	    JP DRAW_LINE            ;Draw a line between two points
0118: C3FC07  	    JP DRAW_CIRCLE          ;Draw a circle from Mid X,Y to Radius
011B: C3D108  	    JP DRAW_PIXEL           ;Draw one pixel at X,Y
011E: C34107  	    JP FILL_BOX             ;Draw a filled rectangle between two points
0121: C3C308  	    JP FILL_CIRCLE          ;Draw a filled circle from Mid X,Y to Radius
0124: C33009  	    JP PLOT_TO_LCD          ;Display the Graphics Buffer to the LCD Screen
0127: C36209  	    JP PRINT_STRING         ;Print Text on the screen in a given row
012A: C38409  	    JP PRINT_CHARS          ;Print Characters on the screen in a given row and column
012D: C3A309  	    JP DELAY_US             ;Microsecond delay for LCD updates
0130: C3A609  	    JP DELAY_MS             ;Millisecond delay for LCD updates
0133: C3AC09  	    JP SET_BUF_CLEAR        ;Clear the Graphics buffer on after Plotting to the screen
0136: C3B409  	    JP SET_BUF_NO_CLEAR     ;Retain the Graphics buffer on after Plotting to the screen
0139: C3EE08  	    JP CLEAR_PIXEL          ;Remove a Pixel at X,Y
013C: C30009  	    JP FLIP_PIXEL           ;Flip a Pixel On/Off at X,Y
013F: C39C0B  	    JP LCD_INST             ;Send a parallel or serial instruction to LCD
0142: C3A10B  	    JP LCD_DATA             ;Send a parallel or serial datum to LCD
0145: C3B40B  	    JP SER_SYNC             ;Send serial synchronise byte to LCD
0148: C3400B  	    JP DRAW_GRAPHIC         ;Draw an ASCII charcter or Sprite to the LCD
014B: C3380B  	    JP INV_GRAPHIC          ;Inverse graphics printing
014E: C3B909  	    JP INIT_TERMINAL        ;Initialize the LCD for terminal emulation
0151: C3CD09  	    JP SEND_CHAR_TO_GLCD    ;Send an ASCII Character to the LCD
0154: C33C0A  	    JP SEND_STRING_TO_GLCD  ;Send an ASCII String to the LCD
0157: C3550A  	    JP SEND_A_TO_GLCD       ;Send register A to the LCD
015A: C3720A  	    JP SEND_HL_TO_GLCD      ;Send register HL to the LCD
015D: C37E0A  	    JP SET_CURSOR           ;Set the graphics cursor
0160: C32F0B  	    JP GET_CURSOR           ;Get the current cursor
0163: C3340B  	    JP DISPLAY_CURSOR       ;Set Cursor on or off
0166: C3E905  	    JP DELAY_DE             ;Delay in milliseconds (DE in millis)
0169: C34006  		JP LCD_PRINT_STRING		;Print string HL, end with 0 EX: "Test", $00
              		; I2C Board
016C: C3D611  	    JP I2C_Open              ;Start i2c (Device address in A)
016F: C3DD11  	    JP I2C_Close             ;Close i2c 
0172: C31D12  	    JP I2C_Read              ;I2C Read
0175: C3E011  	    JP I2C_Write             ;I2C Write
0178: C39612  		JP I2CLIST				 ;I2C List devices on lcd
017B: C38A02  	    JP CLEAR_COLLISION       ; Limpa flag de colisao
017E: C38F02  	    JP CHECK_COLLISION       ; JP Z, SEM_COLISAO. JP NZ, COLISAO.
0181: C34C02  	    JP INIT_GAME_WAIT_START         ; Chamar no setup, aguarda press start e returna, dar um (LD HL, setup) e (PUSH HL).
0184: C34702  	    JP CHECK_GAMEOVER_WAIT_START    ; Chamar no loop para verificar gameover e depois aguarda press start e ret para o inicio
0187: C34102  	    JP SET_GAMEOVER                 ; Seta a flag de gameover....
              	
              	
018A:         	INIT:
018A: 31F0FF  	    LD SP, SYSTEM_SP
              		; Init Serial
018D: CD2F05  	    CALL setup_serial
0190: 21C613  		LD HL, WELLCOME
0193: CD5505  	    CALL PRINT
              	
              		; Init LCD
0196: 116400  		LD DE, $0064 ; 100ms
0199: CDE905  	    CALL DELAY_DE
              	
019C: CDB909  	    CALL INIT_TERMINAL
019F: CD0707  	    CALL SET_GR_MODE
01A2: CDB409  	    CALL SET_BUF_NO_CLEAR
              	
01A5: AF      		XOR A
01A6: 329AFB  	    LD (CURSOR_MENU), A
01A9: 329CFB  	    LD (VAR_GAMEOVER), A
              	
01AC:         	start:
01AC: CDB906  		CALL CLEAR_GBUF
              	
01AF: 010000  	    LD BC, $0000
01B2: CD7E0A  	    CALL SET_CURSOR
              	
01B5: AF      		XOR A
01B6: 11E013  		LD DE, WELLCOME_LCD
01B9: CD3C0A  		CALL SEND_STRING_TO_GLCD
              	
01BC: CD2204  		CALL NEW_LINE_LCD
              	
01BF: 3A9AFB  	    LD A, (CURSOR_MENU)
01C2: FE00    	    CP 0
01C4: CDE203  	    CALL MENU1 
              	
01C7: 3A9AFB  	    LD A, (CURSOR_MENU)
01CA: FE01    	    CP 1
01CC: CDF203  	    CALL MENU2
              	
01CF: 3A9AFB  	    LD A, (CURSOR_MENU)
01D2: FE02    	    CP 2
01D4: CD0204  	    CALL MENU3
              	
01D7: 3A9AFB  	    LD A, (CURSOR_MENU)
01DA: FE03    	    CP 3
01DC: CD1204  	    CALL MENU4
              	
01DF: 212804  		LD  HL, INT38
01E2: 2297FB  	    LD  (INT_VEC), HL
              	    ;IM  1
              	    ;EI
              	
01E5:         	monitor:
01E5: 21E501  		LD HL, monitor ; point to return to monitor
01E8: E5      		PUSH HL
01E9:         	monitor0:
01E9: CD5C05  		CALL TXCRLF	; Entry point for Monitor, Normal	
01EC: 3E3E    		LD   A,'>'	; Get a ">"	
01EE: CF      		RST 08H		; print it
              	
01EF:         	monitor1:
01EF: D7      		RST 10H	; Get a character from serial
01F0: FE20    		CP   ' '	; <spc> or less? 	
01F2: 38FB    		JR   C, monitor1	; Go back
              	
01F4: FE3A    		CP   ':'	; ":"?
01F6: CAFE05  		JP   Z,LOAD	; First character of a HEX load
              	
01F9: CF      		RST 08H	; Print char on console
              	
01FA: FE3F    		CP   '?'
01FC: CA4E05  		JP   Z,HELP
              	
01FF: E65F    		AND  $5F	; Make character uppercase
              	
0201: FE52    		CP   'R' 	; reset
0203: CA0000  		JP   Z, RST00
              	
0206: FE47    		CP   'G'
0208: CA4805  		JP   Z,GOTO
              	
020B: 3E3F    		LD   A,'?'	; Get a "?"	
020D: CF      		RST 08H		; Print it
              	
020E: C3E901  	    jp monitor0
              	
              	
007E:         	VTELA_X     .EQU    $7E ; Tela virtal 
003E:         	VTELA_Y     .EQU    $3E ; Tela virtal
              	
0211:         	randomHL:
              	    ; 3F = 126/2
              	    ; 1F = 62/2
0211: CD2702  	    CALL prng16
0214: 7C      	    LD A, H
0215: E67D    	    AND VTELA_X-1
0217: FE00    	    CP 0
0219: CA1102  	    JP Z, randomHL
021C: 67      	    LD H, A
              	
021D: 7D      	    LD A, L
021E: E63D    	    AND VTELA_Y-1
0220: FE00    	    CP 0
0222: CA1102  	    JP Z, randomHL
0225: 6F      	    LD L, A
0226: C9      	    RET
              	
              	
0227:         	prng16:
              	; Site: https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
              	;Inputs:
              	;   (seed1) contains a 16-bit seed value
              	;   (seed2) contains a NON-ZERO 16-bit seed value
              	;Outputs:
              	;   HL is the result
              	;   BC is the result of the LCG, so not that great of quality
              	;   DE is preserved
              	;Destroys:
              	;   AF
              	;cycle: 4,294,901,760 (almost 4.3 billion)
              	;160cc
              	;26 bytes
0227: 2A7414  	    ld hl,(seed1)
022A: 44      	    ld b,h
022B: 4D      	    ld c,l
022C: 29      	    add hl,hl
022D: 29      	    add hl,hl
022E: 2C      	    inc l
022F: 09      	    add hl,bc
0230: 227414  	    ld (seed1),hl
0233: 2A7614  	    ld hl,(seed2)
0236: 29      	    add hl,hl
0237: 9F      	    sbc a,a
0238: E62D    	    and %00101101
023A: AD      	    xor l
023B: 6F      	    ld l,a
023C: 227614  	    ld (seed2),hl
023F: 09      	    add hl,bc
0240: C9      	    ret
              	
              	
              	; Seta flag de gameover...
0241:         	SET_GAMEOVER:
0241: 3E01    	    LD A, 1
0243: 329CFB  	    LD (VAR_GAMEOVER), A
0246: C9      	    RET
              	
              	
              	; Check flag gameover or return
0247:         	CHECK_GAMEOVER_WAIT_START:
0247: 3A9CFB  	    LD A, (VAR_GAMEOVER)
024A: B7      	    OR A
024B: C8      	    RET Z
024C:         	INIT_GAME_WAIT_START:
024C: 011A20  	    LD BC, $201A
024F: CD7E0A  	    CALL SET_CURSOR
              	    
0252: 215F14  	    LD HL, MSG_START_GAME
0255: CD4006  	    CALL LCD_PRINT_STRING
0258: 3A9CFB  	    LD A, (VAR_GAMEOVER)
025B: B7      	    OR A
025C: CA7D02  	    JP Z, start_loop
025F: 012224  	    LD BC, $2422
0262: CD7E0A  	    CALL SET_CURSOR
              	    
0265: 216B14  	    LD HL, MSG_END_GAME
0268: CD4006  	    CALL LCD_PRINT_STRING
026B:         	gameover_loop:
026B: DB40    	    IN A, (GAMEPAD)
026D: CB5F    	    bit 3, A
026F: C28A01  	    JP NZ, INIT
0272: CB57    	    bit 2, A
0274: CA6B02  	    JP Z, gameover_loop
0277: AF      	    XOR A
0278: 329CFB  	    LD (VAR_GAMEOVER), A
027B: E1      	    POP HL
027C: C9      	    ret
027D:         	start_loop:
027D: DB40    	    IN A, (GAMEPAD)
027F: CB5F    	    bit 3, A
0281: C28A01  	    JP NZ, INIT
0284: CB57    	    bit 2, A
0286: CA7D02  	    JP Z, start_loop
0289: C9      	    ret
              	
              	
028A:         	CLEAR_COLLISION:
028A: AF      	    XOR A
028B: 329BFB  	    LD (DRAW_PIXEL_COLLISION), A
028E: C9      	    RET
              	
              	; FLAG ZERO, 
              	; JP Z, SEM_COLISAO. 
              	; JP NZ, COLISAO.
028F:         	CHECK_COLLISION:
028F: 3A9BFB  	    LD A, (DRAW_PIXEL_COLLISION)
0292: B7      	    OR A
0293: C9      	    RET
              	
              	
0294:         	LOAD_GAME:
0294:         	READ_MEM_FILES:
0294: 110000  	    LD DE, $0000 ; start "D"? File
0297:         	READ_MEM_NEXT:
0297: CD8603  	    CALL READ_IIC_DE
029A: B7      	    OR A
029B: FE44    	    CP 'D'
029D: CAAC02  	    JP Z, READ_FILE
02A0: 210C14  	    LD HL, MSG_EOF
02A3: CD5606  	    CALL LCD_CR
02A6: CD4006  	    CALL LCD_PRINT_STRING
02A9: 3E0D    	    LD A, CR
02AB: C9      	    RET
              	
02AC:         	READ_FILE:
02AC: CD5606  	    CALL LCD_CR ; new line
02AF: CD5606  	    CALL LCD_CR ; new line
02B2: 0610    	    LD B, 16
02B4:         	READ_NAME:
02B4: 13      	    INC DE
02B5: CD8603  	    CALL READ_IIC_DE
02B8: B7      	    OR A
02B9: FE00    	    CP 0
02BB: C45C06  	    CALL NZ, LCD_PRINT_A
02BE: 05      	    DEC B
02BF: C2B402  	    JP NZ, READ_NAME
              	
02C2:         	READ_MEM_KEY:
              	    ; Show commands
02C2: D5      	    PUSH DE
02C3: 13      	    INC DE
02C4: CD8603  	    CALL READ_IIC_DE
02C7: B7      	    OR A
02C8: FE00    	    CP 0
02CA: CC7103  	    CALL Z, SHOW_MSG_EXE
02CD: FE01    	    CP 1
02CF: CC7803  	    CALL Z, SHOW_MSG_IMG
02D2: FE02    	    CP 2
02D4: CC7F03  	    CALL Z, SHOW_MSG_TXT
02D7: D1      	    POP DE
              	    ; wait command
02D8:         	read_loop:
02D8: DB40    	    IN A, (GAMEPAD)
02DA: FE00    		cp 0
02DC: CAD802  		JP Z, read_loop
02DF: CB4F    	    bit 1, A ; Next - B
02E1: C20103  	    JP    NZ, READ_MEM_STEP
02E4: CB47    	    bit 0, A  ; key Enter, execute - A
02E6: C2EC02  	    JP    NZ, READ_MEM_KEY_C
02E9: C3D802  	    jp read_loop
02EC:         	READ_MEM_KEY_C:
              	    ;read type
02EC: 13      	    INC DE
02ED: CD8603  	    CALL READ_IIC_DE
02F0: B7      	    OR A
02F1: FE00    	    CP 0
02F3: CA1803  	    JP Z, READ_FILE_EXE
02F6: FE01    	    CP 1
02F8: CA2E03  	    JP Z, READ_FILE_IMG
02FB: FE02    	    CP 2
02FD: CA5303  	    JP Z, READ_FILE_TXT
0300: C9      	    RET
              	
0301:         	READ_MEM_STEP:
0301: 13      	    INC DE ; type
0302: 13      	    INC DE ; size H
0303: CD8603  	    CALL READ_IIC_DE
0306: 67      	    LD H, A
0307: 13      	    INC DE ; size L
0308: CD8603  	    CALL READ_IIC_DE
030B: 6F      	    LD L, A
030C:         	READ_MEM_STEP_L:
030C: 13      	    INC DE ; step file
030D: 2B      	    DEC HL
030E: 7C      	    LD A, H
030F: B5      	    OR L
0310: C20C03  	    JP NZ, READ_MEM_STEP_L
0313: 13      	    INC DE ; end
0314: 13      	    INC DE ; nex start
0315: C39702  	    JP READ_MEM_NEXT
              	
              	
0318:         	READ_FILE_EXE:
              	    ; read size H
0318: 13      	    INC DE
0319: CD8603  	    CALL READ_IIC_DE
031C: 47      	    LD B, A
              	
              	    ; read size L
031D: 13      	    INC DE
031E: CD8603  	    CALL READ_IIC_DE
0321: 4F      	    LD C, A
              	
0322: 13      	    INC DE ; first byte file
0323: 210080  	    LD HL, $8000 ; memory user
              	
0326: CDC512  	    CALL I2C_MemRd
0329: E1      	    POP HL ; return
032A: C30080  	    JP $8000
032D: C9      	    RET
              	
032E:         	READ_FILE_IMG:
              	    ; read size H
032E: 13      	    INC DE
032F: CD8603  	    CALL READ_IIC_DE
0332: 47      	    LD B, A
              	
              	    ; read size L
0333: 13      	    INC DE
0334: CD8603  	    CALL READ_IIC_DE
0337: 4F      	    LD C, A
              	
0338: 13      	    INC DE ; first byte file
0339: 210080  	    LD HL, $8000 ; memory user
              	
033C: CDC512  	    CALL I2C_MemRd
              	
033F: CDB906  	    CALL CLEAR_GBUF
0342: 2680    	    LD H, $80
0344: 2E00    	    LD L, $00
0346: CD8B06  	    CALL LCD_IMAGE_128x64
              	
0349:         	READ_FILE_IMG_K:
0349: DB40    	    IN A, (GAMEPAD)
034B: CB5F    	    bit 3, A
034D: CA4903  	    JP    Z, READ_FILE_IMG_K
0350: 3E0C    	    LD A, CS
0352: C9      	    RET
              	
0353:         	READ_FILE_TXT:
0353: CD5006  	    CALL LCD_CLEAR
              	
              	    ; read size H
0356: 13      	    INC DE
0357: CD8603  	    CALL READ_IIC_DE
035A: 47      	    LD B, A
              	
              	    ; read size L
035B: 13      	    INC DE
035C: CD8603  	    CALL READ_IIC_DE
035F: 4F      	    LD C, A
              	
0360: 13      	    INC DE ; first byte file
0361:         	READ_FILE_TXT_L:
0361: CD8603  	    CALL READ_IIC_DE
0364: CD5C06  	    CALL LCD_PRINT_A
0367: 13      	    INC DE ; step file
0368: 0B      	    DEC BC
0369: 78      	    LD A, B
036A: B1      	    OR C
036B: C26103  	    JP NZ, READ_FILE_TXT_L
036E: 13      	    INC DE ; end
036F: 13      	    INC DE ; next start    
0370: C9      	    RET
              	
              	
0371:         	SHOW_MSG_EXE:
0371: 211E14  	    LD HL, MSG_READFILE_EXE
0374: CD4006  	    CALL LCD_PRINT_STRING
0377: C9      	    RET
              	
0378:         	SHOW_MSG_IMG:
0378: 212314  	    LD HL, MSG_READFILE_IMG
037B: CD4006  	    CALL LCD_PRINT_STRING
037E: C9      	    RET
              	
037F:         	SHOW_MSG_TXT:
037F: 212814  	    LD HL, MSG_READFILE_TXT
0382: CD4006  	    CALL LCD_PRINT_STRING
0385: C9      	    RET
              	
              	
              	; Read byte in i2c, address in DE, return byte in A
0386:         	READ_IIC_DE:
0386: C5      	    PUSH BC
0387: D5      	    PUSH DE
0388: E5      	    PUSH HL
0389: 3EAE    	    LD   A, I2CA_BLOCK   ;I2C address to write to
038B: CDD611  	    CALL I2C_Open
038E: 7A      	    LD   A, D           ;Address (hi) in I2C memory
038F: CDE011  	    CALL I2C_Write      ;Write address
0392: 7B      	    LD   A,E            ;Address (lo) in I2C memory
0393: CDE011  	    CALL I2C_Write      ;Write address
0396: 3EAF    	    LD   A,I2CA_BLOCK+1 ;I2C device to be read from
0398: CDD611  	    CALL I2C_Open       ;Open for read
039B: CD1D12  	    CALL I2C_Read
039E: F5      	    PUSH AF
039F: CD5512  	    CALL I2C_Stop       ;Generate I2C stop
03A2: F1      	    POP AF
03A3: E1      	    POP HL
03A4: D1      	    POP DE
03A5: C1      	    POP BC
03A6: C9      	    RET
              	
              	
03A7:         	KEYUP:
03A7: DB40    	    IN A, (GAMEPAD)
03A9: FE00    	    CP 0
03AB: C2A703  	    JP NZ, KEYUP
03AE: 3A9AFB  	    LD A, (CURSOR_MENU)
03B1: FE00    	    CP 0
03B3: CABD03  	    JP Z, KEYUP_RES
03B6: 3D      	    DEC A
03B7: 329AFB  	    LD (CURSOR_MENU), A
03BA: C3AC01  	    JP start
03BD:         	KEYUP_RES:
03BD: 3E03    	    LD A, 3
03BF: 329AFB  	    LD (CURSOR_MENU), A
03C2: C3AC01  	    JP start
              	
03C5:         	KEYDOWN:
03C5: DB40    	    IN A, (GAMEPAD)
03C7: FE00    	    CP 0
03C9: C2C503  	    JP NZ, KEYDOWN
03CC: 3A9AFB  	    LD A, (CURSOR_MENU)
03CF: FE03    	    CP 3
03D1: CADB03  	    JP Z, KEYDOWN_RES
03D4: 3C      	    INC A
03D5: 329AFB  	    LD (CURSOR_MENU), A
03D8: C3AC01  	    JP start
03DB:         	KEYDOWN_RES:
03DB: AF      	    XOR A
03DC: 329AFB  	    LD (CURSOR_MENU), A
03DF: C3AC01  	    JP start
              	
03E2:         	MENU1:
03E2: C2EA03  	    JP NZ, $+8
03E5: 3E06    	    LD A, 6; >
03E7: CDCD09  	    CALL SEND_CHAR_TO_GLCD
03EA: 112D14  	    LD DE, MENU_LCD_1
03ED: AF      	    XOR A
03EE: CD3C0A  		CALL SEND_STRING_TO_GLCD
03F1: C9      	    RET
              	
03F2:         	MENU2:
03F2: C2FA03  	    JP NZ, $+8
03F5: 3E06    	    LD A, 6; >
03F7: CDCD09  	    CALL SEND_CHAR_TO_GLCD
03FA: 113A14  	    LD DE, MENU_LCD_2
03FD: AF      	    XOR A
03FE: CD3C0A  		CALL SEND_STRING_TO_GLCD
0401: C9      	    RET
              	
0402:         	MENU3:
0402: C20A04  	    JP NZ, $+8
0405: 3E06    	    LD A, 6; >
0407: CDCD09  	    CALL SEND_CHAR_TO_GLCD
040A: 114B14  	    LD DE, MENU_LCD_3
040D: AF      	    XOR A
040E: CD3C0A  		CALL SEND_STRING_TO_GLCD
0411: C9      	    RET
              	
0412:         	MENU4:
0412: C21A04  	    JP NZ, $+8
0415: 3E06    	    LD A, 6; >
0417: CDCD09  	    CALL SEND_CHAR_TO_GLCD
041A: 115714  	    LD DE, MENU_LCD_4
041D: AF      	    XOR A
041E: CD3C0A  		CALL SEND_STRING_TO_GLCD
0421: C9      	    RET
              	
              	
              	
0422:         	NEW_LINE_LCD:
0422: 3E0D    		LD A, CR
0424: CDCD09  		CALL SEND_CHAR_TO_GLCD
0427: C9      		RET
              	
              	
0428:         	INT38:
0428: F3      		DI
0429: F5      		PUSH AF
042A: DB40    		IN A, (GAMEPAD)
042C: CA3204  		JP Z, INT38_END
042F: 3299FB  		LD (GAMEPAD_KEY), A
0432:         	INT38_END:
0432: F1      		POP AF
0433: E1      		POP HL
0434: FB      		EI
0435: ED4D    		RETI
              	
0437:         	check_keypad:
0437: DB40    		in A, (GAMEPAD)
0439: CB7F    	    BIT 7, A ; up
043B: C2A703  	    JP NZ, KEYUP
043E: CB6F    	    BIT 5, A ; down
0440: C2C503  	    JP NZ, KEYDOWN
0443: CB47    		BIT 0, A ; A
0445: C24904  	    JP NZ, KEY_A
0448: C9      		RET
              	
0449:         	KEY_A:
0449: DB40    	    IN A, (GAMEPAD)
044B: FE00    	    CP 0
044D: C24904  	    JP NZ, KEY_A
0450: 3A9AFB  		LD A, (CURSOR_MENU)
0453: FE00    		CP 0
0455: CA0080  		JP Z, $8000 ; Start game JP $8000
0458: FE01    		CP 1
045A: CA9402  		JP Z, LOAD_GAME
045D: FE02    		CP 2
045F: CA6A04  		JP Z, TEST_KEYS
0462: FE03    		CP 3
0464: CA0000  		JP Z, 0 ; reset
0467: C30000  		JP 0
              	
              	
046A:         	TEST_KEYS:
046A: CDB906  	    CALL CLEAR_GBUF
              	
              	    ; select
046D: 0638    	    LD B, 56
046F: 0E07    	    LD C, 7
0471: 1E06    	    LD E, $06
0473: DB40    	    IN A, ($40)
0475: CB5F    	    BIT 3, A
0477: CA8004  	    JP Z, $+9
047A: CDC308  	    CALL FILL_CIRCLE
047D: C38304  	    JP $+6
0480: CDFC07  	    CALL DRAW_CIRCLE
              	    
              	    ; Start
0483: 0649    	    LD B, 73
0485: 0E07    	    LD C, 7
0487: 1E06    	    LD E, $06
0489: DB40    	    IN A, ($40)
048B: CB57    	    BIT 2, A
048D: CA9604  	    JP Z, $+9
0490: CDC308  	    CALL FILL_CIRCLE
0493: C39904  	    JP $+6
0496: CDFC07  	    CALL DRAW_CIRCLE
              	    
              	
              	    ; A
0499: 0659    	    LD B, 89
049B: 0E28    	    LD C, 40
049D: 1E06    	    LD E, $06
049F: DB40    	    IN A, ($40)
04A1: CB47    	    BIT 0, A
04A3: CAAC04  	    JP Z, $+9
04A6: CDC308  	    CALL FILL_CIRCLE
04A9: C3AF04  	    JP $+6
04AC: CDFC07  	    CALL DRAW_CIRCLE
              	    
              	    
              	    ; B
04AF: 0669    	    LD B, 105
04B1: 0E18    	    LD C, 24
04B3: 1E06    	    LD E, $06
04B5: DB40    	    IN A, ($40)
04B7: CB4F    	    BIT 1, A
04B9: CAC204  	    JP Z, $+9
04BC: CDC308  	    CALL FILL_CIRCLE
04BF: C3C504  	    JP $+6
04C2: CDFC07  	    CALL DRAW_CIRCLE
              	    
              	    
              	    ; Up
04C5: 0618    	    LD B, 24
04C7: 0E18    	    LD C, 24
04C9: 1E06    	    LD E, $06
04CB: DB40    	    IN A, ($40)
04CD: CB7F    	    BIT 7, A
04CF: CAD804  	    JP Z, $+9
04D2: CDC308  	    CALL FILL_CIRCLE
04D5: C3DB04  	    JP $+6
04D8: CDFC07  	    CALL DRAW_CIRCLE
              	    
              	    ; Down
04DB: 0618    	    LD B, 24
04DD: 0E39    	    LD C, 57
04DF: 1E06    	    LD E, $06
04E1: DB40    	    IN A, ($40)
04E3: CB6F    	    BIT 5, A
04E5: CAEE04  	    JP Z, $+9
04E8: CDC308  	    CALL FILL_CIRCLE
04EB: C3F104  	    JP $+6
04EE: CDFC07  	    CALL DRAW_CIRCLE
              	    
              	    ; Left
04F1: 0607    	    LD B, 7
04F3: 0E29    	    LD C, 41
04F5: 1E06    	    LD E, $06
04F7: DB40    	    IN A, ($40)
04F9: CB77    	    BIT 6, A
04FB: CA0405  	    JP Z, $+9
04FE: CDC308  	    CALL FILL_CIRCLE
0501: C30705  	    JP $+6
0504: CDFC07  	    CALL DRAW_CIRCLE
              	    
              	    ; Right
0507: 0628    	    LD B, 40
0509: 0E28    	    LD C, 40
050B: 1E06    	    LD E, $06
050D: DB40    	    IN A, ($40)
050F: CB67    	    BIT 4, A
0511: CA1A05  	    JP Z, $+9
0514: CDC308  	    CALL FILL_CIRCLE
0517: C31D05  	    JP $+6
051A: CDFC07  	    CALL DRAW_CIRCLE
              	    
051D: CD3009  		CALL PLOT_TO_LCD
              	
              		; check select+start to exit
0520: DB40    	    IN A, (GAMEPAD)
0522: CB57    	    BIT 2, A
0524: CA6A04  		JP Z, TEST_KEYS
0527: CB5F    	    BIT 3, A
0529: CA6A04  	    JP Z, TEST_KEYS
052C: C38A01  	    jp INIT
              	
              	
052F:         	setup_serial:
              	    ;	Initialise SIO/2 A
052F: 3E04    		LD	A,$04
0531: D302    		OUT	(SIOA_C),A
0533: 3EC4    		LD	A,$C4
0535: D302    		OUT	(SIOA_C),A
              	
0537: 3E03    		LD	A,$03
0539: D302    		OUT	(SIOA_C),A
053B: 3EE1    		LD	A,$E1
053D: D302    		OUT	(SIOA_C),A
              	
053F: 3E05    		LD	A,$05
0541: D302    		OUT	(SIOA_C),A
0543: 3E68    		LD	A, $68
0545: D302    		OUT	(SIOA_C),A
0547: C9      	    RET
              	
              	
              	
              	
              	; GOTO command
0548:         	GOTO:
0548: CD9F05  		CALL GETHL		; ENTRY POINT FOR <G>oto addr. Get XXXX from user.
054B: D8      		RET  C			; Return if invalid       	
054C: E5      		PUSH HL
054D: C9      		RET			; Jump to HL address value
              	
              	
              	; HELP
054E:         	HELP:
054E: 214913  		LD HL, msg_help
0551: CD5505  		CALL PRINT
0554: C9      		RET
              	
              	
              	;------------------------------------------------------------------------------
              	; Print string of characters to Serial A until byte=$00, WITH CR, LF
              	;------------------------------------------------------------------------------
0555: 7E      	PRINT:  LD   A,(HL)	; Get character
0556: B7      			OR   A		; Is it $00 ?
0557: C8      			RET  Z		; Then RETurn on terminator
0558: CF      			RST  08H	; Print it
0559: 23      			INC  HL		; Next Character
055A: 18F9    			JR   PRINT	; Continue until $00
              	
055C: 3E0D    	TXCRLF:	LD   A,$0D	; 
055E: CF      			RST  08H	; Print character 
055F: 3E0A    			LD   A,$0A	; 
0561: CF      			RST  08H	; Print character
0562: C9      			RET
              	
              	;------------------------------------------------------------------------------
              	; Console output routine - Serial
              	; Output port to send a character.
              	;------------------------------------------------------------------------------
0563: F5      	conout:		PUSH	AF		; Store character
0564: CD7C05  	conoutA1:	CALL	CKSIOA		; See if SIO channel A is finished transmitting
0567: 28FB    			JR	Z, conoutA1	; Loop until SIO flag signals ready
0569: F1      			POP	AF		; RETrieve character
056A: D300    			OUT	(SIOA_D),A	; OUTput the character
056C: C9      			RET
              	
056D:         	conin:
056D:         	waitForChar:
056D: CD3704  		CALL check_keypad ; Enquanto aguarda serial, verifica check_keypad
              		; Check if there is a char in channel A
0570: 97      		SUB	A
0571: D302    		OUT 	(SIOA_C),A
0573: DB02    		IN   	A,(SIOA_C)	; Status byte D2=TX Buff Empty, D0=RX char ready	
0575: 0F      		RRCA			; Rotates RX status into Carry Flag,	
0576: 30F5    		JR	NC, waitForChar
0578: DB00    		IN	A,(SIOA_D)
057A: B7      		OR A ; clear carry
057B: C9      		RET
              		
              	
057C:         	CKSIOA:
057C: 97      			SUB	A
057D: D302    			OUT 	(SIOA_C),A
057F: DB02    			IN   	A,(SIOA_C)	; Status byte D2=TX Buff Empty, D0=RX char ready	
0581: 0F      			RRCA			; Rotates RX status into Carry Flag,	
0582: CB4F    			BIT  	1,A		; Set Zero flag if still transmitting character	
0584: C9      	        RET
              	
              	
              	;------------------------------------------------------------------------------
              	; Get a character from the console, must be $20-$7F to be valid (no control characters)
              	; <Ctrl-c> and <SPACE> breaks with the Zero Flag set
              	;------------------------------------------------------------------------------	
0585: D7      	GETCHR	RST 10H	; RX a Character
0586: FE03    			CP   $03	; <ctrl-c> User break?
0588: C8      			RET  Z			
0589: FE20    			CP   $20	; <space> or better?
058B: 38F8    			JR   C,GETCHR	; Do it again until we get something usable
058D: C9      			RET
              	
              	;------------------------------------------------------------------------------
              	; Gets two ASCII characters from the console (assuming them to be HEX 0-9 A-F)
              	; Moves them into B and C, converts them into a byte value in A and updates a
              	; Checksum value in E
              	;------------------------------------------------------------------------------
058E: CD8505  	GET2	CALL GETCHR	; Get us a valid character to work with
0591: 47      			LD   B,A	; Load it in B
0592: CD8505  			CALL GETCHR	; Get us another character
0595: 4F      			LD   C,A	; load it in C
0596: CDCD05  			CALL BCTOA	; Convert ASCII to byte
0599: 4F      			LD   C,A	; Build the checksum
059A: 7B      			LD   A,E
059B: 91      			SUB  C		; The checksum should always equal zero when checked
059C: 5F      			LD   E,A	; Save the checksum back where it came from
059D: 79      			LD   A,C	; Retrieve the byte and go back
059E: C9      			RET
              	
              	;------------------------------------------------------------------------------
              	; Gets four Hex characters from the console, converts them to values in HL
              	;------------------------------------------------------------------------------
059F: 210000  	GETHL		LD   HL,$0000	; Gets xxxx but sets Carry Flag on any Terminator
05A2: CDE605  			CALL ECHO	; RX a Character
05A5: FE0D    			CP   $0D	; <CR>?
05A7: 200E    			JR   NZ,GETX2	; other key		
05A9: 37      	SETCY		SCF		; Set Carry Flag
05AA: C9      			RET             ; and Return to main program		
              	;------------------------------------------------------------------------------
              	; This routine converts last four hex characters (0-9 A-F) user types into a value in HL
              	; Rotates the old out and replaces with the new until the user hits a terminating character
              	;------------------------------------------------------------------------------
05AB: 210000  	GETX		LD   HL,$0000	; CLEAR HL
05AE: CDE605  	GETX1		CALL ECHO	; RX a character from the console
05B1: FE0D    			CP   $0D	; <CR>
05B3: C8      			RET  Z		; quit
05B4: FE2C    			CP   $2C	; <,> can be used to safely quit for multiple entries
05B6: C8      			RET  Z		; (Like filling both DE and HL from the user)
05B7: FE03    	GETX2		CP   $03	; Likewise, a <ctrl-C> will terminate clean, too, but
05B9: 28EE    			JR   Z,SETCY	; It also sets the Carry Flag for testing later.
05BB: 29      			ADD  HL,HL	; Otherwise, rotate the previous low nibble to high
05BC: 29      			ADD  HL,HL	; rather slowly
05BD: 29      			ADD  HL,HL	; until we get to the top
05BE: 29      			ADD  HL,HL	; and then we can continue on.
05BF: D630    			SUB  $30	; Convert ASCII to byte	value
05C1: FE0A    			CP   $0A	; Are we in the 0-9 range?
05C3: 3802    			JR   C,GETX3	; Then we just need to sub $30, but if it is A-F
05C5: D607    			SUB  $07	; We need to take off 7 more to get the value down to
05C7: E60F    	GETX3		AND  $0F	; to the right hex value
05C9: 85      			ADD  A,L	; Add the high nibble to the low
05CA: 6F      			LD   L,A	; Move the byte back to A
05CB: 18E1    			JR   GETX1	; and go back for next character until he terminates
              	;------------------------------------------------------------------------------
              	; Convert ASCII characters in B C registers to a byte value in A
              	;------------------------------------------------------------------------------
05CD: 78      	BCTOA		LD   A,B	; Move the hi order byte to A
05CE: D630    			SUB  $30	; Take it down from Ascii
05D0: FE0A    			CP   $0A	; Are we in the 0-9 range here?
05D2: 3802    			JR   C,BCTOA1	; If so, get the next nybble
05D4: D607    			SUB  $07	; But if A-F, take it down some more
05D6: 07      	BCTOA1		RLCA		; Rotate the nybble from low to high
05D7: 07      			RLCA		; One bit at a time
05D8: 07      			RLCA		; Until we
05D9: 07      			RLCA		; Get there with it
05DA: 47      			LD   B,A	; Save the converted high nybble
05DB: 79      			LD   A,C	; Now get the low order byte
05DC: D630    			SUB  $30	; Convert it down from Ascii
05DE: FE0A    			CP   $0A	; 0-9 at this point?
05E0: 3802    			JR   C,BCTOA2	; Good enough then, but
05E2: D607    			SUB  $07	; Take off 7 more if it's A-F
05E4: 80      	BCTOA2		ADD  A,B	; Add in the high order nybble
05E5: C9      			RET
              	
              	;------------------------------------------------------------------------------
              	; Get a character and echo it back to the user
              	;------------------------------------------------------------------------------
05E6: D7      	ECHO	RST 10H ; rx
05E7: CF      			RST 08H ; tx
05E8: C9      			RET
              	
              	
              	
              	; **********************************************************************
              	; Delay by DE milliseconds
              	;   On entry: DE = Delay time in milliseconds
              	;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved
05E9: F5      	DELAY_DE:    	PUSH AF
05EA: C5      	            PUSH BC
05EB: D5      	            PUSH DE
              	; 1 ms loop, DE times...        ;[=36]   [=29]    Overhead for each 1ms
05EC: 011A01  	LoopDE:    LD   BC, kDelayCnt   ;[10]    [9]
              	; Inner loop, BC times...       ;[=26]   [=20]    Loop time in Tcycles
05EF: 0B      	LoopBC:    DEC  BC             ;[6]     [4]
05F0: 79      	            LD   A,C            ;[4]     [4]
05F1: B0      	            OR   B              ;[4]     [4]
05F2: C2EF05  	            JP   NZ,LoopBC     ;[12/7]  [8/6] 
              	; Have we looped once for each millisecond requested?
05F5: 1B      	            DEC  DE             ;[6]     [4]
05F6: 7B      	            LD   A,E            ;[4]     [4]
05F7: B2      	            OR   D              ;[4]     [4]
05F8: 20F2    	            JR   NZ, LoopDE     ;[12/7]  [8/6]
05FA: D1      	            POP  DE
05FB: C1      	            POP  BC
05FC: F1      	            POP  AF
05FD: C9      	            RET
              	
              	
              	
              	;------------------------------------------------------------------------------
              	; LOAD Intel Hex format file from the console.
              	; [Intel Hex Format is:
              	; 1) Colon (Frame 0)
              	; 2) Record Length Field (Frames 1 and 2)
              	; 3) Load Address Field (Frames 3,4,5,6)
              	; 4) Record Type Field (Frames 7 and 8)
              	; 5) Data Field (Frames 9 to 9+2*(Record Length)-1
              	; 6) Checksum Field - Sum of all byte values from Record Length to and 
              	;   including Checksum Field = 0 ]
              	;------------------------------------------------------------------------------	
05FE: 1E00    	LOAD:	LD   E,0	; First two Characters is the Record Length Field
0600: CD8E05  			CALL GET2	; Get us two characters into BC, convert it to a byte <A>
0603: 57      			LD   D,A	; Load Record Length count into D
0604: CD8E05  			CALL GET2	; Get next two characters, Memory Load Address <H>
0607: 67      			LD   H,A	; put value in H register.
0608: CD8E05  			CALL GET2	; Get next two characters, Memory Load Address <L>
060B: 6F      			LD   L,A	; put value in L register.
060C: CD8E05  			CALL GET2	; Get next two characters, Record Field Type
060F: FE01    			CP   $01	; Record Field Type 00 is Data, 01 is End of File
0611: 2009    			JR   NZ,LOAD2	; Must be the end of that file
0613: CD8E05  			CALL GET2	; Get next two characters, assemble into byte
0616: 7B      			LD   A,E	; Recall the Checksum byte
0617: A7      			AND  A		; Is it Zero?
0618: 281E    			JR   Z,LOAD00	; Print footer reached message
061A: 1815    			JR   LOADERR	; Checksums don't add up, Error out
              			
061C: 7A      	LOAD2		LD   A,D	; Retrieve line character counter	
061D: A7      			AND  A		; Are we done with this line?
061E: 280B    			JR   Z,LOAD3	; Get two more ascii characters, build a byte and checksum
0620: CD8E05  			CALL GET2	; Get next two chars, convert to byte in A, checksum it
0623: 77      			LD   (HL),A	; Move converted byte in A to memory location
0624: 23      			INC  HL		; Increment pointer to next memory location	
0625: 3E2E    			LD   A,'.'	; Print out a "." for every byte loaded
0627: CF      			RST  08H	;
0628: 15      			DEC  D		; Decrement line character counter
0629: 18F1    			JR   LOAD2	; and keep loading into memory until line is complete
              			
062B: CD8E05  	LOAD3		CALL GET2	; Get two chars, build byte and checksum
062E: 7B      			LD   A,E	; Check the checksum value
062F: A7      			AND  A		; Is it zero?
0630: C8      			RET  Z
              	
0631: 21A413  	LOADERR		LD   HL,CKSUMERR  ; Get "Checksum Error" message
0634: CD5505  			CALL PRINT	; Print Message from (HL) and terminate the load
0637: C9      			RET
              	
0638: 21B513  	LOAD00  	LD   HL,LDETXT	; Print load complete message
063B: CD5505  			CALL PRINT
063E: C9      			RET
              	
              	
              	
              	
              	
              	#include "LCD.asm"
              	; Graphical LCD 128 x 64 Library
              	; ------------------------------
              	; By B. Chiha May-2023
              	;
              	; This is a native Z80 Graphics library to be used with 128x64 Graphical LCD Screens
              	;
              	; There are a few variants of these LCD screens, but they must all must use the ST7920
              	; LCD Controller.  The LCD Screen that I used is the QC12864B.  This screen has two
              	; ST7921 Panels (128 x 32) stacked one above the other.  Other LCD boards might not do
              	; this.  If so the PLOT_TO_LCD function will need to be modified. (future work)
              	;
              	; These screens have DDRAM (Graphics) and CGRAM (Text) areas.  Both RAM areas can 
              	; be displayed at the same time.
              	;
              	; The Pinout for the QC12864B board is as follows:
              	;
              	; Pin	Name	Desc                    Serial  Parallel
              	; ---   ----    -------------           ------  -------------
              	; 1     VSS     Ground                  GND     GND
              	; 2     VDD     Power                   5v      5v
              	; 3     V0      Contrast                N/A     N/A
              	; 4     D/I     IR/DR (CS)              5v      A7
              	; 5     R/W     R/W (SID)               D0      RD (inverted)
              	; 6     E       Enable (SCLK)           D1      Port 7 (inverted)
              	; 7     DB0     Data                    N/A     D0
              	; 8     DB1     Data                    N/A     D1
              	; 9     DB2     Data                    N/A     D2
              	; 10    DB3     Data                    N/A     D3
              	; 11    DB4     Data                    N/A     D4
              	; 12    DB5     Data                    N/A     D5
              	; 13    DB6     Data                    N/A     D6
              	; 14    DB7     Data                    N/A     D7
              	; 15    PSB     Serial/Para             GND     5v
              	; 16    NC
              	; 17    RST     Reset                   RST     RST
              	; 18    VEE     LCD Drive               N/A     N/A
              	; 19    A       Backlight               5v/NC   5v/NC
              	; 20    K       Backlight               GND/NC  GND/NC
              	;
              	;
              	;        ORG 2000H               ;Start location
              	        
              	; Modifiable values.  Thse three values can be modified to suit your own set up
              	; LCD_IR and LCD_DR are the output ports to send an Instruction or Data value.
              	; V_DELAY_US is the minimum delay needed for a command to be processed by the
              	; LCD board.  If only some of the data is being sent, make this value larger
              	        
              	;Port 7 on TEC is connected to LCD Enable (Pin 6)
              	;A7 is connected to Register select (Pin 4).  (A7=0 for Instruction, A7=1 for Data)
0070:         	LCD_IR:	EQU 70H         ;Instruction Register
0071:         	LCD_DR:	EQU 71H         ;Data Register (A7)
0000:         	LCD_SER: EQU 00H        ;Serial Port if used
0007:         	V_DELAY_US: EQU $0007   ;Delay for 76us on your system $0004
              	
              	;Serial or Parallel communications to the LCD Screen.  Comment one of 
              	;the labels below based on the LCD connections. 00H = FALSE, 01H = TRUE
              	;COMMS_MODE: EQU 00H     ;Using PARALLEL Data connection
              	;COMMS_MODE: EQU 01H     ;Using SERIAL Data connection
              	
              	; Dont need to modify anything else below.
00F8:         	SER_BT: EQU 11111000B           ;Serial Synchronisation Byte
00B5:         	UP:     EQU $B5                 ; Up Arrow, change Z80 Mini
00B6:         	DN:     EQU $B6                 ; Down Arrow, change Z80Mini
0008:         	BKSP:   EQU 08H                 ; Back space 08H
0009:         	TAB:    EQU 09H                 ; Horizontal TAB
000A:         	LF:     EQU 0AH                 ; Line feed
000C:         	CS:     EQU 0CH                 ; Clear screen
000D:         	CR:     EQU 0DH                 ; Carriage return
0020:         	SPACE:  EQU 20H                 ; Space
008F:         	CURSOR: EQU 8FH                 ; Cursor
007F:         	DEL     EQU    7FH              ; Delete
063F: 00      	BDEL:     DB    00H
0003:         	CTRLC       .EQU    03H             ; Control "C"
              	
              	;-----------------
              	; LCD_PRINT_STRING
              	; Entry: HL
              	; String terminada com 0
              	;-----------------
0640:         	LCD_PRINT_STRING:
0640: F5      	        PUSH AF
0641: C5      		PUSH BC
0642: D5      	        PUSH DE
0643: E5      	        PUSH HL
0644: 3E00    	        LD A, 0 ; terminador da string..
0646: 545D    	        LD DE, HL
0648: CD3C0A  		CALL SEND_STRING_TO_GLCD
064B: E1      	        POP HL
064C: D1      	        POP DE
064D: C1      	        POP BC 
064E: F1      	        POP AF
064F: C9      		RET
              	
              	
              	;-----------------
              	; Claer screen - reset terminal
              	;-----------------
0650:         	LCD_CLEAR:
0650: 3E0C    	        LD A, CS
0652: CD5C06  	        CALL LCD_PRINT_A
0655: C9      	        RET
              	        
              	;-----------------
              	; NEW LINE
              	;-----------------
0656:         	LCD_CR:
0656: 3E0D    		LD A, CR
0658: CD5C06  		CALL LCD_PRINT_A
065B: C9      		RET
              	
              	;-----------------
              	; LCD_PRINT_A
              	; Destroy only AF
              	;-----------------
065C:         	LCD_PRINT_A:
065C: F5      	        PUSH AF
065D: C5      		PUSH BC
065E: D5      	        PUSH DE
065F: E5      	        PUSH HL
              	        
              	        ; check delete (MSBasic)
0660: F5      	        PUSH AF
0661: 3A3F06  	        LD A, (BDEL)
0664: B7      	        or a
0665: FEFF    	        CP $FF
0667: CC8006  	        call z, DELETE_CHAR
066A: F1      	        POP AF
066B: B7      	        or a
066C: FE00    	        CP $0
066E: 2008    	        jr nz, LCD_PRINT_A_OK
0670: 3EFF    	        LD A, $FF ; delete proximo char
0672: 323F06  	        LD (BDEL), A
0675: C37B06  	        jp LCD_PRINT_A_FIM
0678:         	LCD_PRINT_A_OK:
0678: CDCD09  		CALL SEND_CHAR_TO_GLCD
067B:         	LCD_PRINT_A_FIM:
067B: E1      	        POP HL
067C: D1      	        POP DE
067D: C1      	        POP BC 
067E: F1      	        POP AF
067F: C9      		RET
              	
0680:         	DELETE_CHAR:
0680: F1      	        POP AF ; AF
0681: E1      	        POP HL ; CALL
0682: AF      	        XOR A
0683: 323F06  	        LD (BDEL), A
              	        
0686: 3E7F    	        LD A, DEL ; delete char
0688: C37806  	        JP LCD_PRINT_A_OK
              	
              	;-----------------
              	; LCD_IMAGE_128x64 - Print image 128x64, CURSOR 0,0
              	; Entry: HL
              	;-----------------
068B:         	LCD_IMAGE_128x64: 
068B: F5      	        PUSH AF
068C: C5      		PUSH BC
068D: D5      	        PUSH DE
068E: E5      	        PUSH HL
068F: 010000  	        LD BC, $0000
0692: CD7E0A  	        CALL SET_CURSOR
0695: 0680    	        LD B, 128
0697: 0E40    	        LD C, 64
0699: CD530B  		CALL PLOT_GRAPHIC
069C: CD3009  	        CALL PLOT_TO_LCD
069F: E1      	        POP HL
06A0: D1      	        POP DE
06A1: C1      	        POP BC 
06A2: F1      	        POP AF
06A3: C9      		RET
              	
              	
              	
              	; Initialise LCD
06A4:         	INIT_LCD:
06A4: 21CC0B  	        LD HL, INIT_BASIC       ;POINT HL TO LCD INITIALIZE TABLE
06A7: 0606    	        LD B, 06H               ;B=4 BYTES
06A9:         	NEXT_CMD:
06A9: 7E      	        LD A, (HL)
06AA: CD9C0B  	        CALL LCD_INST
06AD: 23      	        INC HL
06AE: 10F9    	        DJNZ NEXT_CMD
06B0: 118002  	        LD DE, $0280            ;1.6 ms $0140@4Mhz
06B3: CDA609  	        CALL DELAY_MS
              	        
06B6: CDC906  	        CALL CLEAR_GR_LCD
              	        
              	; Clears the Graphics Memory Buffer
06B9:         	CLEAR_GBUF:
06B9: 2A80FB  	        LD HL, (VPORT)
06BC: ED5B80FB	        LD DE, (VPORT)
06C0: 13      	        INC DE
06C1: AF      	        XOR A
06C2: 77      	        LD (HL), A
06C3: 01FF03  	        LD BC, 03FFH
06C6: EDB0    	        LDIR
06C8: C9      	        RET
              	        
              	; Clears the Graphics LCD Buffer
06C9:         	CLEAR_GR_LCD:
06C9: CD0707  	        CALL SET_GR_MODE
06CC: 0E00    	        LD C, 00H
06CE:         	CLR_X:
06CE: 3E80    	        LD A, 80H
06D0: B1      	        OR C
06D1: CD9C0B  	        CALL LCD_INST
06D4: 3E80    	        LD A, 80H
06D6: CD9C0B  	        CALL LCD_INST
06D9: 3E02    	        LD A, 02H 
06DB: CDB40B  	        CALL SER_SYNC           ;Data Block Sync
06DE: AF      	        XOR A                   ;Clear Byte
06DF: 0610    	        LD B, 10H
06E1:         	CLR_Y:
06E1: CDA10B  	        CALL LCD_DATA
06E4: CDA10B  	        CALL LCD_DATA
06E7: 10F8    	        DJNZ CLR_Y
06E9: 0C      	        INC C
06EA: 79      	        LD A, C
06EB: FE20    	        CP 20H
06ED: 20DF    	        JR NZ, CLR_X        
06EF: C9      	        RET
              	
              	; Clears the ASCII Text LCD
06F0:         	CLEAR_TXT_LCD:
06F0: CD1107  	        CALL SET_TXT_MODE
06F3: 3E80    	        LD A, 80H
06F5: CD9C0B  	        CALL LCD_INST
06F8: 3E02    	        LD A, 02H 
06FA: CDB40B  	        CALL SER_SYNC           ;Data Block Sync
06FD: 0640    	        LD B, 40H
06FF:         	CLR_ROWS:
06FF: 3E20    	        LD A,  " "
0701: CDA10B  	        CALL LCD_DATA
0704: 10F9    	        DJNZ CLR_ROWS
0706: C9      	        RET
              	        
              	; Set Graphics Mode
0707:         	SET_GR_MODE:
0707: 3E34    	        LD A, 34H
0709: CD9C0B  	        CALL LCD_INST
070C: 3E36    	        LD A, 36H
070E: C39C0B  	        JP LCD_INST
              	        
              	; Set Text Mode
0711:         	SET_TXT_MODE:
0711: 3E30    	        LD A, 30H
0713: C39C0B  	        JP LCD_INST
              	        
              	;Draw Box
              	;Inputs: BC = X0,Y0
              	;        DE = X1,Y1
              	;Destroys: HL
0716:         	DRAW_BOX:
0716: C5      	        PUSH BC
0717:         	GTOP:
0717: CDD108  	        CALL DRAW_PIXEL
071A: 7A      	        LD A, D
071B: 04      	        INC B
071C: B8      	        CP B
071D: 30F8    	        JR NC, GTOP
071F: C1      	        POP BC
              	        
0720: C5      	        PUSH BC
0721: 4B      	        LD C, E
0722:         	GBOTTOM:
0722: CDD108  	        CALL DRAW_PIXEL
0725: 7A      	        LD A, D
0726: 04      	        INC B
0727: B8      	        CP B
0728: 30F8    	        JR NC, GBOTTOM
072A: C1      	        POP BC
              	        
072B: C5      	        PUSH BC
072C:         	GLEFT:
072C: CDD108  	        CALL DRAW_PIXEL
072F: 7B      	        LD A, E
0730: 0C      	        INC C
0731: B9      	        CP C
0732: 30F8    	        JR NC, GLEFT
0734: C1      	        POP BC
              	        
0735: C5      	        PUSH BC
0736: 42      	        LD B, D
0737:         	GRIGHT:
0737: CDD108  	        CALL DRAW_PIXEL
073A: 7B      	        LD A, E
073B: 0C      	        INC C
073C: B9      	        CP C
073D: 30F8    	        JR NC, GRIGHT
073F: C1      	        POP BC
0740: C9      	        RET
              	        
              	;Fill Box
              	;Draws vertical lines from X0,Y0 to X0,Y1 and increase X0 to X1 until X0=X1
              	;Inputs: BC = X0,Y0
              	;        DE = X1,Y1
              	;Destroys: HL
0741:         	FILL_BOX:
0741: C5      	        PUSH BC
0742:         	NEXT_PIXEL:
0742: CDD108  	        CALL DRAW_PIXEL
0745: 7B      	        LD A, E
0746: 0C      	        INC C
0747: B9      	        CP C
0748: 30F8    	        JR NC, NEXT_PIXEL
074A: C1      	        POP BC
074B: 7A      	        LD A, D
074C: 04      	        INC B
074D: B8      	        CP B
074E: 30F1    	        JR NC, FILL_BOX
0750: C9      	        RET
              	        
              	;Draw a line between two points using Bresenham Line Algorithm
              	; void plotLine(int x0, int y0, int x1, int y1)
              	; {
              	;    int dx =  abs(x1-x0), sx = x0<x1 ? 1 : -1;
              	;    int dy = -abs(y1-y0), sy = y0<y1 ? 1 : -1;
              	;    int err = dx+dy, e2; /* error value e_xy */
              	        
              	;    for(;;){  /* loop */
              	;       setPixel(x0,y0);
              	;       if (x0==x1 && y0==y1) break;
              	;       e2 = 2*err;
              	;       if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
              	;       if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
              	;    }
              	; }
              	;Inputs: BC = X0,Y0
              	;        DE = X1,Y1
0751:         	DRAW_LINE:
              	;check that points are in range
0751: 79      	        LD A, C
0752: FE40    	        CP 40H
0754: D0      	        RET NC
0755: 78      	        LD A, B
0756: FE80    	        CP 80H
0758: D0      	        RET NC
0759: 7B      	        LD A, E
075A: FE40    	        CP 40H
075C: D0      	        RET NC
075D: 7A      	        LD A, D
075E: FE80    	        CP 80H
0760: D0      	        RET NC
              	        
              	;sx = x0<x1 ? 1 : -1
0761: 2601    	        LD H, 01H
0763: 78      	        LD A, B
0764: BA      	        CP D
0765: 3802    	        JR C, $ + 4
0767: 26FF    	        LD H, 0FFH
0769: 7C      	        LD A, H
076A: 3286FB  	        LD (SX), A
              	        
              	;sy = y0<y1 ? 1 : -1
076D: 2601    	        LD H, 01H
076F: 79      	        LD A, C
0770: BB      	        CP E
0771: 3802    	        JR C, $ + 4
0773: 26FF    	        LD H, 0FFH
0775: 7C      	        LD A, H
0776: 3287FB  	        LD (SY), A
              	        
0779: ED5384FB	        ld (ENDPT), DE
              	        
              	;dx =  abs(x1-x0)
077D: C5      	        PUSH BC
077E: 6A      	        LD L, D
077F: 2600    	        LD H, 0
0781: 48      	        LD C, B
0782: 0600    	        LD B, 0
0784: B7      	        OR A
0785: ED42    	        SBC HL, BC
0787: CDF207  	        CALL ABSHL
078A: 2288FB  	        LD (DX), HL
078D: C1      	        POP BC
              	        
              	;dy = -abs(y1-y0)
078E: C5      	        PUSH BC
078F: 6B      	        LD L, E
0790: 2600    	        LD H, 0
0792: 0600    	        LD B, 0
0794: B7      	        OR A
0795: ED42    	        SBC HL, BC
0797: CDF207  	        CALL ABSHL
079A: AF      	        XOR A
079B: 95      	        SUB L
079C: 6F      	        LD L, A
079D: 9F      	        SBC A, A
079E: 94      	        SUB H
079F: 67      	        LD H, A
07A0: 228AFB  	        LD (DY), HL
07A3: C1      	        POP BC
              	        
              	;err = dx+dy,
07A4: ED5B88FB	        LD DE, (DX)
07A8: 19      	        ADD HL, DE
07A9: 228CFB  	        LD (ERR), HL
              	        
07AC:         	LINE_LOOP:
              	;setPixel(x0,y0)
07AC: CDD108  	        CALL DRAW_PIXEL
              	        
              	;if (x0==x1 && y0==y1) break;
07AF: 3A85FB  	        LD A, (ENDPT + 1)
07B2: B8      	        CP B
07B3: 2005    	        JR NZ, $ + 7
07B5: 3A84FB  	        LD A, (ENDPT)
07B8: B9      	        CP C
07B9: C8      	        RET Z
              	        
              	;e2 = 2*err;
07BA: 2A8CFB  	        LD HL, (ERR)
07BD: 29      	        ADD HL, HL              ;E2
              	        
              	;if (e2 >= dy)  err += dy; x0 += sx;
07BE: ED5B8AFB	        LD DE, (DY)
07C2: B7      	        OR A
07C3: ED52    	        SBC HL, DE
07C5: 19      	        ADD HL, DE
07C6: FAD707  	        JP M, LL2
              	        
07C9: E5      	        PUSH HL
07CA: 2A8CFB  	        LD HL, (ERR)
07CD: 19      	        ADD HL, DE
07CE: 228CFB  	        LD (ERR), HL
07D1: 3A86FB  	        LD A, (SX)
07D4: 80      	        ADD A, B
07D5: 47      	        LD B, A
07D6: E1      	        POP HL
              	        
07D7:         	LL2:
              	;if (e2 <= dx)  err += dx; y0 += sy;
07D7: ED5B88FB	        LD DE, (DX)
07DB: B7      	        OR A
07DC: ED52    	        SBC HL, DE
07DE: 19      	        ADD HL, DE
07DF: 2803    	        JR Z, LL3
07E1: F2AC07  	        JP P, LINE_LOOP
07E4:         	LL3:
07E4: 2A8CFB  	        LD HL, (ERR)
07E7: 19      	        ADD HL, DE
07E8: 228CFB  	        LD (ERR), HL
07EB: 3A87FB  	        LD A, (SY)
07EE: 81      	        ADD A, C
07EF: 4F      	        LD C, A
              	        
07F0: 18BA    	        JR LINE_LOOP
              	        
07F2:         	ABSHL:
07F2: CB7C    	        BIT 7, H
07F4: C8      	        RET Z
07F5: AF      	        XOR A
07F6: 95      	        SUB L
07F7: 6F      	        LD L, A
07F8: 9F      	        SBC A, A
07F9: 94      	        SUB H
07FA: 67      	        LD H, A
07FB: C9      	        RET
              	        
              	;Draw a circle from a midpoint to a radius using Bresenham Line Algorithm
              	; void plotCircle(int xm, int ym, int r)
              	; {
              	;    int x = -r, y = 0, err = 2-2*r, i = 0; /* II. Quadrant */
              	;    printf("Midpoint = (%X,%X), Radius = %X\n", xm, ym, r);
              	;    do {
              	;       printf("(%X,%X) ", xm-x, ym+y); /*   I. Quadrant */
              	;       printf("(%X,%X) ", xm-y, ym-x); /*  II. Quadrant */
              	;       printf("(%X,%X) ", xm+x, ym-y); /* III. Quadrant */
              	;       printf("(%X,%X) ", xm+y, ym+x); /*  IV. Quadrant */
              	;       r = err;
              	;       if (r <= y) err += ++y*2+1;           /* e_xy+e_y < 0 */
              	;       if (r > x || err > y) err += ++x*2+1; /* e_xy+e_x > 0 or no 2nd y-step */
              	;       printf("x = %d, r = %d, y = %d, err =%d\n", x, r, y, err);
              	;    } while (x < 0);
              	; }
              	;Inputs BC = xm,ym (Midpoint)
              	;       E = radius
07FC:         	DRAW_CIRCLE:
              	;   int x = -r, err = 2-2*r; /* II. Quadrant */
07FC: AF      	        XOR A
07FD: 93      	        SUB E
07FE: 3286FB  	        LD (SX), A              ;x
              	;   y = 0
0801: AF      	        XOR A
0802: 3287FB  	        LD (SY), A              ;y
              	;   RAD = r
0805: 1600    	        LD D, 00H
0807: 7B      	        LD A, E
0808: ED538EFB	        LD (RAD), DE            ;r
              	;   err = 2-2*r
080C: EB      	        EX DE, HL
080D: 29      	        ADD HL, HL
080E: EB      	        EX DE, HL
080F: 210200  	        LD HL, 0002H
0812: B7      	        OR A
0813: ED52    	        SBC HL, DE              ;err
0815: 228CFB  	        LD (ERR), HL
              	        
0818:         	CIRCLE_LOOP:
              	;       setPixel(xm-x, ym+y); /*   I. Quadrant */
0818: C5      	        PUSH BC
0819: 3A86FB  	        LD A, (SX)
081C: ED44    	        NEG
081E: 80      	        ADD A, B
081F: 47      	        LD B, A
0820: 3A87FB  	        LD A, (SY)
0823: 81      	        ADD A, C
0824: 4F      	        LD C, A
0825: CDD108  	        CALL DRAW_PIXEL
0828: C1      	        POP BC
              	;       setPixel(xm+x, ym-y); /* III. Quadrant */
0829: C5      	        PUSH BC
082A: 3A86FB  	        LD A, (SX)
082D: 80      	        ADD A, B
082E: 47      	        LD B, A
082F: 3A87FB  	        LD A, (SY)
0832: ED44    	        NEG
0834: 81      	        ADD A, C
0835: 4F      	        LD C, A
0836: CDD108  	        CALL DRAW_PIXEL
0839: C1      	        POP BC
              	;       setPixel(xm-y, ym-x); /*  II. Quadrant */
083A: C5      	        PUSH BC
083B: 3A87FB  	        LD A, (SY)
083E: ED44    	        NEG
0840: 80      	        ADD A, B
0841: 47      	        LD B, A
0842: 3A86FB  	        LD A, (SX)
0845: ED44    	        NEG
0847: 81      	        ADD A, C
0848: 4F      	        LD C, A
0849: CDD108  	        CALL DRAW_PIXEL
084C: C1      	        POP BC
              	;       setPixel(xm+y, ym+x); /*  IV. Quadrant */
084D: C5      	        PUSH BC
084E: 3A87FB  	        LD A, (SY)
0851: 80      	        ADD A, B
0852: 47      	        LD B, A
0853: 3A86FB  	        LD A, (SX)
0856: 81      	        ADD A, C
0857: 4F      	        LD C, A
0858: CDD108  	        CALL DRAW_PIXEL
085B: C1      	        POP BC
              	;       r = err;
085C: 2A8CFB  	        LD HL, (ERR)
085F: 228EFB  	        LD (RAD), HL
              	;       if (r <= y) err += ++y*2+1;           /* e_xy+e_y < 0 */
0862: 3A87FB  	        LD A, (SY)
0865: 5F      	        LD E, A
0866: 1600    	        LD D, 0
0868: B7      	        OR A
0869: ED52    	        SBC HL, DE
086B: 19      	        ADD HL, DE
086C: 2803    	        JR Z, $ + 5
086E: F28408  	        JP P, DS1
0871: 3A87FB  	        LD A, (SY)
0874: 3C      	        INC A
0875: 3287FB  	        LD (SY), A
0878: 87      	        ADD A, A
0879: 3C      	        INC A
087A: 5F      	        LD E, A
087B: 1600    	        LD D, 0
087D: 2A8CFB  	        LD HL, (ERR)
0880: 19      	        ADD HL, DE
0881: 228CFB  	        LD (ERR), HL
              	;       if (r > x || err > y) err += ++x*2+1; /* e_xy+e_x > 0 or no 2nd y-step */
0884:         	DS1:
0884: 2A8EFB  	        LD HL, (RAD)
0887: 3A86FB  	        LD A, (SX)
088A: 16FF    	        LD D, 0FFH
088C: 5F      	        LD E, A
088D: B7      	        OR A
088E: ED52    	        SBC HL, DE
0890: 19      	        ADD HL, DE
0891: 2803    	        JR Z, $ + 5
0893: F2A808  	        JP P, DS2
0896: 2A8CFB  	        LD HL, (ERR)
0899: 3A87FB  	        LD A, (SY)
089C: 1600    	        LD D, 0
089E: 5F      	        LD E, A
089F: B7      	        OR A
08A0: ED52    	        SBC HL, DE
08A2: 19      	        ADD HL, DE
08A3: 2816    	        JR Z, DS3
08A5: FABB08  	        JP M, DS3
08A8:         	DS2:
08A8: 3A86FB  	        LD A, (SX)
08AB: 3C      	        INC A
08AC: 3286FB  	        LD (SX), A
08AF: 87      	        ADD A, A
08B0: 3C      	        INC A
08B1: 5F      	        LD E, A
08B2: 16FF    	        LD D, 0FFH
08B4: 2A8CFB  	        LD HL, (ERR)
08B7: 19      	        ADD HL, DE
08B8: 228CFB  	        LD (ERR), HL
              	;   } while (x < 0);
08BB:         	DS3:
08BB: 3A86FB  	        LD A, (SX)
08BE: B7      	        OR A
08BF: C21808  	        JP NZ, CIRCLE_LOOP
08C2: C9      	        RET
              	        
              	;Fill Circle
              	;Fills a circle by increasing radius until Radius = Original Radius E
              	;Inputs BC = xm,ym (Midpoint)
              	;       E = radius
08C3:         	FILL_CIRCLE:
08C3: 1601    	        LD D, 01H               ;Start radius
08C5:         	NEXT_CIRCLE:
08C5: D5      	        PUSH DE                 ;Save end Radius
08C6: 5A      	        LD E, D
08C7: CDFC07  	        CALL DRAW_CIRCLE
08CA: D1      	        POP DE                  ;Restore Radius
08CB: 7B      	        LD A, E
08CC: 14      	        INC D
08CD: BA      	        CP D
08CE: 30F5    	        JR NC, NEXT_CIRCLE
08D0: C9      	        RET
              	        
              	;Draw Pixel in position X Y
              	;Input B = column/X (0-127), C = row/Y (0-63)
              	;destroys HL
08D1:         	DRAW_PIXEL:
08D1: 79      	        LD A, C
08D2: FE40    	        CP 40H
08D4: D0      	        RET NC
08D5: 78      	        LD A, B
08D6: FE80    	        CP 80H
08D8: D0      	        RET NC
              	        
08D9: D5      	        PUSH DE
08DA: CD1109  	        CALL SET_GBUF
              	
08DD: 7A      	        LD A, D
08DE: B6      	        OR (HL)
08DF: BE      	        CP (HL)
08E0: CCE808  	        call z, set_collision
              	
08E3: 7A      	        LD A, D
08E4: AE      	        XOR (HL) ; OR ou XOR ???? Ou deixou configuravel???
08E5: 77      	        LD (HL), A
08E6: D1      	        POP DE
08E7: C9      	        RET
              	
              	; Quando tenta ligar um pixel que ja esta ligado...
08E8:         	set_collision:
08E8: 3E01    	        LD A, 1
08EA: 329BFB  	        LD (DRAW_PIXEL_COLLISION), A
08ED: C9      	        ret
              	
              	
              	
              	;Clear Pixel in position X Y
              	;Input B = column/X (0-127), C = row/Y (0-63)
              	;destroys HL
08EE:         	CLEAR_PIXEL:
08EE: 79      	        LD A, C
08EF: FE40    	        CP 40H
08F1: D0      	        RET NC
08F2: 78      	        LD A, B
08F3: FE80    	        CP 80H
08F5: D0      	        RET NC
              	        
08F6: D5      	        PUSH DE
08F7: CD1109  	        CALL SET_GBUF
              	
08FA: 7A      	        LD A, D
08FB: 2F      	        CPL
08FC: A6      	        AND (HL)
08FD: 77      	        LD (HL), A
08FE: D1      	        POP DE
08FF: C9      	        RET
              	
              	;Flip Pixel in position X Y
              	;Input B = column/X (0-127), C = row/Y (0-63)
              	;destroys HL
0900:         	FLIP_PIXEL:
0900: 79      	        LD A, C
0901: FE40    	        CP 40H
0903: D0      	        RET NC
0904: 78      	        LD A, B
0905: FE80    	        CP 80H
0907: D0      	        RET NC
              	        
0908: D5      	        PUSH DE
0909: CD1109  	        CALL SET_GBUF
              	
090C: 7A      	        LD A, D
090D: AE      	        XOR (HL)
090E: 77      	        LD (HL), A
090F: D1      	        POP DE
0910: C9      	        RET
              	
              	;Helper routine to set HL to the correct GBUF address given X and Y
              	;Input B = column/X (0-127), C = row/Y (0-63)
              	;Output HL = address of GBUF X,Y byte, D = Byte with Pixel Bit Set
              	;Destroys E
0911:         	SET_GBUF:
0911: 69      	        LD L, C
0912: 2600    	        LD H, 00H
0914: 29      	        ADD HL, HL
0915: 29      	        ADD HL, HL
0916: 29      	        ADD HL, HL
0917: 29      	        ADD HL, HL
0918: ED5B80FB	        LD DE, (VPORT)
091C: 1B      	        DEC DE
091D: 19      	        ADD HL, DE
              	        
091E: 78      	        LD A, B
091F: 1608    	        LD D, 08H
0921:         	BASE_COL:
0921: 23      	        INC HL
0922: 92      	        SUB D
0923: 30FC    	        JR NC, BASE_COL
              	        
0925: 2F      	        CPL
0926: 1601    	        LD D, 01H
0928: B7      	        OR A
0929: C8      	        RET Z
092A:         	SHIFT_BIT:
092A: CB22    	        SLA D
092C: 3D      	        DEC A
092D: 20FB    	        JR NZ, SHIFT_BIT
092F: C9      	        RET
              	
              	;Main draw routine.  Moves GBUF to LCD and clears buffer
              	;Destroys all
0930:         	PLOT_TO_LCD:
0930: 2A80FB  	        LD HL, (VPORT)
0933: 0E80    	        LD C, 80H
0935:         	PLOT_ROW:
0935: 79      	        LD A, C
0936: E69F    	        AND 9FH
0938: CD9C0B  	        CALL LCD_INST           ;Vertical
093B: 3E80    	        LD A, 80H
093D: CB69    	        BIT 5, C
093F: 2802    	        JR Z, $ + 4
0941: F608    	        OR 08H
0943: CD9C0B  	        CALL LCD_INST           ;Horizontal
0946: 3E02    	        LD A, 02H 
0948: CDB40B  	        CALL SER_SYNC           ;Data Block Sync
094B: 0610    	        LD B, 10H               ;send eight double bytes (16 bytes)
094D:         	PLOT_COLUMN:
094D: 7E      	        LD A, (HL)
094E: CDA10B  	        CALL LCD_DATA
0951: 3A90FB  	        LD A, (CLRBUF)
0954: B7      	        OR A
0955: 2802    	        JR Z, $ + 4
0957: 3600    	        LD (HL), 00H            ;Clear Buffer if CLRBUF is non zero
0959: 23      	        INC HL
095A: 10F1    	        DJNZ PLOT_COLUMN
095C: 0C      	        INC C
095D: CB71    	        BIT 6, C                ;Is Row = 64?
095F: 28D4    	        JR Z, PLOT_ROW
0961: C9      	        RET
              	        
              	; Print ASCII text on a given row
              	; Inputs: A = 0 to 3 Row Number
              	;         DB "String" on next line, terminate with 0
              	; EG:
              	;   LD A,2
              	;   CALL PRINT_STRING
              	;   DB "This Text",0
              	;
0962:         	PRINT_STRING:
0962: 47      	        LD B, A
0963: CD1107  	        CALL SET_TXT_MODE
0966: 21C80B  	        LD HL, ROWS
0969: 78      	        LD A, B
096A: 85      	        ADD A, L
096B: 3001    	        JR NC, $ + 3
096D: 24      	        INC H
096E: 6F      	        LD L, A
096F: 7E      	        LD A, (HL)
0970: CD9C0B  	        CALL LCD_INST
0973: 3E02    	        LD A, 02H 
0975: CDB40B  	        CALL SER_SYNC           ;Data Block Sync
0978: E1      	        POP HL
0979:         	DS_LOOP:
0979: 7E      	        LD A, (HL)
097A: 23      	        INC HL
097B: B7      	        OR A
097C: 2805    	        JR Z, DS_EXIT
097E: CDA10B  	        CALL LCD_DATA
0981: 18F6    	        JR DS_LOOP
0983:         	DS_EXIT:
0983: E9      	        JP (HL)
              	        
              	;Print Characters at a position X,Y
              	;Eventhough there are 16 columns, only every second column can be written
              	;to and two characters are to be printed.  IE: if you want to print one
              	;character in column 2, then you must set B=0 and print " x", putting
              	;a space before the chracter.
              	;Input B = column/X (0-7), C = row/Y (0-3)
              	;      HL = Start address of text to display, terminate with 0
0984:         	PRINT_CHARS:
0984: CD1107  	        CALL SET_TXT_MODE
0987: 11C80B  	        LD DE, ROWS
098A: 79      	        LD A, C
098B: 83      	        ADD A, E
098C: 3001    	        JR NC, $ + 3
098E: 14      	        INC D
098F: 5F      	        LD E, A
0990: 1A      	        LD A, (DE)
0991: 80      	        ADD A, B
0992: CD9C0B  	        CALL LCD_INST
0995: 3E02    	        LD A, 02H 
0997: CDB40B  	        CALL SER_SYNC           ;Data Block Sync
099A:         	PC_LOOP:
099A: 7E      	        LD A, (HL)
099B: 23      	        INC HL
099C: B7      	        OR A
099D: C8      	        RET Z
099E: CDA10B  	        CALL LCD_DATA
09A1: 18F7    	        JR PC_LOOP
              	        
              	; Delay for LCD write
09A3:         	DELAY_US:
09A3: 110700  	        LD DE, V_DELAY_US       ;DELAY BETWEEN, was 0010H
09A6:         	DELAY_MS:
09A6: 1B      	        DEC DE                  ;EACH BYTE
09A7: 7A      	        LD A, D                 ;AS PER
09A8: B3      	        OR E                    ;LCD MANUFACTER'S
09A9: 20FB    	        JR NZ, DELAY_MS         ;INSTRUCTIONS
09AB: C9      	        RET
              	        
              	; Set Buffer Clearing after outputting to LCD
              	; Input: A = 0 Buffer to be cleared, A <> 0 Buffer kept
09AC:         	SET_BUF_CLEAR:
09AC: 3EFF    	        LD A, 0FFH
09AE: 3290FB  	        LD (CLRBUF), A
09B1: C3B906  	        JP CLEAR_GBUF
              	        
09B4:         	SET_BUF_NO_CLEAR:
09B4: AF      	        XOR A
09B5: 3290FB  	        LD (CLRBUF), A
09B8: C9      	        RET
              	
              	;Initialise the GLCD Terminal
              	;Clears the GBUF, sets cursor to top left and displays cursor.
              	;This must be called prior to any Terminal routine.  This routine
              	;will as call INIT_LCD.
09B9:         	INIT_TERMINAL:
09B9: 2180F7  	        LD HL,TGBUF              ;Reset VPORT and BUFF_TOP to TGBUF
09BC: 2280FB  	        LD (VPORT),HL           ;to GBUF
09BF: 2282FB  	        LD (TBUF),HL
09C2: CDA406  	        CALL INIT_LCD           ;Clear LCD GBUF
09C5: 010000  	        LD BC,0000H
09C8: CD7E0A  	        CALL SET_CURSOR         ;Move cursor to top left
09CB: 185F    	        JR DRAW_CURSOR          ;Draw Cursor and exit
              	
              	;Send or handle ASCII characters to the GLCD screen.  This routines displays
              	;ASCII charcters to the GLCD screen and handles some special control characters
              	;It also handles srolling history of 10 lines.  Characters are drawn at the 
              	;current cursor position.  Cursor increments if characger is drawn.
              	;       CR / 0DH = will move the cursor down and reset it column
              	;       LF / 0AH = is ignored
              	;       FF / 0CH = clears the terminal (restarts)
              	;       BS / 08H = will delete the character at the cursor and move cursor back one
              	;       HT / 09H = will TAB 4 spaces
              	;       UP / 05H = will scroll up one line if any
              	;       DN / 06H = will scroll down one line if any
              	;Input: A = ASCII charcter to send to the GLCD screen.
              	;       A = 0  cursor drawn only
09CD:         	SEND_CHAR_TO_GLCD:
              	        ;Check for special characters
09CD: B7      	        OR A                    ;Zero?
09CE: 285C    	        JR Z,DRAW_CURSOR
09D0:         	DO_SCRL_UP:
09D0: FEB5    	        CP UP                   ;Up Arrow
09D2: 2007    	        JR NZ,DO_SCRL_DN
09D4: AF      	        XOR A
09D5: CDEA0A  	        CALL MOVE_VPORT
09D8: C33009  	        JP PLOT_TO_LCD
09DB:         	DO_SCRL_DN:
09DB: FEB6    	        CP DN                   ;Down Arrow
09DD: 2004    	        JR NZ,DO_CR
09DF: 3E01    	        LD A,1
09E1: 18F2    	        JR $-12                 ;Move VPORT above
09E3:         	DO_CR:
              	        ;Key is now a drawing character, reset VPORT first
09E3: 2180F7  	        LD HL,TGBUF
09E6: 2280FB  	        LD (VPORT),HL
09E9: FE0A    	        CP LF      ;LF
09EB: C8      	        RET Z
09EC: FE0D    	        CP CR      ;CR
09EE: 200D    	        JR NZ,DO_FF
09F0: 3E20    	        LD A,SPACE              ;Clear Cursor
09F2: CD400B  	        CALL DRAW_GRAPHIC
09F5: CD9C0A  	        CALL INC_ROW
09F8: 3293FB  	        LD (CURSOR_YS),A        ;Save start row
09FB: 182F    	        JR DRAW_CURSOR
09FD:         	DO_FF:
09FD: FE0C    	        CP CS                   ;Form Feed / Clear Screen
09FF: 28B8    	        JR Z,INIT_TERMINAL      ;Reset All.
0A01:         	DO_BS:
0A01: FE7F    	        CP DEL                 ;Backspace BKSP
0A03: 200A    	        JR NZ,DO_TAB
0A05: 3E20    	        LD A,SPACE              ;Space
0A07: CD400B  	        CALL DRAW_GRAPHIC
0A0A: CD0A0B  	        CALL DEC_CURSOR
0A0D: 181D    	        JR DRAW_CURSOR
0A0F:         	DO_TAB:
0A0F: FE09    	        CP TAB                  ;Horizontal Tab
0A11: 2013    	        JR NZ,DO_CHAR
0A13: 3E20    	        LD A,SPACE              ;Space
0A15: CD400B  	        CALL DRAW_GRAPHIC
0A18: CD8F0A  	        CALL INC_CURSOR
0A1B: CD8F0A  	        CALL INC_CURSOR
0A1E: CD8F0A  	        CALL INC_CURSOR
0A21: CD8F0A  	        CALL INC_CURSOR
0A24: 1806    	        JR DRAW_CURSOR
0A26:         	DO_CHAR:
0A26: CD400B  	        CALL DRAW_GRAPHIC
0A29: CD8F0A  	        CALL INC_CURSOR
0A2C:         	DRAW_CURSOR:
0A2C: 3A94FB  	        LD A,(CURSOR_ON)
0A2F: B7      	        OR A
0A30: 3E20    	        LD A,SPACE              ;Space
0A32: 2002    	        JR NZ,$+4               ;Skip cursor draw
0A34: 3E8F    	        LD A,CURSOR             ;Cursor
0A36: CD400B  	        CALL DRAW_GRAPHIC
0A39: C33009  	        JP PLOT_TO_LCD          ;Plot screen and exit
              	
              	
              	
              	;Send a string of characters to the GLCD.  Prints a string pointed 
              	;by DE.  It stops printing and returns when either a CR is printed or
              	;when the next byte is the same as what is in register A
              	;Inputs: DE = address of string to print
              	;        A = character to stop printing.
              	;Destroy: All
0A3C:         	SEND_STRING_TO_GLCD:
0A3C: 47      	        LD B,A                  ;Save cp in B
0A3D:         	PS1:
0A3D: 1A      	        LD A,(DE)               ;Get character
0A3E: 13      	        INC DE                  ;Move pointer
0A3F: B8      	        CP B                    ;Same as B?
0A40: 28EA    	        JR Z,DRAW_CURSOR        ;Yes exit and plot LCD screen
0A42: FE0D    	        CP CR                   ;Is it a CR?
0A44: 289D    	        JR Z,DO_CR              ;Yes do a CR and plot LCD screen and exit
0A46: FE0C    	        CP CS                   ;Is it a FF?
0A48: 28B3    	        JR Z,DO_FF              ;Yes do a Form Feed and plot LCD screen and exit
0A4A: D9      	        EXX                     ;Save bulk registers
0A4B: CD400B  	        CALL DRAW_GRAPHIC       ;Draw the character
0A4E: CD8F0A  	        CALL INC_CURSOR         ;Move cursor by one
0A51: D9      	        EXX                     ;Restore bulk registers
0A52: 18E9    	        JR PS1                  ;Repeat for next character
0A54: C9      	        RET     
              	
              	;Display the register A in ASCII on the GLCD
              	;Input: A = value to convert and display
0A55:         	SEND_A_TO_GLCD:
0A55: CD5A0A  	        CALL DRAW_A             ;Do the conversion
0A58: 18D2    	        JR DRAW_CURSOR          ;exit and plot LCD screen
0A5A:         	DRAW_A:
0A5A: F5      	        PUSH AF                 ;Save AF
0A5B: 0F      	        RRCA                    ;move high
0A5C: 0F      	        RRCA                    ;nibble to low nibble
0A5D: 0F      	        RRCA
0A5E: 0F      	        RRCA
0A5F: CD630A  	        CALL NIBBLE_TO_GLCD     ;Convert and display
0A62: F1      	        POP AF                  ;Restore AF
0A63:         	NIBBLE_TO_GLCD:
0A63: E60F    	        AND 0FH                 ;mask out high nibble
0A65: C690    	        ADD A,90H               ;convert to 
0A67: 27      	        DAA                     ;ASCII
0A68: CE40    	        ADC A,40H               ;using this
0A6A: 27      	        DAA                     ;amazing routine
0A6B: CD400B  	        CALL DRAW_GRAPHIC       ;Draw the character
0A6E: CD8F0A  	        CALL INC_CURSOR         ;Move cursor by one
0A71: C9      	        RET
              	
              	;Display the register HL in ASCII on the GLCD
              	;Input: HL = value to convert and display
0A72:         	SEND_HL_TO_GLCD:
0A72: E5      	        PUSH HL                 ;Save HL
0A73: 7C      	        LD A,H                  ;get H
0A74: CD5A0A  	        CALL DRAW_A             ;Do the conversion
0A77: E1      	        POP HL
0A78: 7D      	        LD A,L                  ;get L
0A79: CD5A0A  	        CALL DRAW_A             ;Do the conversion
0A7C: 18AE    	        JR DRAW_CURSOR          ;exit and plot LCD screen
              	
              	;Set the Graphic cursor position
              	;Inputs: BC = X,Y where X = 0..127, Y = 0..63
              	;Ignores update if one of the X,Y values are out of range
              	;Destroys: A
0A7E:         	SET_CURSOR:
              	        ;Check range. Exit if X,Y out of range
0A7E: 79      	        LD A, C
0A7F: FE40    	        CP 40H
0A81: D0      	        RET NC
0A82: 78      	        LD A, B
0A83: FE80    	        CP 80H
0A85: D0      	        RET NC
              	        ;Set Cursor and initial start row
0A86: ED4391FB	        LD (CURSOR_XY),BC       ;Save cursor
0A8A: 79      	        LD A,C
0A8B: 3293FB  	        LD (CURSOR_YS),A        ;And initial Y Start
0A8E: C9      	        RET
              	
              	;Increment the cursor by one font character
              	;A Font Character is 6x6 Pixels.  Move column 6 across until it can't then reset
              	;column back to 0 and move 6 down.
              	;If can't go down any further then keep on last row but move column back to 0
              	;Font Characters maximum 20 across and 10 down
              	;Output: Carry Set = No screen overflow
              	;Destroys: A
0A8F:         	INC_CURSOR:
0A8F: 3A92FB  	        LD A,(CURSOR_X)         ;Get X
0A92: C606    	        ADD A,6                 ;Add 6
0A94: FE7E    	        CP 126                  ;Is it >= 126?
0A96: 3004    	        JR NC,INC_ROW           ;Yes, reset column and increment row
0A98: 3292FB  	        LD (CURSOR_X),A         ;Save new column
0A9B: C9      	        RET
0A9C:         	INC_ROW:
0A9C: AF      	        XOR A
0A9D: 3292FB  	        LD (CURSOR_X),A         ;reset column to 0
0AA0: 3A91FB  	        LD A,(CURSOR_Y)         ;get row
0AA3: C606    	        ADD A,6                 ;Add 6
0AA5: FE3C    	        CP 60                   ;Is it >= 60
0AA7: 3807    	        JR C,SAVE_ROW           ;No, save new row
0AA9: F5      	        PUSH AF
0AAA: CDB40A  	        CALL SHIFT_BUFFER       ;Shift buffer up one row
0AAD: F1      	        POP AF
0AAE: D606    	        SUB 6                   ;overflow, just leave the same
0AB0:         	SAVE_ROW:
0AB0: 3291FB  	        LD (CURSOR_Y),A         ;Save new row
0AB3: C9      	        RET
              	
              	;Shift the graphics buffer (GBUF) into the scroll buffer (SBUF) by
              	;one row (6 lines).  Move the top buffer address to the new top of 
              	;the scroll buffer
0AB4:         	SHIFT_BUFFER:
              	        ;Check if anymore buffer left
0AB4: 2A82FB  	        LD HL,(TBUF)        ;Get top buffer address
0AB7: 1100F0  	        LD DE,TGBUF-SBUF    ;Get scroll buffer address
0ABA: B7      	        OR A                ;Clear carry
0ABB: ED52    	        SBC HL,DE           ;TBUF-SBUF
0ABD: 2809    	        JR Z,SKIP_TBUF
0ABF: 19      	        ADD HL,DE           ;restore HL
0AC0: 116000  	        LD DE,16*6          ;Six pixel rows
0AC3: ED52    	        SBC HL,DE           ;Move TBUF down by 6 rows
0AC5: 2282FB  	        LD (TBUF),HL        ;Save new TBUF
0AC8:         	SKIP_TBUF:
0AC8: 2160F0  	        LD HL,TGBUF-SBUF+(16*6) ;Top of scroll buffer less one row
0ACB: 1100F0  	        LD DE,TGBUF-SBUF    ;Top of scroll buffer
0ACE: 01E00A  	        LD BC,16*6*29       ;19 rows (change to 20 lines 19 to 29 (+10)) Z80 Mini
0AD1: EDB0    	        LDIR
0AD3: 21E0FA  	        LD HL,TGBUF+0360H   ;clear last row (9*16)
0AD6: 11E1FA  	        LD DE,TGBUF+0361H
0AD9: 015F00  	        LD BC,5FH
0ADC: AF      	        XOR A
0ADD: 77      	        LD (HL),A
0ADE: EDB0    	        LDIR
              	        ;Move Y Start up one row
0AE0: 3A93FB  	        LD A,(CURSOR_YS)    ;Get Y Start row
0AE3: D606    	        SUB 6
0AE5: D8      	        RET C               ;Ignore if less than zero
0AE6: 3293FB  	        LD (CURSOR_YS),A    
0AE9: C9      	        RET
              	
              	;Move the VPORT vertically between TBUF and end of GBUB.  VPORT will be 
              	;shifted by a standard termial row of 6 lines.
              	;input: A = 0 shift up else shift down
0AEA:         	MOVE_VPORT:
0AEA: 2A80FB  	        LD HL,(VPORT)       ;get viewport
0AED: EB      	        EX DE,HL
0AEE: B7      	        OR A                ;check move
0AEF: 200E    	        JR NZ,MOVE_DOWN     ;shift down
0AF1:         	MOVE_UP:
0AF1: 2A82FB  	        LD HL,(TBUF)        ;get top of buffer
0AF4: ED52    	        SBC HL,DE           ;
0AF6: C8      	        RET Z               ;if the same, then at top already
0AF7: 21A0FF  	        LD HL,0-60H         ;one row up 60
0AFA:         	SAVE_VPORT:
0AFA: 19      	        ADD HL,DE           ;get new VPORT value
0AFB: 2280FB  	        LD (VPORT),HL
0AFE: C9      	        RET
0AFF:         	MOVE_DOWN:
0AFF: 2180F7  	        LD HL,TGBUF         ;get top of graphics buffer
0B02: ED52    	        SBC HL,DE           ;
0B04: C8      	        RET Z               ;if the same, then at top already
0B05: 216000  	        LD HL,60H           ;one row down 60
0B08: 18F0    	        JR SAVE_VPORT
              	
              	;Decrement the cursor by one font character up to the current row start
              	;Used to help with Backspace character or left arrow?
              	;Destroys: A
0B0A:         	DEC_CURSOR:
0B0A: 3A92FB  	        LD A,(CURSOR_X)         ;Get X
0B0D: D606    	        SUB 6                   ;subract 6
0B0F:         	SAVE_COL:
0B0F: 3292FB  	        LD (CURSOR_X),A         ;Save new column
              	        ;if < 0 then just make 0 or 20 depending on Y Start
0B12: D0      	        RET NC
0B13: C5      	        PUSH BC
0B14: 3A93FB  	        LD A,(CURSOR_YS)        ;Get Y Start
0B17: 47      	        LD B,A
0B18: 3A91FB  	        LD A,(CURSOR_Y)         ;Get Y
0B1B: 90      	        SUB B
0B1C: C1      	        POP BC
0B1D: 3E00    	        LD A,0                  ;reset to 0
0B1F: 28EE    	        JR Z,SAVE_COL
0B21: 3E78    	        LD A,6*20               ;last column 20
0B23: 3292FB  	        LD (CURSOR_X),A         ;Save new column
0B26: 3A91FB  	        LD A,(CURSOR_Y)
0B29: D606    	        SUB 6                   ;move row one line up
0B2B: 3291FB  	        LD (CURSOR_Y),A         ;Save new row
0B2E: C9      	        RET
              	
              	;Get cursor position
              	;Outputs: BC = X,Y where X = 0..127, Y = 0..63
0B2F:         	GET_CURSOR:
0B2F: ED4B91FB	        LD BC,(CURSOR_XY)
0B33: C9      	        RET
              	
              	;Display Cursor
              	;Input: A = 0, Turn cursor on, A = non zero, Turn cursor off
              	;Default is Cursor ON
0B34:         	DISPLAY_CURSOR:
0B34: 3294FB  	        LD (CURSOR_ON),A
0B37: C9      	        RET
              	
              	;Inverse Graphic Drawing
              	;Initial state is normal.  Calling this routine will TOGGLE the inverse drawing flag
              	;Destroys: A
0B38:         	INV_GRAPHIC:
0B38: 3A95FB  	        LD A,(INVERSE)
0B3B: 2F      	        CPL                 ;flip bits
0B3C: 3295FB  	        LD (INVERSE),A
0B3F: C9      	        RET
              	
              	;Draw Graphic at the current cursor.  Draw either an ASCII character or
              	;a custom sprite/picture
              	;Input: A = ASCII number or 
              	;    if A=0 Then 
              	;       HL = Address of graphic data
              	;       B = width of graphic in pixels (1-128)
              	;       C = height of graphic in pixels (1-64)
              	;Destroys: All
0B40:         	DRAW_GRAPHIC:
0B40: B7      	        OR A                ;is A=0
0B41: 2810    	        JR Z,PLOT_GRAPHIC   ;yes, use data pointing to HL
              	        ;Use internal font table and index it to value in A
0B43: 3D      	        DEC A               ;fix for A = 0..255
0B44: 2600    	        LD H,0
0B46: 6F      	        LD L,A
0B47: 29      	        ADD HL,HL           ;Multipy A by 2
0B48: 54      	        LD D,H
0B49: 5D      	        LD E,L              ;Save in DE
0B4A: 29      	        ADD HL,HL           ;Multipy A by 4
0B4B: 19      	        ADD HL,DE           ;Multiply by 6
0B4C: 11D60B  	        LD DE,FONT_DATA     ;Font Table
0B4F: 19      	        ADD HL,DE           ;Add index (A*8) to HL
0B50: 010606  	        LD BC,0606H         ;Six pixels across, Six pixels down
0B53:         	PLOT_GRAPHIC:
0B53: 50      	        LD D,B              ;D=Column pixel count
0B54: 7A      	        LD A,D
0B55: 3296FB  	        LD (PIXEL_X),A      ;Save original pixel length
0B58: 59      	        LD E,C              ;E=Row pixel count
0B59: ED4B91FB	        LD BC,(CURSOR_XY)   ;Get graphics cursor position
0B5D:         	PLOT_BYTE:
0B5D: 7A      	        LD A,D              ;Get column bit count
0B5E: D608    	        SUB 8
0B60: 57      	        LD D,A
0B61: D5      	        PUSH DE        
0B62: 1608    	        LD D,8
0B64: 5E      	        LD E,(HL)           ;get pixel data
0B65: 3009    	        JR NC,INV_BIT
0B67: 82      	        ADD A,D             ;Restore column bit count
0B68: 57      	        LD D,A
0B69: 7A      	        LD A,D
              	        ;D = Rotate adjust count
0B6A: CB0B    	        RRC E               ;rotate it to get first bit in bit 7
0B6C: 15      	        DEC D
0B6D: 20FB    	        JR NZ,$-3
0B6F: 57      	        LD D,A              ;reset D to actual bit count
0B70:         	INV_BIT:
0B70: 3E00    	        LD A, 0      ;check inverse flag
0B72: AB      	        XOR E               ;flip bits
0B73: 5F      	        LD E,A              ;save new data
0B74:         	PLOT_BIT:
0B74: CB03    	        RLC E
0B76: E5      	        PUSH HL
0B77: 3005    	        JR NC,REMOVE_PIXEL
0B79: CDD108  	        CALL DRAW_PIXEL
0B7C: 1803    	        JR $+5
0B7E:         	REMOVE_PIXEL:
              	        ;CALL CLEAR_PIXEL
0B7E: 00      	        NOP 
0B7F: 00      	        NOP 
0B80: 00      	        NOP 
0B81: E1      	        POP HL
0B82: 04      	        INC B               ;move X to the right by one
0B83: 15      	        DEC D
0B84: 20EE    	        JR NZ,PLOT_BIT
              	        ;All bits are plotted check if D <= 0
0B86: 23      	        INC HL              ;move to next pixel byte
0B87: D1      	        POP DE              ;restore Column/Row bit count
0B88: 7A      	        LD A,D
0B89: B7      	        OR A                ;check for zero or lessor
0B8A: 2803    	        JR Z,$+5
0B8C: F25D0B  	        JP P,PLOT_BYTE      ;its greater or zero, do next byte
              	        ;Move down a row and set column to the start
0B8F: 1D      	        DEC E               ;move column pixel count down by one
0B90: C8      	        RET Z               ;if its zero no more to do, just exit
0B91: 0C      	        INC C               ;move down a row
0B92: 3A92FB  	        LD A,(CURSOR_X)
0B95: 47      	        LD B,A              ;reset column
0B96: 3A96FB  	        LD A,(PIXEL_X)
0B99: 57      	        LD D,A              ;reset pixel length per row
0B9A: 18C1    	        JR PLOT_BYTE
              	
              	;Serial/Paralled Communication routines
              	;Send information to the LCD screen via SERIAL or PARALLEL connection.  Parallel is straight
              	;forward.  Just send the Byte in the Accumilator to the relevante Instruction or Data port.
              	;Then call a delay for that byte to be processed by the LCD.
              	;For Serial communication, three Bytes are to be sent using the SPI protocol.
              	;The first byte is a synchronise/configuration byte.  This sets
              	;the Data/Instruction register bit.  The second and third bytes is the actual data to send.
              	;It is split into two bytes with 4 bits of data set at the upper nibble and zeros for the rest.
              	;A maximum of 256 Bytes of Data information can be send with only one Synchronise Byte.  The
              	;LCD Data routine doesn't send the sync byte.  It needs to be done prior by calling SER_SYNC first.
              	;
              	;The two routines to use are:
              	;LCD_DATA, Sends Data information.  Along with SER_SYNC called prior and
              	;LCD_INST, Sends Instruction information
              	
              	;Send to LCD Instruction register
              	;If serial connection it will send the byte with a synchronise byte.
              	;If parallel byte is sent to the Instruction register port and a delay is triggered
              	;Input: A = Byte to send
0B9C:         	LCD_INST:
              	;IF COMMS_MODE
              	;        PUSH AF
              	;        XOR A
              	;        CALL SER_SYNC
              	;        POP AF
              	;        JP SER_BYTE
              	;ELSE
0B9C: D370    	        OUT (LCD_IR), A
0B9E: C3A309  	        JP DELAY_US
              	;ENDIF
              	
              	;Send to LCD Data register
              	;If serial connection it will send the byte with no synchronise byte.  The
              	;synchronise byte is to be sent separately.
              	;If parallel byte is sent to the Data register port and a delay is triggered
              	;Input: A = Byte to send
0BA1:         	LCD_DATA:
              	;IF COMMS_MODE
              	;        JP SER_BYTE
              	;ELSE
0BA1: D371    	        OUT (LCD_DR), A
0BA3: C3A309  	        JP DELAY_US
              	;ENDIF
              	
              	;Serial Byte Send
              	;Send a Byte in two halfs,  First half is the upper nibble with 4 zeros and second
              	;byte is the lower nibble shifted to the upper nibble with 4 zeros.
              	;   EG: if Byte to send is 10010110B, then
              	;   BYTE 1 = 10010000b and
              	;   BYTE 2 = 01100000b
              	;Input: A = byte to send
0BA6:         	SER_BYTE:
0BA6: F5      	        PUSH AF
0BA7: CDAF0B  	        CALL SEND_PART
0BAA: F1      	        POP AF
0BAB: 07      	        RLCA
0BAC: 07      	        RLCA
0BAD: 07      	        RLCA
0BAE: 07      	        RLCA
0BAF:         	SEND_PART:
0BAF: E6F0    	        AND 0F0H                ;Mask out lower nibble
0BB1: C3B50B  	        JP SPI_WR               ;Send First Half of Command/Data byte
              	
              	;Serial Synchronise Byte
              	;Send 5 consecutive '1's then '000's for instruction or '010' for data.
              	;Input: A = 0x00 for instruction register and 0x02 if data register
0BB4:         	SER_SYNC:
              	;IF COMMS_MODE
              	;        OR SER_BT
              	;ELSE
0BB4: C9      	        RET
              	;ENDIF
              	
              	;SPI Write Routine.
              	;Send a byte to the LCD using the SPI protocol
              	;Inputs: A = Byte to be sent
0BB5:         	SPI_WR:
0BB5: C5      	        PUSH BC
0BB6: 0608    	        LD B, 08H       ;Eight Bits to send
0BB8: 4F      	        LD C, A         ;SPI Byte
0BB9: AF      	        XOR A           ;Clear A
0BBA:         	CLK_LOOP:
0BBA: CB01    	        RLC C           ;Put Bit 7 in Carry Flag
0BBC: 8F      	        ADC A,A         ;Set Bit 0 with Carry Flag
0BBD: F602    	        OR 02H          ;Set SCLK high (pulse clock)
0BBF: D300    	        OUT (LCD_SER),A ;Output to LCD
0BC1: AF      	        XOR A           ;Set SCLK low (and SID)
0BC2: D300    	        OUT (LCD_SER),A ;Output to LCD
0BC4: 10F4    	        DJNZ CLK_LOOP   ;Get next Bit
0BC6: C1      	        POP BC
0BC7: C9      	        RET
              	
              	; Contstants
0BC8: 80908898	ROWS:   DB      80H,90H,88H,98H ;Text Row start position
              	        
0BCC:         	INIT_BASIC:
0BCC: 30      	        DB  30H
0BCD: 20      	        DB  20H
0BCE: 30      	        DB  30H
0BCF: 0C      	        DB  0CH
0BD0: 01      	        DB  01H
0BD1: 02      	        DB  02H
              	        ;fim
              	
              	
              	
              	
0BD2: 30      	        DB      30H             ;8 Bit interface, basic instruction
0BD3: 0C      	        DB      0CH             ;display on, cursor & blink off
0BD4: 06      	        DB      06H             ;cursor move to right ,no shift
0BD5: 01      	        DB      01H             ;clear RAM
              	
              	;General Graphic Data
              	;Byte 1 = X pixel length, Byte 2 = Y pixel length
              	;Byte n = Pixel data where bits represent pixels.  Read from LSB
0BD6:         	FONT_DATA:
              	        ;001
0BD6: 1E      	        DB 00011110b   ;  ####
0BD7: 21      	        DB 00100001b   ; #    #
0BD8: 21      	        DB 00100001b   ; #    #
0BD9: 21      	        DB 00100001b   ; #    #
0BDA: 21      	        DB 00100001b   ; #    #
0BDB: 1E      	        DB 00011110b   ;  ####
              	        ;002
0BDC: 1E      	        DB 00011110b   ;  ####
0BDD: 3F      	        DB 00111111b   ; ######
0BDE: 3F      	        DB 00111111b   ; ######
0BDF: 3F      	        DB 00111111b   ; ######
0BE0: 3F      	        DB 00111111b   ; ######
0BE1: 1E      	        DB 00011110b   ;  ####
              	        ;003 Up Arrow
0BE2: 0C      	        DB 00001100b   ;   ##
0BE3: 1E      	        DB 00011110b   ;  ####
0BE4: 3F      	        DB 00111111b   ; ######
0BE5: 0C      	        DB 00001100b   ;   ##
0BE6: 0C      	        DB 00001100b   ;   ##
0BE7: 0C      	        DB 00001100b   ;   ##
              	        ;004 Down Arrow
0BE8: 0C      	        DB 00001100b   ;   ##
0BE9: 0C      	        DB 00001100b   ;   ##
0BEA: 0C      	        DB 00001100b   ;   ##
0BEB: 3F      	        DB 00111111b   ; ######
0BEC: 1E      	        DB 00011110b   ;  ####
0BED: 0C      	        DB 00001100b   ;   ##
              	        ;005 Left Arrow
0BEE: 08      	        DB 00001000b   ;   #
0BEF: 18      	        DB 00011000b   ;  ##
0BF0: 3F      	        DB 00111111b   ; ######
0BF1: 3F      	        DB 00111111b   ; ######
0BF2: 18      	        DB 00011000b   ;  ##
0BF3: 08      	        DB 00001000b   ;   #
              	        ;006 Right Arrow
0BF4: 04      	        DB 00000100b   ;    #
0BF5: 06      	        DB 00000110b   ;    ##
0BF6: 3F      	        DB 00111111b   ; ######
0BF7: 3F      	        DB 00111111b   ; ######
0BF8: 06      	        DB 00000110b   ;    ##
0BF9: 04      	        DB 00000100b   ;    #
              	        ;007 Up Hat
0BFA: 0C      	        DB 00001100b   ;   ##
0BFB: 1E      	        DB 00011110b   ;  ####
0BFC: 3F      	        DB 00111111b   ; ######
0BFD: 00      	        DB 00000000b   ;
0BFE: 00      	        DB 00000000b   ;
0BFF: 00      	        DB 00000000b   ;
              	        ;008 Down Hat
0C00: 00      	        DB 00000000b   ;
0C01: 00      	        DB 00000000b   ;
0C02: 00      	        DB 00000000b   ;
0C03: 3F      	        DB 00111111b   ; ######
0C04: 1E      	        DB 00011110b   ;  ####
0C05: 0C      	        DB 00001100b   ;   ##
              	        ;009 Left Hat
0C06: 08      	        DB 00001000b   ;   #
0C07: 18      	        DB 00011000b   ;  ##
0C08: 38      	        DB 00111000b   ; ###
0C09: 38      	        DB 00111000b   ; ###
0C0A: 18      	        DB 00011000b   ;  ##
0C0B: 08      	        DB 00001000b   ;   #
              	        ;010 Right Hat
0C0C: 04      	        DB 00000100b   ;    #
0C0D: 06      	        DB 00000110b   ;    ##
0C0E: 07      	        DB 00000111b   ;    ###
0C0F: 07      	        DB 00000111b   ;    ###
0C10: 06      	        DB 00000110b   ;    ##
0C11: 04      	        DB 00000100b   ;    #
              	        ;011 Note 1
0C12: 04      	        DB 00000100b   ;    #
0C13: 04      	        DB 00000100b   ;    # 
0C14: 04      	        DB 00000100b   ;    # 
0C15: 1C      	        DB 00011100b   ;  ###
0C16: 3C      	        DB 00111100b   ; ####
0C17: 18      	        DB 00011000b   ;  ##
              	        ;012 Note 2
0C18: 04      	        DB 00000100b   ;    #
0C19: 06      	        DB 00000110b   ;    ## 
0C1A: 05      	        DB 00000101b   ;    # #
0C1B: 1C      	        DB 00011100b   ;  ###
0C1C: 3C      	        DB 00111100b   ; ####
0C1D: 18      	        DB 00011000b   ;  ##
              	        ;013 Rocket
0C1E: 0C      	        DB 00001100b   ;   ##
0C1F: 0C      	        DB 00001100b   ;   ##
0C20: 0C      	        DB 00001100b   ;   ##
0C21: 0C      	        DB 00001100b   ;   ##
0C22: 1E      	        DB 00011110b   ;  ####
0C23: 33      	        DB 00110011b   ; ##  ##
              	        ;014 Bomb
0C24: 1E      	        DB 00011110b   ;  ####
0C25: 0C      	        DB 00001100b   ;   ##
0C26: 1E      	        DB 00011110b   ;  ####
0C27: 1E      	        DB 00011110b   ;  ####
0C28: 1E      	        DB 00011110b   ;  ####
0C29: 0C      	        DB 00001100b   ;   ##
              	        ;015 Explosion
0C2A: 0C      	        DB 00001100b   ;   ##
0C2B: 3F      	        DB 00111111b   ; ######
0C2C: 06      	        DB 00000110b   ;    ##
0C2D: 0C      	        DB 00001100b   ;   ##
0C2E: 18      	        DB 00011000b   ;  ##
0C2F: 0C      	        DB 00001100b   ;   ##
              	        ;016
0C30: 36      	        DB 00110110b   ; ## ##
0C31: 24      	        DB 00100100b   ; #  #
0C32: 00      	        DB 00000000b   ;
0C33: 00      	        DB 00000000b   ;
0C34: 00      	        DB 00000000b   ;
0C35: 00      	        DB 00000000b   ;
              	        ;017
0C36: 36      	        DB 00110110b   ; ## ##
0C37: 12      	        DB 00010010b   ;  #  #
0C38: 00      	        DB 00000000b   ;
0C39: 00      	        DB 00000000b   ;
0C3A: 00      	        DB 00000000b   ;
0C3B: 00      	        DB 00000000b   ;
              	        ;018
0C3C: 0E      	        DB 00001110b   ;   ###
0C3D: 12      	        DB 00010010b   ;  #  #
0C3E: 38      	        DB 00111000b   ; ###
0C3F: 12      	        DB 00010010b   ;  #  #
0C40: 3E      	        DB 00111110b   ; #####
0C41: 00      	        DB 00000000b   ;
              	        ;019
0C42: 1C      	        DB 00011100b   ;  ###
0C43: 22      	        DB 00100010b   ; #   #
0C44: 2A      	        DB 00101010b   ; # # #
0C45: 22      	        DB 00100010b   ; #   #
0C46: 1C      	        DB 00011100b   ;  ###
0C47: 00      	        DB 00000000b   ;
              	        ;020
0C48: 3E      	        DB 00111110b   ; #####
0C49: 34      	        DB 00110100b   ; ## #
0C4A: 34      	        DB 00110100b   ; ## #
0C4B: 14      	        DB 00010100b   ;  # #
0C4C: 14      	        DB 00010100b   ;  # #
0C4D: 00      	        DB 00000000b   ;
              	        ;021
0C4E: 1C      	        DB 00011100b   ;  ###
0C4F: 18      	        DB 00011000b   ;  ##
0C50: 24      	        DB 00100100b   ; #  #
0C51: 18      	        DB 00011000b   ;  ##
0C52: 38      	        DB 00111000b   ; ###
0C53: 00      	        DB 00000000b   ;
              	        ;022
0C54: 0C      	        DB 00001100b   ;   ##
0C55: 0C      	        DB 00001100b   ;   ##
0C56: 02      	        DB 00000010b   ;     #
0C57: 00      	        DB 00000000b   ;
0C58: 00      	        DB 00000000b   ;
0C59: 00      	        DB 00000000b   ;
              	        ;023
0C5A: 14      	        DB 00010100b   ;  # #
0C5B: 00      	        DB 00000000b   ;
0C5C: 08      	        DB 00001000b   ;   #
0C5D: 22      	        DB 00100010b   ; #   # 
0C5E: 1C      	        DB 00011100b   ;  ###
0C5F: 00      	        DB 00000000b   ;
              	        ;024
0C60: 14      	        DB 00010100b   ;  # #
0C61: 00      	        DB 00000000b   ;
0C62: 00      	        DB 00000000b   ;
0C63: 1C      	        DB 00011100b   ;  ###
0C64: 22      	        DB 00100010b   ; #   # 
0C65: 00      	        DB 00000000b   ;
              	        ;025
0C66: 08      	        DB 00001000b   ;   #
0C67: 00      	        DB 00000000b   ;
0C68: 18      	        DB 00011000b   ;  ##
0C69: 22      	        DB 00100010b   ; #   #
0C6A: 1C      	        DB 00011100b   ;  ###
0C6B: 00      	        DB 00000000b   ;
              	        ;026
0C6C: 08      	        DB 00001000b   ;   #
0C6D: 00      	        DB 00000000b   ;
0C6E: 08      	        DB 00001000b   ;   #
0C6F: 08      	        DB 00001000b   ;   #
0C70: 08      	        DB 00001000b   ;   #
0C71: 00      	        DB 00000000b   ;
              	        ;027
0C72: 00      	        DB 00000000b   ;
0C73: 00      	        DB 00000000b   ;
0C74: 3E      	        DB 00111110b   ; #####
0C75: 06      	        DB 00000110b   ;    ##
0C76: 06      	        DB 00000110b   ;    ##
0C77: 00      	        DB 00000000b   ;
              	        ;028
0C78: 1C      	        DB 00011100b   ;  ###
0C79: 1C      	        DB 00011100b   ;  ###
0C7A: 3E      	        DB 00111110b   ; #####
0C7B: 08      	        DB 00001000b   ;   #
0C7C: 1C      	        DB 00011100b   ;  ###
0C7D: 00      	        DB 00000000b   ;
              	        ;029
0C7E: 08      	        DB 00001000b   ;   #
0C7F: 1C      	        DB 00011100b   ;  ###
0C80: 3E      	        DB 00111110b   ; #####
0C81: 1C      	        DB 00011100b   ;  ###
0C82: 08      	        DB 00001000b   ;   #
0C83: 00      	        DB 00000000b   ;
              	        ;030
0C84: 14      	        DB 00010100b   ;  # #
0C85: 3E      	        DB 00111110b   ; #####
0C86: 3E      	        DB 00111110b   ; #####
0C87: 1C      	        DB 00011100b   ;  ###
0C88: 08      	        DB 00001000b   ;   #
0C89: 00      	        DB 00000000b   ;
              	        ;031
0C8A: 08      	        DB 00001000b   ;   #
0C8B: 1C      	        DB 00011100b   ;  ###
0C8C: 3E      	        DB 00111110b   ; #####
0C8D: 08      	        DB 00001000b   ;   #
0C8E: 1C      	        DB 00011100b   ;  ###
0C8F: 00      	        DB 00000000b   ;
              	        ;032 Space
0C90: 00      	        DB 00000000b   ;
0C91: 00      	        DB 00000000b   ;
0C92: 00      	        DB 00000000b   ;
0C93: 00      	        DB 00000000b   ;
0C94: 00      	        DB 00000000b   ;
0C95: 00      	        DB 00000000b   ;
              	        ;033 !
0C96: 08      	        DB 00001000b   ;   #
0C97: 08      	        DB 00001000b   ;   #
0C98: 08      	        DB 00001000b   ;   #
0C99: 00      	        DB 00000000b   ;
0C9A: 08      	        DB 00001000b   ;   #
0C9B: 00      	        DB 00000000b   ;
              	        ;034 "
0C9C: 14      	        DB 00010100b   ;  # #
0C9D: 14      	        DB 00010100b   ;  # #
0C9E: 00      	        DB 00000000b   ;
0C9F: 00      	        DB 00000000b   ;
0CA0: 00      	        DB 00000000b   ;
0CA1: 00      	        DB 00000000b   ;
              	        ;035 #
0CA2: 14      	        DB 00010100b   ;  # #
0CA3: 3E      	        DB 00111110b   ; #####
0CA4: 14      	        DB 00010100b   ;  # #
0CA5: 3E      	        DB 00111110b   ; #####
0CA6: 14      	        DB 00010100b   ;  # #
0CA7: 00      	        DB 00000000b   ;
              	        ;036 $
0CA8: 1E      	        DB 00011110b   ;  ####
0CA9: 28      	        DB 00101000b   ; # #
0CAA: 1C      	        DB 00011100b   ;  ###
0CAB: 0A      	        DB 00001010b   ;   # #
0CAC: 3C      	        DB 00111100b   ; ####
0CAD: 00      	        DB 00000000b   ;
              	        ;037 %
0CAE: 32      	        DB 00110010b   ; ##  #
0CAF: 34      	        DB 00110100b   ; ## #
0CB0: 08      	        DB 00001000b   ;   #
0CB1: 16      	        DB 00010110b   ;  # ##
0CB2: 26      	        DB 00100110b   ; #  ##
0CB3: 00      	        DB 00000000b   ;
              	        ;038 &
0CB4: 18      	        DB 00011000b   ;  ##
0CB5: 24      	        DB 00100100b   ; #  #
0CB6: 1A      	        DB 00011010b   ;  ## #
0CB7: 24      	        DB 00100100b   ; #  #
0CB8: 1A      	        DB 00011010b   ;  ## #
0CB9: 00      	        DB 00000000b   ;
              	        ;039 '
0CBA: 04      	        DB 00000100b   ;    #
0CBB: 08      	        DB 00001000b   ;   #
0CBC: 00      	        DB 00000000b   ;
0CBD: 00      	        DB 00000000b   ;
0CBE: 00      	        DB 00000000b   ;
0CBF: 00      	        DB 00000000b   ;
              	        ;040 (
0CC0: 04      	        DB 00000100b   ;    #
0CC1: 08      	        DB 00001000b   ;   #
0CC2: 08      	        DB 00001000b   ;   #
0CC3: 08      	        DB 00001000b   ;   #
0CC4: 04      	        DB 00000100b   ;    #
0CC5: 00      	        DB 00000000b   ;
              	        ;041 )
0CC6: 10      	        DB 00010000b   ;  #
0CC7: 08      	        DB 00001000b   ;   #
0CC8: 08      	        DB 00001000b   ;   #
0CC9: 08      	        DB 00001000b   ;   #
0CCA: 10      	        DB 00010000b   ;  #
0CCB: 00      	        DB 00000000b   ;
              	        ;042 *
0CCC: 2A      	        DB 00101010b   ; # # #
0CCD: 1C      	        DB 00011100b   ;  ###
0CCE: 3E      	        DB 00111110b   ; #####
0CCF: 1C      	        DB 00011100b   ;  ###
0CD0: 2A      	        DB 00101010b   ; # # #
0CD1: 00      	        DB 00000000b   ;
              	        ;043 +
0CD2: 00      	        DB 00000000b   ;
0CD3: 08      	        DB 00001000b   ;   #
0CD4: 1C      	        DB 00011100b   ;  ###
0CD5: 08      	        DB 00001000b   ;   #
0CD6: 00      	        DB 00000000b   ;
0CD7: 00      	        DB 00000000b   ;
              	        ;044 ,
0CD8: 00      	        DB 00000000b   ;
0CD9: 00      	        DB 00000000b   ;
0CDA: 00      	        DB 00000000b   ;
0CDB: 08      	        DB 00001000b   ;   #
0CDC: 10      	        DB 00010000b   ;  #
0CDD: 00      	        DB 00000000b   ;
              	        ;045 -
0CDE: 00      	        DB 00000000b   ;
0CDF: 00      	        DB 00000000b   ;
0CE0: 1C      	        DB 00011100b   ;  ###
0CE1: 00      	        DB 00000000b   ;
0CE2: 00      	        DB 00000000b   ;
0CE3: 00      	        DB 00000000b   ;
              	        ;046 .
0CE4: 00      	        DB 00000000b   ;
0CE5: 00      	        DB 00000000b   ;
0CE6: 00      	        DB 00000000b   ;
0CE7: 00      	        DB 00000000b   ;
0CE8: 10      	        DB 00010000b   ;  #
0CE9: 00      	        DB 00000000b   ;
              	        ;047 /
0CEA: 04      	        DB 00000100b   ;    #
0CEB: 08      	        DB 00001000b   ;   #
0CEC: 08      	        DB 00001000b   ;   #
0CED: 08      	        DB 00001000b   ;   #
0CEE: 10      	        DB 00010000b   ;  #
0CEF: 00      	        DB 00000000b   ;
              	        ;048 0
0CF0: 1C      	        DB 00011100b   ;  ###
0CF1: 14      	        DB 00010100b   ;  # #
0CF2: 14      	        DB 00010100b   ;  # #
0CF3: 14      	        DB 00010100b   ;  # #
0CF4: 1C      	        DB 00011100b   ;  ###
0CF5: 00      	        DB 00000000b   ;
              	        ;049 1
0CF6: 08      	        DB 00001000b   ;   #
0CF7: 18      	        DB 00011000b   ;  ##
0CF8: 08      	        DB 00001000b   ;   #
0CF9: 08      	        DB 00001000b   ;   #
0CFA: 1C      	        DB 00011100b   ;  ###
0CFB: 00      	        DB 00000000b   ;
              	        ;050 2
0CFC: 1C      	        DB 00011100b   ;  ###
0CFD: 04      	        DB 00000100b   ;    #
0CFE: 1C      	        DB 00011100b   ;  ###
0CFF: 10      	        DB 00010000b   ;  #
0D00: 1C      	        DB 00011100b   ;  ###
0D01: 00      	        DB 00000000b   ;
              	        ;051 3
0D02: 1C      	        DB 00011100b   ;  ###
0D03: 04      	        DB 00000100b   ;    #
0D04: 0C      	        DB 00001100b   ;   ##
0D05: 04      	        DB 00000100b   ;    #
0D06: 1C      	        DB 00011100b   ;  ###
0D07: 00      	        DB 00000000b   ;
              	        ;052 4
0D08: 10      	        DB 00010000b   ;  #
0D09: 10      	        DB 00010000b   ;  #
0D0A: 14      	        DB 00010100b   ;  # #
0D0B: 1C      	        DB 00011100b   ;  ###
0D0C: 04      	        DB 00000100b   ;    #
0D0D: 00      	        DB 00000000b   ;
              	        ;053 5
0D0E: 1C      	        DB 00011100b   ;  ###
0D0F: 10      	        DB 00010000b   ;  #
0D10: 1C      	        DB 00011100b   ;  ###
0D11: 04      	        DB 00000100b   ;    #
0D12: 1C      	        DB 00011100b   ;  ###
0D13: 00      	        DB 00000000b   ;
              	        ;054 6
0D14: 18      	        DB 00011000b   ;  ##
0D15: 10      	        DB 00010000b   ;  #
0D16: 1C      	        DB 00011100b   ;  ###
0D17: 14      	        DB 00010100b   ;  # #
0D18: 1C      	        DB 00011100b   ;  ###
0D19: 00      	        DB 00000000b   ;
              	        ;055 7
0D1A: 1C      	        DB 00011100b   ;  ###
0D1B: 04      	        DB 00000100b   ;    #
0D1C: 08      	        DB 00001000b   ;   #
0D1D: 10      	        DB 00010000b   ;  #
0D1E: 10      	        DB 00010000b   ;  #
0D1F: 00      	        DB 00000000b   ;
              	        ;056 8
0D20: 1C      	        DB 00011100b   ;  ###
0D21: 14      	        DB 00010100b   ;  # #
0D22: 1C      	        DB 00011100b   ;  ###
0D23: 14      	        DB 00010100b   ;  # #
0D24: 1C      	        DB 00011100b   ;  ###
0D25: 00      	        DB 00000000b   ;
              	        ;057 9
0D26: 1C      	        DB 00011100b   ;  ###
0D27: 14      	        DB 00010100b   ;  # #
0D28: 1C      	        DB 00011100b   ;  ###
0D29: 04      	        DB 00000100b   ;    #
0D2A: 1C      	        DB 00011100b   ;  ###
0D2B: 00      	        DB 00000000b   ;
              	        ;058 :
0D2C: 00      	        DB 00000000b   ;
0D2D: 08      	        DB 00001000b   ;   #
0D2E: 00      	        DB 00000000b   ;
0D2F: 08      	        DB 00001000b   ;   #
0D30: 00      	        DB 00000000b   ;
0D31: 00      	        DB 00000000b   ;
              	        ;059 ;
0D32: 00      	        DB 00000000b   ;
0D33: 08      	        DB 00001000b   ;   #
0D34: 00      	        DB 00000000b   ;
0D35: 08      	        DB 00001000b   ;   #
0D36: 10      	        DB 00010000b   ;  #
0D37: 00      	        DB 00000000b   ;
              	        ;060 <
0D38: 04      	        DB 00000100b   ;    #
0D39: 08      	        DB 00001000b   ;   #
0D3A: 10      	        DB 00010000b   ;  #
0D3B: 08      	        DB 00001000b   ;   #
0D3C: 04      	        DB 00000100b   ;    #
0D3D: 00      	        DB 00000000b   ;
              	        ;061 =
0D3E: 00      	        DB 00000000b   ;
0D3F: 1C      	        DB 00011100b   ;  ###
0D40: 00      	        DB 00000000b   ;
0D41: 1C      	        DB 00011100b   ;  ###
0D42: 00      	        DB 00000000b   ;
0D43: 00      	        DB 00000000b   ;
              	        ;062 >
0D44: 10      	        DB 00010000b   ;  #
0D45: 08      	        DB 00001000b   ;   #
0D46: 04      	        DB 00000100b   ;    #
0D47: 08      	        DB 00001000b   ;   #
0D48: 10      	        DB 00010000b   ;  #
0D49: 00      	        DB 00000000b   ;
              	        ;063 ?
0D4A: 1C      	        DB 00011100b   ;  ###
0D4B: 22      	        DB 00100010b   ; #   # 
0D4C: 0C      	        DB 00001100b   ;   ##
0D4D: 00      	        DB 00000000b   ;
0D4E: 08      	        DB 00001000b   ;   #
0D4F: 00      	        DB 00000000b   ;
              	        ;064 @
0D50: 1C      	        DB 00011100b   ;  ###
0D51: 22      	        DB 00100010b   ; #   #
0D52: 26      	        DB 00100110b   ; #  ##
0D53: 2A      	        DB 00101010b   ; # # # 
0D54: 0C      	        DB 00001100b   ;   ##
0D55: 00      	        DB 00000000b   ;
              	        ;065 A
0D56: 18      	        DB 00011000b   ;  ##
0D57: 24      	        DB 00100100b   ; #  #
0D58: 22      	        DB 00100010b   ; #   #
0D59: 3E      	        DB 00111110b   ; #####
0D5A: 22      	        DB 00100010b   ; #   #
0D5B: 00      	        DB 00000000b   ; 
              	        ;066 B
0D5C: 38      	        DB 00111000b   ; ###
0D5D: 24      	        DB 00100100b   ; #  #
0D5E: 3C      	        DB 00111100b   ; ####
0D5F: 22      	        DB 00100010b   ; #   #
0D60: 3C      	        DB 00111100b   ; ####
0D61: 00      	        DB 00000000b   ; 
              	        ;067 C
0D62: 1C      	        DB 00011100b   ;  ###
0D63: 22      	        DB 00100010b   ; #   # 
0D64: 20      	        DB 00100000b   ; #
0D65: 22      	        DB 00100010b   ; #   # 
0D66: 1C      	        DB 00011100b   ;  ###
0D67: 00      	        DB 00000000b   ;
              	        ;068 D
0D68: 3C      	        DB 00111100b   ; ####
0D69: 26      	        DB 00100110b   ; #  ##
0D6A: 22      	        DB 00100010b   ; #   #
0D6B: 22      	        DB 00100010b   ; #   #
0D6C: 3C      	        DB 00111100b   ; ####
0D6D: 00      	        DB 00000000b   ;
              	        ;069 E
0D6E: 3E      	        DB 00111110b   ; #####
0D6F: 20      	        DB 00100000b   ; #
0D70: 3C      	        DB 00111100b   ; ####
0D71: 20      	        DB 00100000b   ; #
0D72: 3E      	        DB 00111110b   ; #####
0D73: 00      	        DB 00000000b   ;
              	        ;070 F
0D74: 3E      	        DB 00111110b   ; #####
0D75: 20      	        DB 00100000b   ; #
0D76: 3C      	        DB 00111100b   ; ####
0D77: 20      	        DB 00100000b   ; #
0D78: 20      	        DB 00100000b   ; #
0D79: 00      	        DB 00000000b   ;
              	        ;071 G
0D7A: 1C      	        DB 00011100b   ;  ###
0D7B: 20      	        DB 00100000b   ; #    
0D7C: 26      	        DB 00100110b   ; #  ##
0D7D: 22      	        DB 00100010b   ; #   # 
0D7E: 1C      	        DB 00011100b   ;  ###
0D7F: 00      	        DB 00000000b   ;
              	        ;072 H
0D80: 24      	        DB 00100100b   ; #  #
0D81: 22      	        DB 00100010b   ; #   #
0D82: 3E      	        DB 00111110b   ; #####
0D83: 22      	        DB 00100010b   ; #   #
0D84: 22      	        DB 00100010b   ; #   #
0D85: 00      	        DB 00000000b   ;
              	        ;073 I
0D86: 1C      	        DB 00011100b   ;  ###
0D87: 08      	        DB 00001000b   ;   #
0D88: 08      	        DB 00001000b   ;   #
0D89: 08      	        DB 00001000b   ;   #
0D8A: 1C      	        DB 00011100b   ;  ###
0D8B: 00      	        DB 00000000b   ;
              	        ;074 J
0D8C: 0C      	        DB 00001100b   ;   ##
0D8D: 04      	        DB 00000100b   ;    #
0D8E: 04      	        DB 00000100b   ;    #
0D8F: 14      	        DB 00010100b   ;  # #
0D90: 1C      	        DB 00011100b   ;  ###
0D91: 00      	        DB 00000000b   ;
              	        ;075 K
0D92: 24      	        DB 00100100b   ; #  #
0D93: 28      	        DB 00101000b   ; # #
0D94: 30      	        DB 00110000b   ; ##
0D95: 28      	        DB 00101000b   ; # #
0D96: 24      	        DB 00100100b   ; #  #
0D97: 00      	        DB 00000000b   ;
              	        ;076 L
0D98: 20      	        DB 00100000b   ; #
0D99: 20      	        DB 00100000b   ; #
0D9A: 20      	        DB 00100000b   ; #
0D9B: 20      	        DB 00100000b   ; #
0D9C: 3C      	        DB 00111100b   ; ####
0D9D: 00      	        DB 00000000b   ; 
              	        ;077 M
0D9E: 22      	        DB 00100010b   ; #   #
0D9F: 36      	        DB 00110110b   ; ## ##
0DA0: 2A      	        DB 00101010b   ; # # #
0DA1: 22      	        DB 00100010b   ; #   #
0DA2: 22      	        DB 00100010b   ; #   #
0DA3: 00      	        DB 00000000b   ; 
              	        ;078 N
0DA4: 22      	        DB 00100010b   ; #   #
0DA5: 32      	        DB 00110010b   ; ##  #
0DA6: 2A      	        DB 00101010b   ; # # #
0DA7: 26      	        DB 00100110b   ; #  ##
0DA8: 22      	        DB 00100010b   ; #   #
0DA9: 00      	        DB 00000000b   ; 
              	        ;079 O
0DAA: 1C      	        DB 00011100b   ;  ###
0DAB: 26      	        DB 00100110b   ; #  ## 
0DAC: 22      	        DB 00100010b   ; #   #
0DAD: 22      	        DB 00100010b   ; #   # 
0DAE: 1C      	        DB 00011100b   ;  ###
0DAF: 00      	        DB 00000000b   ; 
              	        ;080 P
0DB0: 38      	        DB 00111000b   ; ###
0DB1: 24      	        DB 00100100b   ; #  #
0DB2: 38      	        DB 00111000b   ; ###
0DB3: 20      	        DB 00100000b   ; #
0DB4: 20      	        DB 00100000b   ; #
0DB5: 00      	        DB 00000000b   ; 
              	        ;081 Q
0DB6: 1C      	        DB 00011100b   ;  ###
0DB7: 22      	        DB 00100010b   ; #   # 
0DB8: 22      	        DB 00100010b   ; #   #
0DB9: 26      	        DB 00100110b   ; #  ## 
0DBA: 1E      	        DB 00011110b   ;  ####
0DBB: 00      	        DB 00000000b   ; 
              	        ;082 R
0DBC: 38      	        DB 00111000b   ; ###
0DBD: 24      	        DB 00100100b   ; #  #
0DBE: 38      	        DB 00111000b   ; ###
0DBF: 28      	        DB 00101000b   ; # #
0DC0: 24      	        DB 00100100b   ; #  #
0DC1: 00      	        DB 00000000b   ; 
              	        ;083 S
0DC2: 1E      	        DB 00011110b   ;  ####
0DC3: 20      	        DB 00100000b   ; #
0DC4: 1C      	        DB 00011100b   ;  ###
0DC5: 02      	        DB 00000010b   ;     #
0DC6: 3C      	        DB 00111100b   ; ####
0DC7: 00      	        DB 00000000b   ; 
              	        ;084 T
0DC8: 3E      	        DB 00111110b   ; #####
0DC9: 08      	        DB 00001000b   ;   #
0DCA: 08      	        DB 00001000b   ;   #
0DCB: 08      	        DB 00001000b   ;   #
0DCC: 08      	        DB 00001000b   ;   #
0DCD: 00      	        DB 00000000b   ; 
              	        ;085 U
0DCE: 24      	        DB 00100100b   ; #  #
0DCF: 22      	        DB 00100010b   ; #   #
0DD0: 22      	        DB 00100010b   ; #   #
0DD1: 22      	        DB 00100010b   ; #   #
0DD2: 1C      	        DB 00011100b   ;  ###
0DD3: 00      	        DB 00000000b   ; 
              	        ;086 V
0DD4: 22      	        DB 00100010b   ; #   #
0DD5: 22      	        DB 00100010b   ; #   #
0DD6: 14      	        DB 00010100b   ;  # #
0DD7: 14      	        DB 00010100b   ;  # #
0DD8: 08      	        DB 00001000b   ;   #
0DD9: 00      	        DB 00000000b   ; 
              	        ;087 W
0DDA: 24      	        DB 00100100b   ; #  #
0DDB: 22      	        DB 00100010b   ; #   #
0DDC: 2A      	        DB 00101010b   ; # # #
0DDD: 2A      	        DB 00101010b   ; # # #
0DDE: 14      	        DB 00010100b   ;  # #
0DDF: 00      	        DB 00000000b   ; 
              	        ;088 X
0DE0: 22      	        DB 00100010b   ; #   #
0DE1: 14      	        DB 00010100b   ;  # #
0DE2: 08      	        DB 00001000b   ;   #
0DE3: 14      	        DB 00010100b   ;  # #
0DE4: 22      	        DB 00100010b   ; #   #
0DE5: 00      	        DB 00000000b   ; 
              	        ;089 Y
0DE6: 22      	        DB 00100010b   ; #   #
0DE7: 14      	        DB 00010100b   ;  # #
0DE8: 08      	        DB 00001000b   ;   #
0DE9: 08      	        DB 00001000b   ;   #
0DEA: 08      	        DB 00001000b   ;   #
0DEB: 00      	        DB 00000000b   ; 
              	        ;090 Z
0DEC: 3E      	        DB 00111110b   ; #####
0DED: 04      	        DB 00000100b   ;    #
0DEE: 08      	        DB 00001000b   ;   #
0DEF: 10      	        DB 00010000b   ;  #
0DF0: 3E      	        DB 00111110b   ; #####
0DF1: 00      	        DB 00000000b   ; 
              	        ;091 [
0DF2: 0C      	        DB 00001100b   ;   ##
0DF3: 08      	        DB 00001000b   ;   #
0DF4: 08      	        DB 00001000b   ;   #
0DF5: 08      	        DB 00001000b   ;   #
0DF6: 0C      	        DB 00001100b   ;   ##
0DF7: 00      	        DB 00000000b   ; 
              	        ;092 \
0DF8: 10      	        DB 00010000b   ;  #
0DF9: 08      	        DB 00001000b   ;   #
0DFA: 08      	        DB 00001000b   ;   #
0DFB: 08      	        DB 00001000b   ;   #
0DFC: 04      	        DB 00000100b   ;    #
0DFD: 00      	        DB 00000000b   ; 
              	        ;093 ]
0DFE: 18      	        DB 00011000b   ;  ##
0DFF: 08      	        DB 00001000b   ;   #
0E00: 08      	        DB 00001000b   ;   #
0E01: 08      	        DB 00001000b   ;   #
0E02: 18      	        DB 00011000b   ;  ##
0E03: 00      	        DB 00000000b   ; 
              	        ;094 ^
0E04: 08      	        DB 00001000b   ;   #
0E05: 14      	        DB 00010100b   ;  # #
0E06: 00      	        DB 00000000b   ; 
0E07: 00      	        DB 00000000b   ; 
0E08: 00      	        DB 00000000b   ; 
0E09: 00      	        DB 00000000b   ; 
              	        ;095 _
0E0A: 00      	        DB 00000000b   ; 
0E0B: 00      	        DB 00000000b   ; 
0E0C: 00      	        DB 00000000b   ; 
0E0D: 00      	        DB 00000000b   ; 
0E0E: 3E      	        DB 00111110b   ; #####
0E0F: 00      	        DB 00000000b   ; 
              	        ;096 `
0E10: 08      	        DB 00001000b   ;   #
0E11: 04      	        DB 00000100b   ;    #
0E12: 00      	        DB 00000000b   ;
0E13: 00      	        DB 00000000b   ;
0E14: 00      	        DB 00000000b   ;
0E15: 00      	        DB 00000000b   ;
              	        ;097 a
0E16: 00      	        DB 00000000b   ; 
0E17: 1C      	        DB 00011100b   ;  ###
0E18: 22      	        DB 00100010b   ; #   #
0E19: 26      	        DB 00100110b   ; #  ##
0E1A: 1A      	        DB 00011010b   ;  ## #
0E1B: 00      	        DB 00000000b   ; 
              	        ;098 b
0E1C: 20      	        DB 00100000b   ; #
0E1D: 3C      	        DB 00111100b   ; ####
0E1E: 22      	        DB 00100010b   ; #   #
0E1F: 22      	        DB 00100010b   ; #   #
0E20: 3C      	        DB 00111100b   ; ####
0E21: 00      	        DB 00000000b   ; 
              	        ;099 c
0E22: 00      	        DB 00000000b   ; 
0E23: 1C      	        DB 00011100b   ;  ###
0E24: 20      	        DB 00100000b   ; #   
0E25: 20      	        DB 00100000b   ; #   
0E26: 1C      	        DB 00011100b   ;  ###
0E27: 00      	        DB 00000000b   ; 
              	        ;100 d
0E28: 02      	        DB 00000010b   ;     #
0E29: 1E      	        DB 00011110b   ;  ####
0E2A: 22      	        DB 00100010b   ; #   #
0E2B: 22      	        DB 00100010b   ; #   #
0E2C: 1E      	        DB 00011110b   ;  ####
0E2D: 00      	        DB 00000000b   ; 
              	        ;101 e
0E2E: 1C      	        DB 00011100b   ;  ###
0E2F: 22      	        DB 00100010b   ; #   #
0E30: 3C      	        DB 00111100b   ; ####
0E31: 20      	        DB 00100000b   ; #
0E32: 1E      	        DB 00011110b   ;  ####
0E33: 00      	        DB 00000000b   ; 
              	        ;102 f
0E34: 0E      	        DB 00001110b   ;   ###
0E35: 10      	        DB 00010000b   ;  # 
0E36: 3C      	        DB 00111100b   ; ####
0E37: 10      	        DB 00010000b   ;  # 
0E38: 10      	        DB 00010000b   ;  # 
0E39: 00      	        DB 00000000b   ; 
              	        ;103 g
0E3A: 1E      	        DB 00011110b   ;  ####
0E3B: 22      	        DB 00100010b   ; #   #
0E3C: 1E      	        DB 00011110b   ;  ####
0E3D: 02      	        DB 00000010b   ;     #
0E3E: 3C      	        DB 00111100b   ; ####
0E3F: 00      	        DB 00000000b   ; 
              	        ;104 h
0E40: 20      	        DB 00100000b   ; #
0E41: 20      	        DB 00100000b   ; #
0E42: 3C      	        DB 00111100b   ; ####
0E43: 22      	        DB 00100010b   ; #   #
0E44: 22      	        DB 00100010b   ; #   #
0E45: 00      	        DB 00000000b   ; 
              	        ;105 i
0E46: 08      	        DB 00001000b   ;   #
0E47: 00      	        DB 00000000b   ; 
0E48: 08      	        DB 00001000b   ;   #
0E49: 08      	        DB 00001000b   ;   #
0E4A: 08      	        DB 00001000b   ;   #
0E4B: 00      	        DB 00000000b   ; 
              	        ;106 j
0E4C: 04      	        DB 00000100b   ;    # 
0E4D: 00      	        DB 00000000b   ; 
0E4E: 04      	        DB 00000100b   ;    # 
0E4F: 04      	        DB 00000100b   ;    # 
0E50: 18      	        DB 00011000b   ;  ##
0E51: 00      	        DB 00000000b   ; 
              	        ;107 k
0E52: 20      	        DB 00100000b   ; #
0E53: 24      	        DB 00100100b   ; #  #
0E54: 28      	        DB 00101000b   ; # #
0E55: 34      	        DB 00110100b   ; ## #
0E56: 22      	        DB 00100010b   ; #   #
0E57: 00      	        DB 00000000b   ; 
              	        ;108 l
0E58: 08      	        DB 00001000b   ;   #
0E59: 08      	        DB 00001000b   ;   #
0E5A: 08      	        DB 00001000b   ;   #
0E5B: 08      	        DB 00001000b   ;   #
0E5C: 0C      	        DB 00001100b   ;   ##
0E5D: 00      	        DB 00000000b   ; 
              	        ;109 m
0E5E: 00      	        DB 00000000b   ; 
0E5F: 14      	        DB 00010100b   ;  # #
0E60: 2A      	        DB 00101010b   ; # # #
0E61: 2A      	        DB 00101010b   ; # # #
0E62: 2A      	        DB 00101010b   ; # # #
0E63: 00      	        DB 00000000b   ; 
              	        ;110 n
0E64: 00      	        DB 00000000b   ; 
0E65: 1C      	        DB 00011100b   ;  ###
0E66: 22      	        DB 00100010b   ; #   #
0E67: 22      	        DB 00100010b   ; #   #
0E68: 22      	        DB 00100010b   ; #   #
0E69: 00      	        DB 00000000b   ; 
              	        ;111 o
0E6A: 00      	        DB 00000000b   ; 
0E6B: 1C      	        DB 00011100b   ;  ###
0E6C: 22      	        DB 00100010b   ; #   #
0E6D: 22      	        DB 00100010b   ; #   #
0E6E: 1C      	        DB 00011100b   ;  ###
0E6F: 00      	        DB 00000000b   ; 
              	        ;112 p
0E70: 1C      	        DB 00011100b   ;  ###
0E71: 22      	        DB 00100010b   ; #   #
0E72: 22      	        DB 00100010b   ; #   #
0E73: 3C      	        DB 00111100b   ; ####
0E74: 20      	        DB 00100000b   ; #
0E75: 00      	        DB 00000000b   ; 
              	        ;113 q
0E76: 1C      	        DB 00011100b   ;  ###
0E77: 22      	        DB 00100010b   ; #   #
0E78: 22      	        DB 00100010b   ; #   #
0E79: 1E      	        DB 00011110b   ;  ####
0E7A: 02      	        DB 00000010b   ;     #
0E7B: 00      	        DB 00000000b   ; 
              	        ;114 r
0E7C: 00      	        DB 00000000b   ; 
0E7D: 2C      	        DB 00101100b   ; # ##
0E7E: 30      	        DB 00110000b   ; ##
0E7F: 20      	        DB 00100000b   ; #
0E80: 20      	        DB 00100000b   ; #
0E81: 00      	        DB 00000000b   ; 
              	        ;115 s
0E82: 1C      	        DB 00011100b   ;  ###
0E83: 20      	        DB 00100000b   ; #
0E84: 1C      	        DB 00011100b   ;  ###
0E85: 02      	        DB 00000010b   ;     #
0E86: 3C      	        DB 00111100b   ; ####
0E87: 00      	        DB 00000000b   ; 
              	        ;116 t
0E88: 08      	        DB 00001000b   ;   #
0E89: 1C      	        DB 00011100b   ;  ###
0E8A: 08      	        DB 00001000b   ;   #
0E8B: 08      	        DB 00001000b   ;   #
0E8C: 04      	        DB 00000100b   ;    #
0E8D: 00      	        DB 00000000b   ; 
              	        ;117 u
0E8E: 00      	        DB 00000000b   ; 
0E8F: 22      	        DB 00100010b   ; #   # 
0E90: 22      	        DB 00100010b   ; #   # 
0E91: 22      	        DB 00100010b   ; #   # 
0E92: 1C      	        DB 00011100b   ;  ###
0E93: 00      	        DB 00000000b   ; 
              	        ;118 v
0E94: 00      	        DB 00000000b   ; 
0E95: 22      	        DB 00100010b   ; #   # 
0E96: 22      	        DB 00100010b   ; #   # 
0E97: 14      	        DB 00010100b   ;  # # 
0E98: 08      	        DB 00001000b   ;   #
0E99: 00      	        DB 00000000b   ; 
              	        ;119 w
0E9A: 00      	        DB 00000000b   ; 
0E9B: 22      	        DB 00100010b   ; #   # 
0E9C: 22      	        DB 00100010b   ; #   # 
0E9D: 2A      	        DB 00101010b   ; # # # 
0E9E: 36      	        DB 00110110b   ; ## ##
0E9F: 00      	        DB 00000000b   ; 
              	        ;120 x
0EA0: 00      	        DB 00000000b   ; 
0EA1: 22      	        DB 00100010b   ; #   # 
0EA2: 1C      	        DB 00011100b   ;  ###
0EA3: 1C      	        DB 00011100b   ;  ###
0EA4: 22      	        DB 00100010b   ; #   # 
0EA5: 00      	        DB 00000000b   ; 
              	        ;121 y
0EA6: 22      	        DB 00100010b   ; #   # 
0EA7: 22      	        DB 00100010b   ; #   # 
0EA8: 1E      	        DB 00011110b   ;  ####
0EA9: 02      	        DB 00000010b   ;     #
0EAA: 3C      	        DB 00111100b   ; ####
0EAB: 00      	        DB 00000000b   ; 
              	        ;122 z
0EAC: 00      	        DB 00000000b   ; 
0EAD: 3C      	        DB 00111100b   ; #### 
0EAE: 08      	        DB 00001000b   ;   #
0EAF: 10      	        DB 00010000b   ;  #
0EB0: 3C      	        DB 00111100b   ; #### 
0EB1: 00      	        DB 00000000b   ; 
              	        ;123 {
0EB2: 0C      	        DB 00001100b   ;   ##
0EB3: 08      	        DB 00001000b   ;   #
0EB4: 10      	        DB 00010000b   ;  #
0EB5: 08      	        DB 00001000b   ;   #
0EB6: 0C      	        DB 00001100b   ;   ##
0EB7: 00      	        DB 00000000b   ; 
              	        ;124 |
0EB8: 08      	        DB 00001000b   ;   # 
0EB9: 08      	        DB 00001000b   ;   # 
0EBA: 08      	        DB 00001000b   ;   # 
0EBB: 08      	        DB 00001000b   ;   # 
0EBC: 08      	        DB 00001000b   ;   # 
0EBD: 00      	        DB 00000000b   ; 
              	        ;125 }
0EBE: 18      	        DB 00011000b   ;  ##
0EBF: 08      	        DB 00001000b   ;   #
0EC0: 04      	        DB 00000100b   ;    #
0EC1: 08      	        DB 00001000b   ;   #
0EC2: 18      	        DB 00011000b   ;  ##
0EC3: 00      	        DB 00000000b   ; 
              	        ;126 ~
0EC4: 14      	        DB 00010100b   ;  # #
0EC5: 28      	        DB 00101000b   ; # #
0EC6: 00      	        DB 00000000b   ; 
0EC7: 00      	        DB 00000000b   ; 
0EC8: 00      	        DB 00000000b   ; 
0EC9: 00      	        DB 00000000b   ; 
              	        ;127 
0ECA: 2A      	        DB 00101010b   ; # # #
0ECB: 15      	        DB 00010101b   ;  # # #
0ECC: 2A      	        DB 00101010b   ; # # #
0ECD: 15      	        DB 00010101b   ;  # # #
0ECE: 2A      	        DB 00101010b   ; # # #
0ECF: 15      	        DB 00010101b   ;  # # #
              	        ;128
0ED0: 00      	        DB 00000000b   ; 
0ED1: 00      	        DB 00000000b   ; 
0ED2: 00      	        DB 00000000b   ; 
0ED3: 00      	        DB 00000000b   ; 
0ED4: 00      	        DB 00000000b   ; 
0ED5: 00      	        DB 00000000b   ; 
              	        ;129
0ED6: 38      	        DB 00111000b   ; ###
0ED7: 38      	        DB 00111000b   ; ###
0ED8: 38      	        DB 00111000b   ; ###
0ED9: 00      	        DB 00000000b   ; 
0EDA: 00      	        DB 00000000b   ; 
0EDB: 00      	        DB 00000000b   ; 
              	        ;130
0EDC: 07      	        DB 00000111b   ;    ###
0EDD: 07      	        DB 00000111b   ;    ###
0EDE: 07      	        DB 00000111b   ;    ###
0EDF: 00      	        DB 00000000b   ; 
0EE0: 00      	        DB 00000000b   ; 
0EE1: 00      	        DB 00000000b   ; 
              	        ;131
0EE2: 3F      	        DB 00111111b   ; ######
0EE3: 3F      	        DB 00111111b   ; ######
0EE4: 3F      	        DB 00111111b   ; ######
0EE5: 00      	        DB 00000000b   ; 
0EE6: 00      	        DB 00000000b   ; 
0EE7: 00      	        DB 00000000b   ; 
              	        ;132
0EE8: 00      	        DB 00000000b   ; 
0EE9: 00      	        DB 00000000b   ; 
0EEA: 00      	        DB 00000000b   ; 
0EEB: 38      	        DB 00111000b   ; ###
0EEC: 38      	        DB 00111000b   ; ###
0EED: 38      	        DB 00111000b   ; ###
              	        ;133
0EEE: 38      	        DB 00111000b   ; ###
0EEF: 38      	        DB 00111000b   ; ###
0EF0: 38      	        DB 00111000b   ; ###
0EF1: 38      	        DB 00111000b   ; ###
0EF2: 38      	        DB 00111000b   ; ###
0EF3: 38      	        DB 00111000b   ; ###
              	        ;134
0EF4: 07      	        DB 00000111b   ;    ###
0EF5: 07      	        DB 00000111b   ;    ###
0EF6: 07      	        DB 00000111b   ;    ###
0EF7: 38      	        DB 00111000b   ; ###
0EF8: 38      	        DB 00111000b   ; ###
0EF9: 38      	        DB 00111000b   ; ###
              	        ;135
0EFA: 3F      	        DB 00111111b   ; ######
0EFB: 3F      	        DB 00111111b   ; ######
0EFC: 3F      	        DB 00111111b   ; ######
0EFD: 38      	        DB 00111000b   ; ###
0EFE: 38      	        DB 00111000b   ; ###
0EFF: 38      	        DB 00111000b   ; ###
              	        ;136
0F00: 00      	        DB 00000000b   ; 
0F01: 00      	        DB 00000000b   ; 
0F02: 00      	        DB 00000000b   ; 
0F03: 07      	        DB 00000111b   ;    ###
0F04: 07      	        DB 00000111b   ;    ###
0F05: 07      	        DB 00000111b   ;    ###
              	        ;137
0F06: 38      	        DB 00111000b   ; ###
0F07: 38      	        DB 00111000b   ; ###
0F08: 38      	        DB 00111000b   ; ###
0F09: 07      	        DB 00000111b   ;    ###
0F0A: 07      	        DB 00000111b   ;    ###
0F0B: 07      	        DB 00000111b   ;    ###
              	        ;138
0F0C: 07      	        DB 00000111b   ;    ###
0F0D: 07      	        DB 00000111b   ;    ###
0F0E: 07      	        DB 00000111b   ;    ###
0F0F: 07      	        DB 00000111b   ;    ###
0F10: 07      	        DB 00000111b   ;    ###
0F11: 07      	        DB 00000111b   ;    ###
              	        ;139
0F12: 3F      	        DB 00111111b   ; ######
0F13: 3F      	        DB 00111111b   ; ######
0F14: 3F      	        DB 00111111b   ; ######
0F15: 07      	        DB 00000111b   ;    ###
0F16: 07      	        DB 00000111b   ;    ###
0F17: 07      	        DB 00000111b   ;    ###
              	        ;140
0F18: 00      	        DB 00000000b   ; 
0F19: 00      	        DB 00000000b   ; 
0F1A: 00      	        DB 00000000b   ; 
0F1B: 3F      	        DB 00111111b   ; ######
0F1C: 3F      	        DB 00111111b   ; ######
0F1D: 3F      	        DB 00111111b   ; ######
              	        ;141
0F1E: 38      	        DB 00111000b   ; ###
0F1F: 38      	        DB 00111000b   ; ###
0F20: 38      	        DB 00111000b   ; ###
0F21: 3F      	        DB 00111111b   ; ######
0F22: 3F      	        DB 00111111b   ; ######
0F23: 3F      	        DB 00111111b   ; ######
              	        ;142
0F24: 07      	        DB 00000111b   ;    ###
0F25: 07      	        DB 00000111b   ;    ###
0F26: 07      	        DB 00000111b   ;    ###
0F27: 3F      	        DB 00111111b   ; ######
0F28: 3F      	        DB 00111111b   ; ######
0F29: 3F      	        DB 00111111b   ; ######
              	        ;143
0F2A: 3F      	        DB 00111111b   ; ######
0F2B: 3F      	        DB 00111111b   ; ######
0F2C: 3F      	        DB 00111111b   ; ######
0F2D: 3F      	        DB 00111111b   ; ######
0F2E: 3F      	        DB 00111111b   ; ######
0F2F: 3F      	        DB 00111111b   ; ######
              	        ;144
0F30: 00      	        DB 00000000b   ; 
0F31: 00      	        DB 00000000b   ; 
0F32: 0C      	        DB 00001100b   ;   ##
0F33: 0C      	        DB 00001100b   ;   ##
0F34: 00      	        DB 00000000b   ; 
0F35: 00      	        DB 00000000b   ; 
              	        ;145
0F36: 0C      	        DB 00001100b   ;   ##
0F37: 0C      	        DB 00001100b   ;   ##
0F38: 0C      	        DB 00001100b   ;   ##
0F39: 0C      	        DB 00001100b   ;   ##
0F3A: 00      	        DB 00000000b   ; 
0F3B: 00      	        DB 00000000b   ; 
              	        ;146
0F3C: 00      	        DB 00000000b   ; 
0F3D: 00      	        DB 00000000b   ; 
0F3E: 0F      	        DB 00001111b   ;   ####
0F3F: 0F      	        DB 00001111b   ;   ####
0F40: 00      	        DB 00000000b   ; 
0F41: 00      	        DB 00000000b   ; 
              	        ;147
0F42: 0C      	        DB 00001100b   ;   ##
0F43: 0C      	        DB 00001100b   ;   ##
0F44: 0F      	        DB 00001111b   ;   ####
0F45: 07      	        DB 00000111b   ;    ###
0F46: 00      	        DB 00000000b   ; 
0F47: 00      	        DB 00000000b   ; 
              	        ;148
0F48: 00      	        DB 00000000b   ; 
0F49: 00      	        DB 00000000b   ; 
0F4A: 0C      	        DB 00001100b   ;   ##
0F4B: 0C      	        DB 00001100b   ;   ##
0F4C: 0C      	        DB 00001100b   ;   ##
0F4D: 0C      	        DB 00001100b   ;   ##
              	        ;149
0F4E: 0C      	        DB 00001100b   ;   ##
0F4F: 0C      	        DB 00001100b   ;   ##
0F50: 0C      	        DB 00001100b   ;   ##
0F51: 0C      	        DB 00001100b   ;   ##
0F52: 0C      	        DB 00001100b   ;   ##
0F53: 0C      	        DB 00001100b   ;   ##
              	        ;150
0F54: 00      	        DB 00000000b   ; 
0F55: 00      	        DB 00000000b   ; 
0F56: 07      	        DB 00000111b   ;    ###
0F57: 0F      	        DB 00001111b   ;   ####
0F58: 0C      	        DB 00001100b   ;   ##
0F59: 0C      	        DB 00001100b   ;   ##
              	        ;151
0F5A: 0C      	        DB 00001100b   ;   ##
0F5B: 0C      	        DB 00001100b   ;   ##
0F5C: 0F      	        DB 00001111b   ;   ####
0F5D: 0F      	        DB 00001111b   ;   ####
0F5E: 0C      	        DB 00001100b   ;   ##
0F5F: 0C      	        DB 00001100b   ;   ##
              	        ;152
0F60: 00      	        DB 00000000b   ; 
0F61: 00      	        DB 00000000b   ; 
0F62: 3C      	        DB 00111100b   ; ####
0F63: 3C      	        DB 00111100b   ; ####
0F64: 00      	        DB 00000000b   ; 
0F65: 00      	        DB 00000000b   ; 
              	        ;153
0F66: 0C      	        DB 00001100b   ;   ##
0F67: 0C      	        DB 00001100b   ;   ##
0F68: 3C      	        DB 00111100b   ; ####
0F69: 38      	        DB 00111000b   ; ###
0F6A: 00      	        DB 00000000b   ; 
0F6B: 00      	        DB 00000000b   ; 
              	        ;154
0F6C: 00      	        DB 00000000b   ; 
0F6D: 00      	        DB 00000000b   ; 
0F6E: 3F      	        DB 00111111b   ; ######
0F6F: 3F      	        DB 00111111b   ; ######
0F70: 00      	        DB 00000000b   ; 
0F71: 00      	        DB 00000000b   ; 
              	        ;155
0F72: 0C      	        DB 00001100b   ;   ##
0F73: 0C      	        DB 00001100b   ;   ##
0F74: 3F      	        DB 00111111b   ; ######
0F75: 3F      	        DB 00111111b   ; ######
0F76: 00      	        DB 00000000b   ; 
0F77: 00      	        DB 00000000b   ; 
              	        ;156
0F78: 00      	        DB 00000000b   ; 
0F79: 00      	        DB 00000000b   ; 
0F7A: 38      	        DB 00111000b   ; ###
0F7B: 3C      	        DB 00111100b   ; ####
0F7C: 0C      	        DB 00001100b   ;   ##
0F7D: 0C      	        DB 00001100b   ;   ##
              	        ;157
0F7E: 0C      	        DB 00001100b   ;   ##
0F7F: 0C      	        DB 00001100b   ;   ##
0F80: 3C      	        DB 00111100b   ; ####
0F81: 3C      	        DB 00111100b   ; ####
0F82: 0C      	        DB 00001100b   ;   ##
0F83: 0C      	        DB 00001100b   ;   ##
              	        ;158
0F84: 00      	        DB 00000000b   ; 
0F85: 00      	        DB 00000000b   ; 
0F86: 3F      	        DB 00111111b   ; ######
0F87: 3F      	        DB 00111111b   ; ######
0F88: 0C      	        DB 00001100b   ;   ##
0F89: 0C      	        DB 00001100b   ;   ##
              	        ;159
0F8A: 0C      	        DB 00001100b   ;   ##
0F8B: 0C      	        DB 00001100b   ;   ##
0F8C: 3F      	        DB 00111111b   ; ######
0F8D: 3F      	        DB 00111111b   ; ######
0F8E: 0C      	        DB 00001100b   ;   ##
0F8F: 0C      	        DB 00001100b   ;   ##
              	        ;160
0F90: 00      	        DB 00000000b   ; 
0F91: 12      	        DB 00010010b   ;  #  #
0F92: 00      	        DB 00000000b   ; 
0F93: 00      	        DB 00000000b   ; 
0F94: 12      	        DB 00010010b   ;  #  #
0F95: 00      	        DB 00000000b   ; 
              	        ;161
0F96: 12      	        DB 00010010b   ;  #  #
0F97: 12      	        DB 00010010b   ;  #  #
0F98: 12      	        DB 00010010b   ;  #  #
0F99: 12      	        DB 00010010b   ;  #  #
0F9A: 00      	        DB 00000000b   ; 
0F9B: 00      	        DB 00000000b   ; 
              	        ;162
0F9C: 00      	        DB 00000000b   ; 
0F9D: 0F      	        DB 00001111b   ;   ####
0F9E: 00      	        DB 00000000b   ; 
0F9F: 00      	        DB 00000000b   ; 
0FA0: 0F      	        DB 00001111b   ;   ####
0FA1: 00      	        DB 00000000b   ; 
              	        ;163
0FA2: 12      	        DB 00010010b   ;  #  #
0FA3: 13      	        DB 00010011b   ;  #  ##
0FA4: 10      	        DB 00010000b   ;  #
0FA5: 10      	        DB 00010000b   ;  #
0FA6: 0F      	        DB 00001111b   ;   ####
0FA7: 00      	        DB 00000000b   ; 
              	        ;164
0FA8: 00      	        DB 00000000b   ; 
0FA9: 00      	        DB 00000000b   ; 
0FAA: 12      	        DB 00010010b   ;  #  #
0FAB: 12      	        DB 00010010b   ;  #  #
0FAC: 12      	        DB 00010010b   ;  #  #
0FAD: 12      	        DB 00010010b   ;  #  #
              	        ;165
0FAE: 12      	        DB 00010010b   ;  #  #
0FAF: 12      	        DB 00010010b   ;  #  #
0FB0: 12      	        DB 00010010b   ;  #  #
0FB1: 12      	        DB 00010010b   ;  #  #
0FB2: 12      	        DB 00010010b   ;  #  #
0FB3: 12      	        DB 00010010b   ;  #  #
              	        ;166
0FB4: 00      	        DB 00000000b   ; 
0FB5: 0F      	        DB 00001111b   ;   ####
0FB6: 10      	        DB 00010000b   ;  #
0FB7: 10      	        DB 00010000b   ;  #
0FB8: 13      	        DB 00010011b   ;  #  ##
0FB9: 12      	        DB 00010010b   ;  #  #
              	        ;167
0FBA: 12      	        DB 00010010b   ;  #  #
0FBB: 13      	        DB 00010011b   ;  #  ##
0FBC: 10      	        DB 00010000b   ;  #
0FBD: 10      	        DB 00010000b   ;  #
0FBE: 13      	        DB 00010011b   ;  #  ##
0FBF: 12      	        DB 00010010b   ;  #  #
              	        ;168
0FC0: 00      	        DB 00000000b   ; 
0FC1: 3C      	        DB 00111100b   ; ####
0FC2: 00      	        DB 00000000b   ; 
0FC3: 00      	        DB 00000000b   ; 
0FC4: 3C      	        DB 00111100b   ; ####
0FC5: 00      	        DB 00000000b   ; 
              	        ;169
0FC6: 12      	        DB 00010010b   ;  #  #
0FC7: 32      	        DB 00110010b   ; ##  #
0FC8: 02      	        DB 00000010b   ;     #
0FC9: 02      	        DB 00000010b   ;     #
0FCA: 3C      	        DB 00111100b   ; ####
0FCB: 00      	        DB 00000000b   ; 
              	        ;170
0FCC: 00      	        DB 00000000b   ; 
0FCD: 3F      	        DB 00111111b   ; ######
0FCE: 00      	        DB 00000000b   ; 
0FCF: 00      	        DB 00000000b   ; 
0FD0: 3F      	        DB 00111111b   ; ######
0FD1: 00      	        DB 00000000b   ; 
              	        ;171
0FD2: 12      	        DB 00010010b   ;  #  #
0FD3: 33      	        DB 00110011b   ; ##  ##
0FD4: 00      	        DB 00000000b   ; 
0FD5: 00      	        DB 00000000b   ; 
0FD6: 3F      	        DB 00111111b   ; ######
0FD7: 00      	        DB 00000000b   ; 
              	        ;172
0FD8: 00      	        DB 00000000b   ; 
0FD9: 3C      	        DB 00111100b   ; ####
0FDA: 02      	        DB 00000010b   ;     #
0FDB: 02      	        DB 00000010b   ;     #
0FDC: 32      	        DB 00110010b   ; ##  #
0FDD: 12      	        DB 00010010b   ;  #  #
              	        ;173
0FDE: 12      	        DB 00010010b   ;  #  #
0FDF: 32      	        DB 00110010b   ; ##  #
0FE0: 02      	        DB 00000010b   ;     #
0FE1: 02      	        DB 00000010b   ;     #
0FE2: 32      	        DB 00110010b   ; ##  #
0FE3: 12      	        DB 00010010b   ;  #  #
              	        ;174
0FE4: 00      	        DB 00000000b   ; 
0FE5: 3F      	        DB 00111111b   ; ######
0FE6: 00      	        DB 00000000b   ; 
0FE7: 00      	        DB 00000000b   ; 
0FE8: 33      	        DB 00110011b   ; ##  ##
0FE9: 12      	        DB 00010010b   ;  #  #
              	        ;175
0FEA: 12      	        DB 00010010b   ;  #  #
0FEB: 33      	        DB 00110011b   ; ##  ##
0FEC: 00      	        DB 00000000b   ; 
0FED: 00      	        DB 00000000b   ; 
0FEE: 33      	        DB 00110011b   ; ##  ##
0FEF: 12      	        DB 00010010b   ;  #  #
              	        ;176
0FF0: 0C      	        DB 00001100b   ;   ##
0FF1: 18      	        DB 00011000b   ;  ##
0FF2: 30      	        DB 00110000b   ; ##
0FF3: 20      	        DB 00100000b   ; #
0FF4: 00      	        DB 00000000b   ; 
0FF5: 00      	        DB 00000000b   ; 
              	        ;177
0FF6: 0C      	        DB 00001100b   ;   ##
0FF7: 06      	        DB 00000110b   ;    ##
0FF8: 03      	        DB 00000011b   ;     ##
0FF9: 01      	        DB 00000001b   ;      #
0FFA: 00      	        DB 00000000b   ; 
0FFB: 00      	        DB 00000000b   ; 
              	        ;178
0FFC: 00      	        DB 00000000b   ; 
0FFD: 00      	        DB 00000000b   ; 
0FFE: 01      	        DB 00000001b   ;      #
0FFF: 03      	        DB 00000011b   ;     ##
1000: 06      	        DB 00000110b   ;    ##
1001: 0C      	        DB 00001100b   ;   ##
              	        ;179
1002: 00      	        DB 00000000b   ; 
1003: 00      	        DB 00000000b   ; 
1004: 20      	        DB 00100000b   ; #
1005: 30      	        DB 00110000b   ; ##
1006: 18      	        DB 00011000b   ;  ##
1007: 0C      	        DB 00001100b   ;   ##
              	        ;180
1008: 0C      	        DB 00001100b   ;   ##
1009: 1E      	        DB 00011110b   ;  ####
100A: 33      	        DB 00110011b   ; ##  ##
100B: 21      	        DB 00100001b   ; #    # 
100C: 00      	        DB 00000000b   ; 
100D: 00      	        DB 00000000b   ; 
              	        ;181
100E: 0C      	        DB 00001100b   ;   ##
100F: 06      	        DB 00000110b   ;    ##
1010: 03      	        DB 00000011b   ;     ##
1011: 03      	        DB 00000011b   ;     ##
1012: 06      	        DB 00000110b   ;    ##
1013: 0C      	        DB 00001100b   ;   ##
              	        ;182
1014: 00      	        DB 00000000b   ; 
1015: 00      	        DB 00000000b   ; 
1016: 21      	        DB 00100001b   ; #    # 
1017: 33      	        DB 00110011b   ; ##  ##
1018: 1E      	        DB 00011110b   ;  ####
1019: 0C      	        DB 00001100b   ;   ##
              	        ;183
101A: 0C      	        DB 00001100b   ;   ##
101B: 18      	        DB 00011000b   ;  ##
101C: 30      	        DB 00110000b   ; ##
101D: 30      	        DB 00110000b   ; ##
101E: 18      	        DB 00011000b   ;  ##
101F: 0C      	        DB 00001100b   ;   ##
              	        ;184
1020: 0C      	        DB 00001100b   ;   ##
1021: 18      	        DB 00011000b   ;  ##
1022: 31      	        DB 00110001b   ; ##   #
1023: 23      	        DB 00100011b   ; #   ##
1024: 06      	        DB 00000110b   ;    ##
1025: 0C      	        DB 00001100b   ;   ##
              	        ;185
1026: 0C      	        DB 00001100b   ;   ##
1027: 06      	        DB 00000110b   ;    ##
1028: 23      	        DB 00100011b   ; #   ##
1029: 31      	        DB 00110001b   ; ##   #
102A: 18      	        DB 00011000b   ;  ##
102B: 0C      	        DB 00001100b   ;   ##
              	        ;186
102C: 0C      	        DB 00001100b   ;   ##
102D: 1E      	        DB 00011110b   ;  ####
102E: 33      	        DB 00110011b   ; ##  ##
102F: 33      	        DB 00110011b   ; ##  ##
1030: 1E      	        DB 00011110b   ;  ####
1031: 0C      	        DB 00001100b   ;   ##
              	        ;187
1032: 33      	        DB 00110011b   ; ##  ##
1033: 33      	        DB 00110011b   ; ##  ##
1034: 0C      	        DB 00001100b   ;   ##
1035: 0C      	        DB 00001100b   ;   ##
1036: 33      	        DB 00110011b   ; ##  ##
1037: 33      	        DB 00110011b   ; ##  ##
              	        ;188
1038: 03      	        DB 00000011b   ;     ##
1039: 03      	        DB 00000011b   ;     ##
103A: 0C      	        DB 00001100b   ;   ##
103B: 0C      	        DB 00001100b   ;   ##
103C: 30      	        DB 00110000b   ; ##
103D: 30      	        DB 00110000b   ; ##
              	        ;189
103E: 30      	        DB 00110000b   ; ##
103F: 30      	        DB 00110000b   ; ##
1040: 0C      	        DB 00001100b   ;   ##
1041: 0C      	        DB 00001100b   ;   ##
1042: 03      	        DB 00000011b   ;     ##
1043: 03      	        DB 00000011b   ;     ##
              	        ;190
1044: 2A      	        DB 00101010b   ; # # #
1045: 14      	        DB 00010100b   ;  # #
1046: 2A      	        DB 00101010b   ; # # #
1047: 14      	        DB 00010100b   ;  # #
1048: 2A      	        DB 00101010b   ; # # #
1049: 00      	        DB 00000000b   ; 
              	        ;191
104A: 14      	        DB 00010100b   ;  # #
104B: 2A      	        DB 00101010b   ; # # #
104C: 14      	        DB 00010100b   ;  # #
104D: 2A      	        DB 00101010b   ; # # #
104E: 14      	        DB 00010100b   ;  # #
104F: 00      	        DB 00000000b   ; 
              	        ;192
1050: 00      	        DB 00000000b   ; 
1051: 1A      	        DB 00011010b   ;  ## #
1052: 24      	        DB 00100100b   ; #  #
1053: 24      	        DB 00100100b   ; #  #
1054: 1A      	        DB 00011010b   ;  ## #
1055: 00      	        DB 00000000b   ; 
              	        ;193
1056: 18      	        DB 00011000b   ;  ##
1057: 24      	        DB 00100100b   ; #  #
1058: 2C      	        DB 00101100b   ; # ##
1059: 22      	        DB 00100010b   ; #   #
105A: 2C      	        DB 00101100b   ; # ##
105B: 00      	        DB 00000000b   ; 
              	        ;194
105C: 00      	        DB 00000000b   ; 
105D: 22      	        DB 00100010b   ; #   #
105E: 1C      	        DB 00011100b   ;  ###
105F: 22      	        DB 00100010b   ; #   #
1060: 1C      	        DB 00011100b   ;  ###
1061: 00      	        DB 00000000b   ; 
              	        ;195
1062: 1C      	        DB 00011100b   ;  ###
1063: 30      	        DB 00110000b   ; ##
1064: 1C      	        DB 00011100b   ;  ###
1065: 22      	        DB 00100010b   ; #   #
1066: 1C      	        DB 00011100b   ;  ### 
1067: 00      	        DB 00000000b   ; 
              	        ;196
1068: 0E      	        DB 00001110b   ;   ### 
1069: 30      	        DB 00110000b   ; ##
106A: 3C      	        DB 00111100b   ; ####
106B: 30      	        DB 00110000b   ; ##
106C: 0E      	        DB 00001110b   ;   ###
106D: 00      	        DB 00000000b   ; 
              	        ;197
106E: 1C      	        DB 00011100b   ;  ###
106F: 22      	        DB 00100010b   ; #   #
1070: 3E      	        DB 00111110b   ; #####
1071: 22      	        DB 00100010b   ; #   #
1072: 1C      	        DB 00011100b   ;  ###
1073: 00      	        DB 00000000b   ; 
              	        ;198
1074: 20      	        DB 00100000b   ; #
1075: 10      	        DB 00010000b   ;  #
1076: 08      	        DB 00001000b   ;   #
1077: 14      	        DB 00010100b   ;  # #
1078: 22      	        DB 00100010b   ; #   # 
1079: 00      	        DB 00000000b   ; 
              	        ;199
107A: 24      	        DB 00100100b   ; #  #
107B: 24      	        DB 00100100b   ; #  #
107C: 38      	        DB 00111000b   ; ###
107D: 20      	        DB 00100000b   ; #
107E: 20      	        DB 00100000b   ; # 
107F: 00      	        DB 00000000b   ; 
              	        ;200
1080: 00      	        DB 00000000b   ; 
1081: 3E      	        DB 00111110b   ; #####
1082: 14      	        DB 00010100b   ;  # #
1083: 14      	        DB 00010100b   ;  # #
1084: 24      	        DB 00100100b   ; #  #
1085: 00      	        DB 00000000b   ; 
              	        ;201
1086: 00      	        DB 00000000b   ; 
1087: 1E      	        DB 00011110b   ;  ####
1088: 34      	        DB 00110100b   ; ## #
1089: 34      	        DB 00110100b   ; ## #
108A: 18      	        DB 00011000b   ;  ##
108B: 00      	        DB 00000000b   ; 
              	        ;202
108C: 06      	        DB 00000110b   ;    ##
108D: 1C      	        DB 00011100b   ;  ###
108E: 36      	        DB 00110110b   ; ## ##
108F: 1C      	        DB 00011100b   ;  ###
1090: 30      	        DB 00110000b   ; ##
1091: 00      	        DB 00000000b   ; 
              	        ;203
1092: 06      	        DB 00000110b   ;    ##
1093: 04      	        DB 00000100b   ;    #
1094: 36      	        DB 00110110b   ; ## ##
1095: 1C      	        DB 00011100b   ;  ###
1096: 30      	        DB 00110000b   ; ##
1097: 00      	        DB 00000000b   ; 
              	        ;204
1098: 32      	        DB 00110010b   ; ##  #
1099: 1C      	        DB 00011100b   ;  ###
109A: 0C      	        DB 00001100b   ;   ##
109B: 16      	        DB 00010110b   ;  # ##
109C: 22      	        DB 00100010b   ; #   #
109D: 00      	        DB 00000000b   ; 
              	        ;205
109E: 00      	        DB 00000000b   ; 
109F: 14      	        DB 00010100b   ;  # #
10A0: 22      	        DB 00100010b   ; #   #
10A1: 2A      	        DB 00101010b   ; # # #
10A2: 1C      	        DB 00011100b   ;  ###
10A3: 00      	        DB 00000000b   ; 
              	        ;206
10A4: 3E      	        DB 00111110b   ; #####
10A5: 12      	        DB 00010010b   ;  #  #
10A6: 08      	        DB 00001000b   ;   #
10A7: 12      	        DB 00010010b   ;  #  #
10A8: 3E      	        DB 00111110b   ; #####
10A9: 00      	        DB 00000000b   ; 
              	        ;207
10AA: 1C      	        DB 00011100b   ;  ###
10AB: 22      	        DB 00100010b   ; #   #
10AC: 22      	        DB 00100010b   ; #   #
10AD: 14      	        DB 00010100b   ;  # #
10AE: 36      	        DB 00110110b   ; ## ##
10AF: 00      	        DB 00000000b   ; 
              	        ;208
10B0: 1C      	        DB 00011100b   ;  ###
10B1: 1C      	        DB 00011100b   ;  ###
10B2: 0A      	        DB 00001010b   ;   # #
10B3: 1C      	        DB 00011100b   ;  ###
10B4: 28      	        DB 00101000b   ; # #
10B5: 08      	        DB 00001000b   ;   #
              	        ;209
10B6: 1C      	        DB 00011100b   ;  ###
10B7: 1C      	        DB 00011100b   ;  ###
10B8: 28      	        DB 00101000b   ; # #
10B9: 1C      	        DB 00011100b   ;  ###
10BA: 0A      	        DB 00001010b   ;   # #
10BB: 08      	        DB 00001000b   ;   #
              	        ;210
10BC: 1C      	        DB 00011100b   ;  ###
10BD: 1C      	        DB 00011100b   ;  ###
10BE: 2A      	        DB 00101010b   ; # # #
10BF: 1C      	        DB 00011100b   ;  ###
10C0: 08      	        DB 00001000b   ;   # 
10C1: 08      	        DB 00001000b   ;   #
              	        ;211
10C2: 1C      	        DB 00011100b   ;  ###
10C3: 1C      	        DB 00011100b   ;  ###
10C4: 08      	        DB 00001000b   ;   # 
10C5: 1C      	        DB 00011100b   ;  ###
10C6: 2A      	        DB 00101010b   ; # # #
10C7: 08      	        DB 00001000b   ;   #
              	        ;212
10C8: 14      	        DB 00010100b   ;  # # 
10C9: 00      	        DB 00000000b   ; 
10CA: 14      	        DB 00010100b   ;  # # 
10CB: 14      	        DB 00010100b   ;  # # 
10CC: 1C      	        DB 00011100b   ;  ###
10CD: 00      	        DB 00000000b   ; 
              	        ;213
10CE: 14      	        DB 00010100b   ;  # # 
10CF: 00      	        DB 00000000b   ; 
10D0: 1C      	        DB 00011100b   ;  ###
10D1: 14      	        DB 00010100b   ;  # # 
10D2: 1C      	        DB 00011100b   ;  ###
10D3: 00      	        DB 00000000b   ; 
              	        ;214
10D4: 14      	        DB 00010100b   ;  # # 
10D5: 00      	        DB 00000000b   ; 
10D6: 1C      	        DB 00011100b   ;  ###
10D7: 14      	        DB 00010100b   ;  # # 
10D8: 1E      	        DB 00011110b   ;  ####
10D9: 00      	        DB 00000000b   ; 
              	        ;215
10DA: 14      	        DB 00010100b   ;  # # 
10DB: 00      	        DB 00000000b   ; 
10DC: 1C      	        DB 00011100b   ;  ###
10DD: 14      	        DB 00010100b   ;  # # 
10DE: 14      	        DB 00010100b   ;  # # 
10DF: 00      	        DB 00000000b   ; 
              	        ;216
10E0: 28      	        DB 00101000b   ; # #
10E1: 2C      	        DB 00101100b   ; # ## 
10E2: 3E      	        DB 00111110b   ; ##### 
10E3: 0C      	        DB 00001100b   ;   ## 
10E4: 08      	        DB 00001000b   ;   #
10E5: 00      	        DB 00000000b   ; 
              	        ;217
10E6: 0A      	        DB 00001010b   ;   # #
10E7: 1A      	        DB 00011010b   ;  ## #
10E8: 3E      	        DB 00111110b   ; #####
10E9: 18      	        DB 00011000b   ;  ## 
10EA: 08      	        DB 00001000b   ;   #
10EB: 00      	        DB 00000000b   ; 
              	        ;218
10EC: 08      	        DB 00001000b   ;   #
10ED: 1C      	        DB 00011100b   ;  ###
10EE: 08      	        DB 00001000b   ;   #
10EF: 00      	        DB 00000000b   ;  
10F0: 1C      	        DB 00011100b   ;  ###
10F1: 00      	        DB 00000000b   ;
              	        ;219
10F2: 08      	        DB 00001000b   ;   #
10F3: 00      	        DB 00000000b   ; 
10F4: 3E      	        DB 00111110b   ; #####
10F5: 00      	        DB 00000000b   ;
10F6: 08      	        DB 00001000b   ;   #
10F7: 00      	        DB 00000000b   ;
              	        ;220
10F8: 04      	        DB 00000100b   ;    #
10F9: 08      	        DB 00001000b   ;   # 
10FA: 10      	        DB 00010000b   ;  #
10FB: 08      	        DB 00001000b   ;   # 
10FC: 1C      	        DB 00011100b   ;  ###
10FD: 00      	        DB 00000000b   ; 
              	        ;221
10FE: 10      	        DB 00010000b   ;  #
10FF: 08      	        DB 00001000b   ;   # 
1100: 04      	        DB 00000100b   ;    #
1101: 08      	        DB 00001000b   ;   # 
1102: 1C      	        DB 00011100b   ;  ###
1103: 00      	        DB 00000000b   ; 
              	        ;222
1104: 1C      	        DB 00011100b   ;  ###
1105: 00      	        DB 00000000b   ; 
1106: 1C      	        DB 00011100b   ;  ###
1107: 00      	        DB 00000000b   ; 
1108: 1C      	        DB 00011100b   ;  ###
1109: 00      	        DB 00000000b   ; 
              	        ;223
110A: 06      	        DB 00000110b   ;    ## 
110B: 04      	        DB 00000100b   ;    # 
110C: 34      	        DB 00110100b   ; ## #
110D: 14      	        DB 00010100b   ;  # # 
110E: 08      	        DB 00001000b   ;   # 
110F: 00      	        DB 00000000b   ; 
              	        ;224
1110: 1E      	        DB 00011110b   ;  #### 
1111: 0E      	        DB 00001110b   ;   ### 
1112: 0E      	        DB 00001110b   ;   ### 
1113: 12      	        DB 00010010b   ;  #  #
1114: 20      	        DB 00100000b   ; # 
1115: 00      	        DB 00000000b   ; 
              	        ;225
1116: 20      	        DB 00100000b   ; #
1117: 12      	        DB 00010010b   ;  #  #
1118: 0E      	        DB 00001110b   ;   ###
1119: 0E      	        DB 00001110b   ;   ###
111A: 1E      	        DB 00011110b   ;  ####
111B: 00      	        DB 00000000b   ; 
              	        ;226
111C: 02      	        DB 00000010b   ;      #
111D: 24      	        DB 00100100b   ;  #  #
111E: 38      	        DB 00111000b   ;  ###
111F: 38      	        DB 00111000b   ;  ###
1120: 3C      	        DB 00111100b   ;  #### 
1121: 00      	        DB 00000000b   ; 
              	        ;227
1122: 3C      	        DB 00111100b   ; ####
1123: 38      	        DB 00111000b   ; ###
1124: 38      	        DB 00111000b   ; ###
1125: 24      	        DB 00100100b   ; #  # 
1126: 02      	        DB 00000010b   ;     #
1127: 00      	        DB 00000000b   ; 
              	        ;228
1128: 3E      	        DB 00111110b   ; #####
1129: 22      	        DB 00100010b   ; #   #
112A: 22      	        DB 00100010b   ; #   #
112B: 22      	        DB 00100010b   ; #   #
112C: 3E      	        DB 00111110b   ; #####
112D: 00      	        DB 00000000b   ; 
              	        ;229
112E: 3E      	        DB 00111110b   ; #####
112F: 26      	        DB 00100110b   ; #  ##
1130: 2A      	        DB 00101010b   ; # # #
1131: 32      	        DB 00110010b   ; ##  #
1132: 3E      	        DB 00111110b   ; #####
1133: 00      	        DB 00000000b   ; 
              	        ;230
1134: 08      	        DB 00001000b   ;   # 
1135: 12      	        DB 00010010b   ;  #  #
1136: 24      	        DB 00100100b   ; #  #
1137: 12      	        DB 00010010b   ;  #  #
1138: 08      	        DB 00001000b   ;   # 
1139: 00      	        DB 00000000b   ; 
              	        ;231
113A: 08      	        DB 00001000b   ;   # 
113B: 24      	        DB 00100100b   ; #  #
113C: 12      	        DB 00010010b   ;  #  #
113D: 24      	        DB 00100100b   ; #  #
113E: 08      	        DB 00001000b   ;   # 
113F: 00      	        DB 00000000b   ; 
              	        ;232 TEC-1G
1140: 1D      	        DB 00011101b   ;  ### #
1141: 08      	        DB 00001000b   ;   #
1142: 09      	        DB 00001001b   ;   #  #
1143: 08      	        DB 00001000b   ;   #
1144: 09      	        DB 00001001b   ;   #  #
1145: 00      	        DB 00000000b   ; 
              	        ;233 TEC-1G
1146: 37      	        DB 00110111b   ; ## ###
1147: 04      	        DB 00000100b   ;    #
1148: 34      	        DB 00110100b   ; ## #
1149: 04      	        DB 00000100b   ;    #
114A: 37      	        DB 00110111b   ; ## ###
114B: 00      	        DB 00000000b   ; 
              	        ;234 TEC-1G
114C: 00      	        DB 00000000b   ; 
114D: 01      	        DB 00000001b   ;      #
114E: 1C      	        DB 00011100b   ;  ###
114F: 00      	        DB 00000000b   ; 
1150: 00      	        DB 00000000b   ; 
1151: 00      	        DB 00000000b   ; 
              	        ;235 TEC-1G
1152: 2E      	        DB 00101110b   ; # ###
1153: 28      	        DB 00101000b   ; # #
1154: 2A      	        DB 00101010b   ; # # #
1155: 2A      	        DB 00101010b   ; # # #
1156: 2E      	        DB 00101110b   ; # ###
1157: 00      	        DB 00000000b   ; 
              	        ;236 Z80
1158: 1D      	        DB 00011101b   ;  ### #
1159: 05      	        DB 00000101b   ;    # #
115A: 09      	        DB 00001001b   ;   #  #
115B: 11      	        DB 00010001b   ;  #   #
115C: 1D      	        DB 00011101b   ;  ### #
115D: 00      	        DB 00000000b   ; 
              	        ;237 Z80
115E: 37      	        DB 00110111b   ; ## ###
115F: 15      	        DB 00010101b   ;  # # #
1160: 35      	        DB 00110101b   ; ## # #
1161: 15      	        DB 00010101b   ;  # # #
1162: 37      	        DB 00110111b   ; ## ###
1163: 00      	        DB 00000000b   ; 
              	        ;238 CPU
1164: 1D      	        DB 00011101b   ;  ### #
1165: 11      	        DB 00010001b   ;  #   #
1166: 11      	        DB 00010001b   ;  #   #
1167: 11      	        DB 00010001b   ;  #   #
1168: 1D      	        DB 00011101b   ;  ### #
1169: 00      	        DB 00000000b   ; 
              	        ;239 CPU
116A: 35      	        DB 00110101b   ; ## # #
116B: 15      	        DB 00010101b   ;  # # #
116C: 35      	        DB 00110101b   ; ## # #
116D: 05      	        DB 00000101b   ;    # #
116E: 07      	        DB 00000111b   ;    ###
116F: 00      	        DB 00000000b   ; 
              	        ;240
1170: 00      	        DB 00000000b   ; 
1171: 00      	        DB 00000000b   ; 
1172: 00      	        DB 00000000b   ; 
1173: 00      	        DB 00000000b   ; 
1174: 00      	        DB 00000000b   ; 
1175: 00      	        DB 00000000b   ; 
              	        ;241
1176: 00      	        DB 00000000b   ; 
1177: 00      	        DB 00000000b   ; 
1178: 00      	        DB 00000000b   ; 
1179: 00      	        DB 00000000b   ; 
117A: 00      	        DB 00000000b   ; 
117B: 00      	        DB 00000000b   ; 
              	        ;242
117C: 00      	        DB 00000000b   ; 
117D: 00      	        DB 00000000b   ; 
117E: 00      	        DB 00000000b   ; 
117F: 00      	        DB 00000000b   ; 
1180: 00      	        DB 00000000b   ; 
1181: 00      	        DB 00000000b   ; 
              	        ;243
1182: 00      	        DB 00000000b   ; 
1183: 00      	        DB 00000000b   ; 
1184: 00      	        DB 00000000b   ; 
1185: 00      	        DB 00000000b   ; 
1186: 00      	        DB 00000000b   ; 
1187: 00      	        DB 00000000b   ; 
              	        ;244
1188: 00      	        DB 00000000b   ; 
1189: 00      	        DB 00000000b   ; 
118A: 00      	        DB 00000000b   ; 
118B: 00      	        DB 00000000b   ; 
118C: 00      	        DB 00000000b   ; 
118D: 00      	        DB 00000000b   ; 
              	        ;245
118E: 00      	        DB 00000000b   ; 
118F: 00      	        DB 00000000b   ; 
1190: 00      	        DB 00000000b   ; 
1191: 00      	        DB 00000000b   ; 
1192: 00      	        DB 00000000b   ; 
1193: 00      	        DB 00000000b   ; 
              	        ;246
1194: 00      	        DB 00000000b   ; 
1195: 00      	        DB 00000000b   ; 
1196: 00      	        DB 00000000b   ; 
1197: 00      	        DB 00000000b   ; 
1198: 00      	        DB 00000000b   ; 
1199: 00      	        DB 00000000b   ; 
              	        ;247
119A: 00      	        DB 00000000b   ; 
119B: 00      	        DB 00000000b   ; 
119C: 00      	        DB 00000000b   ; 
119D: 00      	        DB 00000000b   ; 
119E: 00      	        DB 00000000b   ; 
119F: 00      	        DB 00000000b   ; 
              	        ;248
11A0: 00      	        DB 00000000b   ; 
11A1: 00      	        DB 00000000b   ; 
11A2: 00      	        DB 00000000b   ; 
11A3: 00      	        DB 00000000b   ; 
11A4: 00      	        DB 00000000b   ; 
11A5: 00      	        DB 00000000b   ; 
              	        ;249
11A6: 00      	        DB 00000000b   ; 
11A7: 00      	        DB 00000000b   ; 
11A8: 00      	        DB 00000000b   ; 
11A9: 00      	        DB 00000000b   ; 
11AA: 00      	        DB 00000000b   ; 
11AB: 00      	        DB 00000000b   ; 
              	        ;250
11AC: 00      	        DB 00000000b   ; 
11AD: 00      	        DB 00000000b   ; 
11AE: 00      	        DB 00000000b   ; 
11AF: 00      	        DB 00000000b   ; 
11B0: 00      	        DB 00000000b   ; 
11B1: 00      	        DB 00000000b   ; 
              	        ;251
11B2: 00      	        DB 00000000b   ; 
11B3: 00      	        DB 00000000b   ; 
11B4: 00      	        DB 00000000b   ; 
11B5: 00      	        DB 00000000b   ; 
11B6: 00      	        DB 00000000b   ; 
11B7: 00      	        DB 00000000b   ; 
              	        ;252
11B8: 00      	        DB 00000000b   ; 
11B9: 00      	        DB 00000000b   ; 
11BA: 00      	        DB 00000000b   ; 
11BB: 00      	        DB 00000000b   ; 
11BC: 00      	        DB 00000000b   ; 
11BD: 00      	        DB 00000000b   ; 
              	        ;253
11BE: 00      	        DB 00000000b   ; 
11BF: 00      	        DB 00000000b   ; 
11C0: 00      	        DB 00000000b   ; 
11C1: 00      	        DB 00000000b   ; 
11C2: 00      	        DB 00000000b   ; 
11C3: 00      	        DB 00000000b   ; 
              	        ;254
11C4: 00      	        DB 00000000b   ; 
11C5: 00      	        DB 00000000b   ; 
11C6: 00      	        DB 00000000b   ; 
11C7: 00      	        DB 00000000b   ; 
11C8: 00      	        DB 00000000b   ; 
11C9: 00      	        DB 00000000b   ; 
              	        ;255
11CA: 00      	        DB 00000000b   ; 
11CB: 00      	        DB 00000000b   ; 
11CC: 00      	        DB 00000000b   ; 
11CD: 00      	        DB 00000000b   ; 
11CE: 00      	        DB 00000000b   ; 
11CF: 00      	        DB 00000000b   ; 
              	        ;256
11D0: 00      	        DB 00000000b   ; 
11D1: 00      	        DB 00000000b   ; 
11D2: 00      	        DB 00000000b   ; 
11D3: 00      	        DB 00000000b   ; 
11D4: 00      	        DB 00000000b   ; 
11D5: 01      	        DB 00000001b   ;      #
              	        
              	
              	;    JP INIT_LCD             ;Initalise the LCD
              	;    JP CLEAR_GBUF           ;Clear the Graphics Buffer
              	;    JP CLEAR_GR_LCD         ;Clear the Graphics LCD Screen
              	;    JP CLEAR_TXT_LCD        ;Clear the Text LCD Screen
              	;    JP SET_GR_MODE          ;Set Graphics Mode
              	;    JP SET_TXT_MODE         ;Set Text Mode
              	;    JP DRAW_BOX             ;Draw a rectangle between two points
              	;    JP DRAW_LINE            ;Draw a line between two points
              	;    JP DRAW_CIRCLE          ;Draw a circle from Mid X,Y to Radius
              	;    JP DRAW_PIXEL           ;Draw one pixel at X,Y
              	;    JP FILL_BOX             ;Draw a filled rectangle between two points
              	;    JP FILL_CIRCLE          ;Draw a filled circle from Mid X,Y to Radius
              	;    JP PLOT_TO_LCD          ;Display the Graphics Buffer to the LCD Screen
              	;    JP PRINT_STRING         ;Print Text on the screen in a given row
              	;    JP PRINT_CHARS          ;Print Characters on the screen in a given row and column
              	;    JP DELAY_US             ;Microsecond delay for LCD updates
              	;    JP DELAY_MS             ;Millisecond delay for LCD updates
              	;    JP SET_BUF_CLEAR        ;Clear the Graphics buffer on after Plotting to the screen
              	;    JP SET_BUF_NO_CLEAR     ;Retain the Graphics buffer on after Plotting to the screen
              	;    JP CLEAR_PIXEL          ;Remove a Pixel at X,Y
              	;    JP FLIP_PIXEL           ;Flip a Pixel On/Off at X,Y
              	;    JP LCD_INST             ;Send a parallel or serial instruction to LCD
              	;    JP LCD_DATA             ;Send a parallel or serial datum to LCD
              	;    JP SER_SYNC             ;Send serial synchronise byte to LCD
              	;    JP DRAW_GRAPHIC         ;Draw an ASCII charcter or Sprite to the LCD
              	;    JP INV_GRAPHIC          ;Inverse graphics printing
              	;    JP INIT_TERMINAL        ;Initialize the LCD for terminal emulation
              	;    JP SEND_CHAR_TO_GLCD    ;Send an ASCII Character to the LCD
              	;    JP SEND_STRING_TO_GLCD  ;Send an ASCII String to the LCD
              	;    JP SEND_A_TO_GLCD       ;Send register A to the LCD
              	;    JP SEND_HL_TO_GLCD      ;Send register HL to the LCD
              	;    JP SET_CURSOR           ;Set the graphics cursor
              	;    JP GET_CURSOR           ;Get the current cursor
              	;    JP DISPLAY_CURSOR       ;Set Cursor on or off
              	#include "I2C.asm"
              	; **********************************************************************
              	; I2C support functions
              	
              	; I2C bus open device
              	;   On entry: A = Device address (bit zero is read flag)
              	;             SCL = unknown, SDA = unknown
              	;   On exit:  If successfully A = 0 and Z flagged
              	;             If unsuccessfully A = Error and NZ flagged
              	;             BC DE HL IX IY preserved
11D6: F5      	I2C_Open:   PUSH AF
11D7: CD4A12  	            CALL I2C_Start      ;Output start condition
11DA: F1      	            POP  AF
11DB: 1803    	            JR   I2C_Write      ;Write data byte
              	
              	
              	; I2C bus close device
              	;   On entry: SCL = unknown, SDA = unknown
              	;   On exit:  If successfully A=0 and Z flagged
              	;             If unsuccessfully A=Error and NZ flagged
              	;             SCL = hi, SDA = hi
              	;             BC DE HL IX IY preserved
11DD: C35512  	I2C_Close:  JP   I2C_Stop       ;Output stop condition
              	
              	
              	; **********************************************************************
              	; **********************************************************************
              	; I2C bus master driver
              	; **********************************************************************
              	; **********************************************************************
              	
              	; Functions provided are:
              	;     I2C_Start
              	;     I2C_Stop
              	;     I2C_Read
              	;     I2C_Write
              	;
              	; This code has delays between all I/O operations to ensure it works
              	; with the slowest I2C devices
              	;
              	; I2C transfer sequence
              	;   +-------+  +---------+  +---------+     +---------+  +-------+
              	;   | Start |  | Address |  | Data    | ... | Data    |  | Stop  |
              	;   |       |  | frame   |  | frame 1 |     | frame N |  |       |
              	;   +-------+  +---------+  +---------+     +---------+  +-------+
              	;
              	;
              	; Start condition                     Stop condition
              	; Output by master device             Output by master device
              	;       ----+                                      +----
              	; SDA       |                         SDA          |
              	;           +-------                        -------+
              	;       -------+                                +-------
              	; SCL          |                      SCL       |
              	;              +----                        ----+
              	;
              	;
              	; Address frame
              	; Clock and data output from master device
              	; Receiving device outputs acknowledge 
              	;        +-----+-----+-----+-----+-----+-----+-----+-----+     +---+
              	; SDA    | A 7 | A 6 | A 5 | A 4 | A 3 | A 2 | A 1 | R/W | ACK |   |
              	;     ---+-----+-----+-----+-----+-----+-----+-----+-----+-----+   +---
              	;          +-+   +-+   +-+   +-+   +-+   +-+   +-+   +-+   +-+
              	; SCL      | |   | |   | |   | |   | |   | |   | |   | |   | |
              	;     -----+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ +---------
              	;
              	;
              	; Data frame 
              	; Clock output by master device
              	; Data output by transmitting device
              	; Receiving device outputs acknowledge 
              	;        +-----+-----+-----+-----+-----+-----+-----+-----+     +---+
              	; SDA    | D 7 | D 6 | D 5 | D 4 | D 3 | D 2 | D 1 | D 0 | ACK |   |
              	;     ---+-----+-----+-----+-----+-----+-----+-----+-----+-----+   +---
              	;          +-+   +-+   +-+   +-+   +-+   +-+   +-+   +-+   +-+
              	; SCL      | |   | |   | |   | |   | |   | |   | |   | |   | |
              	;     -----+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ +---------
              	;
              	
              	
              	; **********************************************************************
              	; I2C constants
              	
              	
              	; I2C bus master interface
              	; The default device option is for SC126 or compatible
              	
0021:         	I2C_PORT:   .EQU $21           ;Host I2C port address
0007:         	I2C_SDA_WR: .EQU 7              ;Host I2C write SDA bit number
0007:         	I2C_SDA_RD: .EQU 7              ;Host I2C read SDA bit number
0000:         	I2C_SCL_WR: .EQU 0              ;Host I2C write SCL bit number
0000:         	I2C_SCL_RD: .EQU 0              ;Host I2C read SCL bit number 
0081:         	I2C_QUIES:  .EQU 0b10000001     ;Host I2C output port quiescent value
              	
              	
              	; I2C support constants
0000:         	ERR_NONE:   .EQU 0              ;Error = None
0001:         	ERR_JAM:    .EQU 1              ;Error = Bus jammed [not used]
0002:         	ERR_NOACK:  .EQU 2              ;Error = No ackonowledge
0003:         	ERR_TOUT:   .EQU 3              ;Error = Timeout
              	
              	
              	; **********************************************************************
              	; Hardware dependent I2C bus functions
              	
              	
              	; I2C bus transmit frame (address or data)
              	;   On entry: A = Data byte, or
              	;                 Address byte (bit zero is read flag)
              	;             SCL = low, SDA = low
              	;   On exit:  If successful A=0 and Z flagged
              	;                SCL = lo, SDA = lo
              	;             If unsuccessful A=Error and NZ flagged
              	;                SCL = high, SDA = high, I2C closed
              	;             BC DE HL IX IY preserved
11E0: C5      	I2C_Write:  PUSH BC             ;Preserve registers
11E1: D5      	            PUSH DE
11E2: 57      	            LD   D,A            ;Store byte to be written
11E3: 0608    	            LD   B,8            ;8 data bits, bit 7 first
11E5: CB12    	I2C_WriteWr_Loop:   RL   D              ;Test M.S.Bit
11E7: 3805    	            JR   C,I2C_WriteBit_Hi      ;High, so skip
11E9: CD7C12  	            CALL I2C_SDA_LO     ;SDA low   (SCL lo, SDA = data bit)
11EC: 1803    	            JR   I2C_WriteBit_Clk
11EE: CD7512  	I2C_WriteBit_Hi:    CALL I2C_SDA_HI     ;SDA high  (SCL lo, SDA = data bit)
11F1: CD6712  	I2C_WriteBit_Clk:   CALL I2C_SCL_HI     ;SCL high  (SCL hi, SDA = data bit)
11F4: CD6E12  	            CALL I2C_SCL_LO     ;SCL low   (SCL lo, SDA = data bit)
11F7: 10EC    	            DJNZ I2C_WriteWr_Loop
              	; Test for acknowledge from slave (receiver)
              	; On arriving here, SCL = lo, SDA = data bit
11F9: CD7512  	            CALL I2C_SDA_HI     ;SDA high  (SCL lo, SDA hi/ack)
11FC: CD6712  	            CALL I2C_SCL_HI     ;SCL high  (SCL hi, SDA hi/ack)
11FF: CD8D12  	            CALL I2C_RdPort     ;Read SDA input
1202: 47      	            LD   B,A
1203: CD6E12  	            CALL I2C_SCL_LO     ;SCL low   (SCL lo, SDA = hi)
1206: CB78    	            BIT  I2C_SDA_RD,B
1208: 2004    	            JR   NZ,I2C_WriteNoAck      ;Skip if no acknowledge
120A: D1      	            POP  DE             ;Restore registers
120B: C1      	            POP  BC
120C: AF      	            XOR  A              ;Return success A=0 and Z flagged
120D: C9      	            RET
              	; I2C STOP required as no acknowledge
              	; On arriving here, SCL = lo, SDA = hi
120E: CD7C12  	I2C_WriteNoAck:     CALL I2C_SDA_LO     ;SDA low   (SCL lo, SDA = lo)
1211: CD6712  	            CALL I2C_SCL_HI     ;SCL high  (SCL hi, SDA = lo)
1214: CD7512  	            CALL I2C_SDA_HI     ;SDA low   (SCL hi, SDA = hi)
1217: D1      	            POP  DE             ;Restore registers
1218: C1      	            POP  BC
1219: 3E02    	            LD   A,ERR_NOACK    ;Return error = No Acknowledge
121B: B7      	            OR   A              ;  and NZ flagged
121C: C9      	            RET
              	
              	
              	; I2C bus receive frame (data)
              	;   On entry: A = Acknowledge flag
              	;               If A != 0 the read is acknowledged
              	;             SCL low, SDA low
              	;   On exit:  If successful A = data byte and Z flagged
              	;               SCL = low, SDA = low
              	;             If unsuccessul* A = Error and NZ flagged
              	;               SCL = low, SDA = low
              	;             BC DE HL IX IY preserved
              	; *This function always returns successful
121D: C5      	I2C_Read:   PUSH BC             ;Preserve registers
121E: D5      	            PUSH DE
121F: 5F      	            LD   E,A            ;Store acknowledge flag
1220: 0608    	            LD   B,8            ;8 data bits, 7 first
1222: CD7512  	            CALL I2C_SDA_HI     ;SDA high  (SCL lo, SDA hi/input)
1225: CD6712  	I2C_ReadRd_Loop:   CALL I2C_SCL_HI     ;SCL high  (SCL hi, SDA hi/input)
1228: CD8D12  	            CALL I2C_RdPort     ;Read SDA input bit
122B: 37      	            SCF                 ;Set carry flag
122C: CB7F    	            BIT  I2C_SDA_RD,A   ;SDA input high?
122E: 2001    	            JR   NZ, I2C_ReadRotate     ;Yes, skip with carry flag set
1230: 3F      	            CCF                 ;Clear carry flag
1231: CB12    	I2C_ReadRotate:    RL   D              ;Rotate result into D
1233: CD6E12  	            CALL I2C_SCL_LO     ;SCL low   (SCL lo, SDA hi/input)
1236: 10ED    	            DJNZ  I2C_ReadRd_Loop       ;Repeat for all 8 bits
              	; Acknowledge input byte
              	; On arriving here, SCL = lo, SDA = hi/input
1238: 7B      	            LD   A,E            ;Get acknowledge flag
1239: B7      	            OR   A              ;A = 0? (indicates no acknowledge)
123A: 2803    	            JR   Z, I2C_ReadNoAck       ;Yes, so skip acknowledge
123C: CD7C12  	            CALL I2C_SDA_LO     ;SDA low   (SCL lo, SDA lo)
123F: CD6712  	I2C_ReadNoAck:     CALL I2C_SCL_HI     ;SCL hi    (SCL hi, SDA lo)
1242: CD6E12  	            CALL I2C_SCL_LO     ;SCL low   (SCL lo, SDA lo)
1245: 7A      	            LD   A,D            ;Get data byte received
1246: D1      	            POP  DE             ;Restore registers
1247: C1      	            POP  BC
1248: BF      	            CP   A              ;Return success Z flagged
1249: C9      	            RET
              	
              	
              	; I2C bus start
              	;   On entry: SCL = unknown, SDA = unknown
              	;   On exit:  SCL = low, SDA = low
              	;             A = 0 and Z flagged as we always succeed
              	;             BC DE HL IX IY preserved
              	; First ensure SDA and SCL are high
124A: CD6312  	I2C_Start:  CALL I2C_INIT       ;Initialise I2C control port
              	;           CALL I2C_SCL_HI     ;SCL high  (SCL hi, SDA ??)
              	;           CALL I2C_SDA_HI     ;SDA high  (SCL hi, SDA hi)
              	; Generate I2C start condition
124D: CD7C12  	            CALL I2C_SDA_LO     ;SDA low   (SCL hi, SDA lo)
1250: CD6E12  	            CALL I2C_SCL_LO     ;SCL low   (SCL lo, SDA lo)
1253: AF      	            XOR  A              ;Return success A=0 and Z flagged
1254: C9      	            RET
              	
              	
              	; I2C bus stop 
              	;   On entry: SCL = unknown, SDA = unknown
              	;   On exit:  SCL = high, SDA = high
              	;             A = 0 and Z flagged as we always succeed
              	;             BC DE HL IX IY preserved
              	; First ensure SDA and SCL are low
1255: CD7C12  	I2C_Stop:   CALL I2C_SDA_LO     ;SDA low   (SCL hi, SDA lo)
1258: CD6E12  	            CALL I2C_SCL_LO     ;SCL low   (SCL lo, SDA lo)
              	; Generate stop condition
125B: CD6712  	            CALL I2C_SCL_HI     ;SCL high  (SCL hi, SDA lo)
125E: CD7512  	            CALL I2C_SDA_HI     ;SDA low   (SCL hi, SDA hi)
1261: AF      	            XOR  A              ;Return success A=0 and Z flagged
1262: C9      	            RET
              	
              	
              	; **********************************************************************
              	; I2C bus simple I/O functions
              	;   On entry: No parameters required
              	;   On exit:  BC DE HL IX IY preserved
              	
1263: 3E81    	I2C_INIT:   LD   A,I2C_QUIES    ;I2C control port quiescent value
1265: 181A    	            JR   I2C_WrPort
              	
1267: 3A9DFB  	I2C_SCL_HI: LD   A,(I2C_RAMCPY)
126A: CBC7    	            SET  I2C_SCL_WR,A
126C: 1813    	            JR   I2C_WrPort
              	
126E: 3A9DFB  	I2C_SCL_LO: LD   A,(I2C_RAMCPY)
1271: CB87    	            RES  I2C_SCL_WR,A
1273: 180C    	            JR   I2C_WrPort
              	
1275: 3A9DFB  	I2C_SDA_HI: LD   A,(I2C_RAMCPY)
1278: CBFF    	            SET  I2C_SDA_WR,A
127A: 1805    	            JR   I2C_WrPort
              	
127C: 3A9DFB  	I2C_SDA_LO: LD   A,(I2C_RAMCPY)
127F: CBBF    	            RES  I2C_SDA_WR,A
              	
1281: C5      	I2C_WrPort: PUSH BC             ;Preserve registers
1282: 0600    	            LD   B,0            ;Set up BC for 16-bit
1284: 0E21    	            LD   C,I2C_PORT     ;  I/O address of I2C port
1286: ED79    	            OUT  (C),A          ;Write A to I2C I/O port
1288: 329DFB  	            LD   (I2C_RAMCPY),A ;Write A to RAM copy
128B: C1      	            POP  BC             ;Restore registers
128C: C9      	            RET
              	
128D: C5      	I2C_RdPort: PUSH BC             ;Preserve registers
128E: 0600    	            LD   B,0            ;Set up BC for 16-bit
1290: 0E21    	            LD   C,I2C_PORT     ;  I/O address of I2C port
1292: ED78    	            IN   A,(C)          ;Read A from I/O port
1294: C1      	            POP  BC             ;Restore registers
1295: C9      	            RET
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	;==============================================================================
              	;==============================================================================
              	;==============================================================================
              	;===================       FUNCTIONS    =======================================
              	;==============================================================================
              	;==============================================================================
              	
              	
              	
              	
              	; **********************************************************************
              	; List devices found on the I2C bus
              	;
              	; Test each I2C device address and reports any that acknowledge
              	
1296: 21F613  	I2CLIST:    LD   HL, I2C_LIST_MSG        ;Address of message string
1299: AF      	            XOR A ; A = character to stop printing.
129A: CD4006  	            CALL LCD_PRINT_STRING         ;Output string
129D: 1600    	            LD   D,0            ;First I2C device address to test
129F: D5      	LISTLOOP:      PUSH DE             ;Preserve DE
12A0: 7A      	            LD   A,D            ;Get device address to be tested
12A1: CDBC12  	            CALL LISTTEST          ;Test if device is present
12A4: D1      	            POP  DE             ;Restore DE
12A5: 2009    	            JR   NZ,LISTNEXT       ;Skip if no acknowledge
12A7: 7A      	            LD   A,D            ;Get address of device tested
12A8: CD3013  	            CALL HexOut         ;Output as two character hex 
12AB: 3E20    	            LD A, ' '; space
12AD: CD5C06  	            CALL LCD_PRINT_A       ;Output space character
12B0: 14      	LISTNEXT:      INC  D              ;Get next write address
12B1: 14      	            INC  D
12B2: 7A      	            LD   A,D            ;Address of next device to test
12B3: B7      	            OR   A              ;Have we tested all addresses?
12B4: 20E9    	            JR   NZ,LISTLOOP       ;No, so loop again
12B6: 3E0D    	            LD A, CR; enter
12B8: CD5C06  	            CALL LCD_PRINT_A       ;Output space character
12BB: C9      	            RET
              	
              	; Test if device at I2C address A acknowledges
              	;   On entry: A = I2C device address (8-bit, bit 0 = lo for write)
              	;   On exit:  Z flagged if device acknowledges
              	;             NZ flagged if devices does not acknowledge
12BC: CDD611  	LISTTEST:      CALL I2C_Open       ;Open I2C device for write
12BF: C0      	            RET  NZ             ;Abort if failed to open
12C0: CDDD11  	            CALL I2C_Close      ;Close I2C device 
12C3: AF      	            XOR  A              ;Return with Z flagged
12C4: C9      	            RET
              	
              	
              	
              	
              	; Copy a block from I2C memory to CPU memory
              	;   On entry: DE = First address in I2C memory
              	;             HL = First address in CPU memory
              	;             BC = Number of bytes to be copied
              	;             SCL = unknown, SDA = unknown
              	;   On exit:  If successfully A = 0 and Z flagged
              	;             If unsuccessfully A = Error and NZ flagged
              	;             IX IY preserved
12C5: C5      	I2C_MemRd:  PUSH BC
12C6: 011027  	            LD   BC,TIMEOUT     ;Timeout loop counter
12C9: 3EAE    	I2C_MemRdRepeat:    LD   A,I2CA_BLOCK   ;I2C address to write to
12CB: CDD611  	            CALL I2C_Open       ;Open for write
12CE: 280A    	            JR   Z,I2C_MemRdReady       ;If open okay then skip on
12D0: 0B      	            DEC  BC
12D1: 78      	            LD   A,B
12D2: B1      	            OR   C              ;Timeout?
12D3: 20F4    	            JR   NZ,I2C_MemRdRepeat     ;No, so go try again
12D5: C1      	            POP  BC
12D6: 3E03    	            LD   A,ERR_TOUT     ;Error code
12D8: B7      	            OR   A              ;Error, so NZ flagged
12D9: C9      	            RET                 ;Return with error
              	; Device opened okay
12DA: C1      	I2C_MemRdReady:     POP  BC             ;Restore byte counter
12DB: 7A      	            LD   A,D            ;Address (hi) in I2C memory
12DC: CDE011  	            CALL I2C_Write      ;Write address
12DF: 7B      	            LD   A,E            ;Address (lo) in I2C memory
12E0: CDE011  	            CALL I2C_Write      ;Write address
12E3: 3EAF    	            LD   A,I2CA_BLOCK+1 ;I2C device to be read from
12E5: CDD611  	            CALL I2C_Open       ;Open for read
12E8: C0      	            RET  NZ             ;Abort if error
12E9: 0B      	I2C_MemRdRead:      DEC  BC             ;Decrement byte counter
12EA: 78      	            LD   A,B
12EB: B1      	            OR   C              ;Last byte to be read?
12EC: CD1D12  	            CALL I2C_Read       ;Read byte with no ack on last byte
12EF: 77      	            LD   (HL),A         ;Write byte in CPU memory
12F0: 23      	            INC  HL             ;Increment CPU memory pointer
12F1: 78      	            LD   A,B
12F2: B1      	            OR   C              ;Finished?
12F3: 20F4    	            JR   NZ,I2C_MemRdRead       ;No, so go read next byte
12F5: CD5512  	            CALL I2C_Stop       ;Generate I2C stop
12F8: AF      	            XOR  A              ;Return with success (Z flagged)
12F9: C9      	            RET
              	
              	
              	; Copy a block from CPU memory to I2C memory
              	;   On entry: DE = First address in I2C memory
              	;             HL = First address in CPU memory
              	;             BC = Number of bytes to be copied
              	;             SCL = unknown, SDA = unknown
              	;   On exit:  If successfully A = 0 and Z flagged
              	;             If unsuccessfully A = Error and NZ flagged
              	;             IX IY preserved
              	; The 24LC64 requires blocks of data to be written in 64 byte (or less)
              	; pages.
12FA: C5      	I2C_MemWr:  PUSH BC
12FB: 011027  	            LD   BC,TIMEOUT     ;Timeout loop counter
12FE: 3EAE    	I2C_MemWrRepeat:    LD   A,I2CA_BLOCK   ;I2C address to write to
1300: CDD611  	            CALL I2C_Open       ;Open for write
1303: 280A    	            JR   Z,I2C_MemWrReady       ;If open okay then skip on
1305: 0B      	            DEC  BC
1306: 78      	            LD   A,B
1307: B1      	            OR   C              ;Timeout?
1308: 20F4    	            JR   NZ,I2C_MemWrRepeat     ;No, so go try again
130A: C1      	            POP  BC
130B: 3E03    	            LD   A,ERR_TOUT     ;Error code
130D: B7      	            OR   A              ;Error, so NZ flagged
130E: C9      	            RET                 ;Return with error
              	; Device opened okay
130F: C1      	I2C_MemWrReady:     POP  BC             ;Restore byte counter
1310: 7A      	I2C_MemWrBlock:     LD   A,D            ;Address (hi) in I2C memory
1311: CDE011  	            CALL I2C_Write      ;Write address
1314: 7B      	            LD   A,E            ;Address (lo) in I2C memory
1315: CDE011  	            CALL I2C_Write      ;Write address
1318: 7E      	I2C_MemWrWrite:     LD   A,(HL)         ;Get data byte from CPU memory
1319: CDE011  	            CALL I2C_Write      ;Read byte from I2C memory
131C: 23      	            INC  HL             ;Increment CPU memory pointer
131D: 13      	            INC  DE             ;Increment I2C memory pointer
131E: 0B      	            DEC  BC             ;Decrement byte counter
131F: 78      	            LD   A,B
1320: B1      	            OR   C              ;Finished?
1321: 2805    	            JR   Z,I2C_MemWrStore       ;Yes, so go store this page
1323: 7B      	            LD   A,E            ;Get address in I2C memory (lo byte)
1324: E63F    	            AND  63             ;64 byte page boundary?
1326: 20F0    	            JR   NZ,I2C_MemWrWrite      ;No, so go write another byte
1328: CD5512  	I2C_MemWrStore:     CALL I2C_Stop       ;Generate I2C stop
132B: 78      	            LD   A,B
132C: B1      	            OR   C              ;Finished?
132D: 20CB    	            JR   NZ,I2C_MemWr   ;No, so go write some more
132F: C9      	            RET   
              	
              	
              	; Hex byte output to console
              	;   On entry: A = Byte to be output in hex
              	;   On exit:  BC DE HL IX IY preserved
1330: F5      	HexOut:     PUSH AF             ;Preserve byte to be output
1331: 1F      	            RRA                 ;Shift top nibble to
1332: 1F      	            RRA                 ;  botom four bits..
1333: 1F      	            RRA
1334: 1F      	            RRA
1335: E60F    	            AND  $0F           ;Mask off unwanted bits
1337: CD3D13  	            CALL HexOutHex           ;Output hi nibble
133A: F1      	            POP  AF             ;Restore byte to be output
133B: E60F    	            AND  $0F           ;Mask off unwanted bits
              	; Output nibble as ascii character
133D: FE0A    	HexOutHex:       CP   $0A           ;Nibble > 10 ?
133F: 3802    	            JR   C,HexOutSkip        ;No, so skip
1341: C607    	            ADD  A,7            ;Yes, so add 7
1343: C630    	HexOutSkip:      ADD  A,$30         ;Add ASCII '0'
1345: CD5C06  	            CALL LCD_PRINT_A       ;Write character
1348: C9      	            RET
              	
              	
              	
              	
              	
              	
1349:         	msg_help:
1349: 0D0A    			.BYTE	CR, LF
134B: 52202020			.TEXT	"R           - Reset"
134F: 20202020	
1353: 20202020	
1357: 2D205265	
135B: 736574  	
135E: 0D0A    			.BYTE	CR, LF
1360: 47202020			.TEXT	"G           - Goto nnnn"
1364: 20202020	
1368: 20202020	
136C: 2D20476F	
1370: 746F206E	
1374: 6E6E6E  	
1377: 0D0A    			.BYTE	CR, LF
1379: 3A6E6E6E			.TEXT	":nnnnnn...  - Load Intel-Hex file record"
137D: 6E6E6E2E	
1381: 2E2E2020	
1385: 2D204C6F	
1389: 61642049	
138D: 6E74656C	
1391: 2D486578	
1395: 2066696C	
1399: 65207265	
139D: 636F7264	
13A1: 0D0A    			.BYTE	CR, LF
13A3: 00      	        .BYTE   $00
              	
13A4:         	CKSUMERR:
13A4: 43686563			.BYTE	"Checksum error"
13A8: 6B73756D	
13AC: 20657272	
13B0: 6F72    	
13B2: 0D0A00  			.BYTE	CR, LF,$00
              	
13B5:         	LDETXT:
13B5: 4C6F6164			.TEXT	"Load complete."
13B9: 20636F6D	
13BD: 706C6574	
13C1: 652E    	
13C3: 0D0A00  			.BYTE	CR, LF, $00
              	
13C6: 0C0D0D0A	WELLCOME: .db CS, CR, CR, LF,"Z80Mini - Game core", CR, LF, 00H
13CA: 5A38304D	
13CE: 696E6920	
13D2: 2D204761	
13D6: 6D652063	
13DA: 6F72650D	
13DE: 0A00    	
              	
13E0: 5A38304D	WELLCOME_LCD: .db "Z80Mini - Game core", CR, CR, 00H
13E4: 696E6920	
13E8: 2D204761	
13EC: 6D652063	
13F0: 6F72650D	
13F4: 0D00    	
              	
13F6: 49324320	I2C_LIST_MSG:    .DB "I2C device found at:",CR,0
13FA: 64657669	
13FE: 63652066	
1402: 6F756E64	
1406: 2061743A	
140A: 0D00    	
140C: 202D202D	MSG_EOF  .db " - - - FIM - - - ", 00H
1410: 202D2046	
1414: 494D202D	
1418: 202D202D	
141C: 2000    	
141E: 2E62696E	MSG_READFILE_EXE .db ".bin", 00H
1422: 00      	
1423: 2E696D67	MSG_READFILE_IMG .db ".img", 00H
1427: 00      	
1428: 2E747874	MSG_READFILE_TXT .db ".txt", 00H
142C: 00      	
              	
142D: 20537461	MENU_LCD_1:         .db " Start game", CR, 00H
1431: 72742067	
1435: 616D650D	
1439: 00      	
143A: 204C6F61	MENU_LCD_2:         .db " Load from card", CR, 00H
143E: 64206672	
1442: 6F6D2063	
1446: 6172640D	
144A: 00      	
144B: 20546573	MENU_LCD_3:         .db " Test keys", CR, 00H
144F: 74206B65	
1453: 79730D00	
1457: 20526573	MENU_LCD_4:         .db " Reset", CR, 00H
145B: 65740D00	
              	
145F: 50524553	MSG_START_GAME:     .db "PRESS START",0
1463: 53205354	
1467: 41525400	
146B: 47414D45	MSG_END_GAME:       .db "GAMEOVER",0
146F: 4F564552	
1473: 00      	
              	
1474: D204    	seed1       .dw 1234
1476: 3D22    	seed2       .dw 8765
              	
              	; RAM Locations - Move this section to RAM if necessary
              	;---------------
1478: FFFFFFFF	.ORG $F000              ;Start location
147C: FF...   	
              	        
0780:         	SBUF:   EQU 16 * $78     ;Scroll Buffer size  16 * 60 = 960 byte (10 lines), change to 20 lines (16 * 120($78))
F000: FFFFFFFF	        DS SBUF         ;Scroll Buffer space abover GBUF 
F004: FF...   	
F780: FFFFFFFF	GBUF:   DS 0400H        ;Graphics Buffer 16 * 64 = 1024 byte
F784: FF...   	
F780:         	TGBUF:  EQU GBUF        ;Terminal GBUF
FB80: 80F7    	VPORT:  DW GBUF         ;View port start address
FB82: 80F7    	TBUF:   DW GBUF         ;Top of Buffer pointer
FB84: 0000    	ENDPT:  DW 0000H        ;End Point for Line
FB86: 00      	SX:     DB 00H          ;Sign of X
FB87: 00      	SY:     DB 00H          ;Sign of Y
FB88: 0000    	DX:     DW 0000H        ;Change of X
FB8A: 0000    	DY:     DW 0000H        ;Change of Y
FB8C: 0000    	ERR:    DW 0000H        ;Error Rate
FB8E: 0000    	RAD:    DW 0000H        ;Radius
FB90: 00      	CLRBUF: DB 00H          ;Clear Buffer Flag on LCD Displaying
FB91: 0000    	CURSOR_XY: DW 0000H     ;Cursor Address X,Y
FB91:         	CURSOR_Y: EQU CURSOR_XY   ;Cursor Y
FB92:         	CURSOR_X: EQU CURSOR_XY+1 ;Cursor X
FB93: 00      	CURSOR_YS: DB 00H       ;Start Y row for new line
FB94: 00      	CURSOR_ON: DB 00H       ;Cursor on/off flag
FB95: 00      	INVERSE: DB 00H         ;Inverse Flag
FB96: 00      	PIXEL_X: DB 00H         ;Pixel X length
FB97: 0000    	INT_VEC: DW 0000H       ;Vetor de interrupção
FB99: 00      	GAMEPAD_KEY: DB 00H 	;Guarda tecla lida na interrupcao
FB9A: 00      	CURSOR_MENU:      .db $00	; Cursor menu
FB9B: 00      	DRAW_PIXEL_COLLISION .db $00 ; 0 - reset, 1 - set
FB9C: 00      	VAR_GAMEOVER    .db $00 ; Flag de gameover
FB9D: 00      	I2C_RAMCPY:         .DB    $00   ; 1 byte - RAM copy of output port
              	.end


; +++ segments +++

#CODE          = $0000 =     0,  size = $FB9E = 64414

; +++ global symbols +++

ABSHL           = $07F2 =  2034          LCD.asm:450
BASE_COL        = $0921 =  2337          LCD.asm:713
BCTOA           = $05CD =  1485          Z80MiniGame.asm:932
BCTOA1          = $05D6 =  1494          Z80MiniGame.asm:937
BCTOA2          = $05E4 =  1508          Z80MiniGame.asm:947
BDEL            = $063F =  1599          LCD.asm:72
BKSP            = $0008 =     8          LCD.asm:64 (unused)
CHECK_COLLISION = $028F =   655          Z80MiniGame.asm:364
CHECK_GAMEOVER_WAIT_START = $0247 =   583          Z80MiniGame.asm:319
CIRCLE_LOOP     = $0818 =  2072          LCD.asm:500
CKSIOA          = $057C =  1404          Z80MiniGame.asm:859
CKSUMERR        = $13A4 =  5028          Z80MiniGame.asm:1057
CLEAR_COLLISION = $028A =   650          Z80MiniGame.asm:356
CLEAR_GBUF      = $06B9 =  1721          LCD.asm:190
CLEAR_GR_LCD    = $06C9 =  1737          LCD.asm:201
CLEAR_PIXEL     = $08EE =  2286          LCD.asm:658
CLEAR_TXT_LCD   = $06F0 =  1776          LCD.asm:225
CLK_LOOP        = $0BBA =  3002          LCD.asm:1299
CLRBUF          = $FB90 = 64400          Z80MiniGame.asm:1103
CLR_ROWS        = $06FF =  1791          LCD.asm:232
CLR_X           = $06CE =  1742          LCD.asm:204
CLR_Y           = $06E1 =  1761          LCD.asm:214
CR              = $000D =    13          LCD.asm:68
CS              = $000C =    12          LCD.asm:67
CTRLC           = $0003 =     3          LCD.asm:73 (unused)
CURSOR          = $008F =   143          LCD.asm:70
CURSOR_MENU     = $FB9A = 64410          Z80MiniGame.asm:1113
CURSOR_ON       = $FB94 = 64404          Z80MiniGame.asm:1108
CURSOR_X        = $FB92 = 64402          Z80MiniGame.asm:1106
CURSOR_XY       = $FB91 = 64401          Z80MiniGame.asm:1104
CURSOR_Y        = $FB91 = 64401          Z80MiniGame.asm:1105
CURSOR_YS       = $FB93 = 64403          Z80MiniGame.asm:1107
DEC_CURSOR      = $0B0A =  2826          LCD.asm:1093
DEL             = $007F =   127          LCD.asm:71
DELAY_DE        = $05E9 =  1513          Z80MiniGame.asm:963
DELAY_MS        = $09A6 =  2470          LCD.asm:822
DELAY_US        = $09A3 =  2467          LCD.asm:820
DELETE_CHAR     = $0680 =  1664          LCD.asm:143
DISPLAY_CURSOR  = $0B34 =  2868          LCD.asm:1124
DN              = $00B6 =   182          LCD.asm:63
DO_BS           = $0A01 =  2561          LCD.asm:898 (unused)
DO_CHAR         = $0A26 =  2598          LCD.asm:915
DO_CR           = $09E3 =  2531          LCD.asm:882
DO_FF           = $09FD =  2557          LCD.asm:895
DO_SCRL_DN      = $09DB =  2523          LCD.asm:877
DO_SCRL_UP      = $09D0 =  2512          LCD.asm:871 (unused)
DO_TAB          = $0A0F =  2575          LCD.asm:905
DRAW_A          = $0A5A =  2650          LCD.asm:958
DRAW_BOX        = $0716 =  1814          LCD.asm:254
DRAW_CIRCLE     = $07FC =  2044          LCD.asm:479
DRAW_CURSOR     = $0A2C =  2604          LCD.asm:918
DRAW_GRAPHIC    = $0B40 =  2880          LCD.asm:1145
DRAW_LINE       = $0751 =  1873          LCD.asm:331
DRAW_PIXEL      = $08D1 =  2257          LCD.asm:625
DRAW_PIXEL_COLLISION = $FB9B = 64411          Z80MiniGame.asm:1114
DS1             = $0884 =  2180          LCD.asm:568
DS2             = $08A8 =  2216          LCD.asm:587
DS3             = $08BB =  2235          LCD.asm:599
DS_EXIT         = $0983 =  2435          LCD.asm:788
DS_LOOP         = $0979 =  2425          LCD.asm:781
DX              = $FB88 = 64392          Z80MiniGame.asm:1099
DY              = $FB8A = 64394          Z80MiniGame.asm:1100
ECHO            = $05E6 =  1510          Z80MiniGame.asm:953
ENDPT           = $FB84 = 64388          Z80MiniGame.asm:1096
ERR             = $FB8C = 64396          Z80MiniGame.asm:1101
ERR_JAM         = $0001 =     1          I2C.asm:98 (unused)
ERR_NOACK       = $0002 =     2          I2C.asm:99
ERR_NONE        = $0000 =     0          I2C.asm:97 (unused)
ERR_TOUT        = $0003 =     3          I2C.asm:100
FILL_BOX        = $0741 =  1857          LCD.asm:299
FILL_CIRCLE     = $08C3 =  2243          LCD.asm:609
FLIP_PIXEL      = $0900 =  2304          LCD.asm:679
FONT_DATA       = $0BD6 =  3030          LCD.asm:1333
GAMEPAD         = $0040 =    64          Z80MiniGame.asm:57
GAMEPAD_KEY     = $FB99 = 64409          Z80MiniGame.asm:1112
GBOTTOM         = $0722 =  1826          LCD.asm:266
GBUF            = $F780 = 63360          Z80MiniGame.asm:1092
GET2            = $058E =  1422          Z80MiniGame.asm:884
GETCHR          = $0585 =  1413          Z80MiniGame.asm:872
GETHL           = $059F =  1439          Z80MiniGame.asm:899
GETX            = $05AB =  1451          Z80MiniGame.asm:909 (unused)
GETX1           = $05AE =  1454          Z80MiniGame.asm:910
GETX2           = $05B7 =  1463          Z80MiniGame.asm:915
GETX3           = $05C7 =  1479          Z80MiniGame.asm:925
GET_CURSOR      = $0B2F =  2863          LCD.asm:1117
GLEFT           = $072C =  1836          LCD.asm:275
GOTO            = $0548 =  1352          Z80MiniGame.asm:804
GRIGHT          = $0737 =  1847          LCD.asm:285
GTOP            = $0717 =  1815          LCD.asm:256
HELP            = $054E =  1358          Z80MiniGame.asm:812
HexOut          = $1330 =  4912          I2C.asm:454
HexOutHex       = $133D =  4925          I2C.asm:464
HexOutSkip      = $1343 =  4931          I2C.asm:467
I2CA_BLOCK      = $00AE =   174          Z80MiniGame.asm:83
I2CLIST         = $1296 =  4758          I2C.asm:325
I2C_Close       = $11DD =  4573          I2C.asm:22
I2C_INIT        = $1263 =  4707          I2C.asm:228
I2C_LIST_MSG    = $13F6 =  5110          Z80MiniGame.asm:1069
I2C_MemRd       = $12C5 =  4805          I2C.asm:368
I2C_MemRdRead   = $12E9 =  4841          I2C.asm:390
I2C_MemRdReady  = $12DA =  4826          I2C.asm:382
I2C_MemRdRepeat = $12C9 =  4809          I2C.asm:370
I2C_MemWr       = $12FA =  4858          I2C.asm:414
I2C_MemWrBlock  = $1310 =  4880          I2C.asm:429 (unused)
I2C_MemWrReady  = $130F =  4879          I2C.asm:428
I2C_MemWrRepeat = $12FE =  4862          I2C.asm:416
I2C_MemWrStore  = $1328 =  4904          I2C.asm:444
I2C_MemWrWrite  = $1318 =  4888          I2C.asm:433
I2C_Open        = $11D6 =  4566          I2C.asm:10
I2C_PORT        = $0021 =    33          I2C.asm:88
I2C_QUIES       = $0081 =   129          I2C.asm:93
I2C_RAMCPY      = $FB9D = 64413          Z80MiniGame.asm:1116
I2C_RdPort      = $128D =  4749          I2C.asm:254
I2C_Read        = $121D =  4637          I2C.asm:163
I2C_ReadNoAck   = $123F =  4671          I2C.asm:183
I2C_ReadRd_Loop = $1225 =  4645          I2C.asm:168
I2C_ReadRotate  = $1231 =  4657          I2C.asm:174
I2C_SCL_HI      = $1267 =  4711          I2C.asm:231
I2C_SCL_LO      = $126E =  4718          I2C.asm:235
I2C_SCL_RD      = $0000 =     0          I2C.asm:92 (unused)
I2C_SCL_WR      = $0000 =     0          I2C.asm:91
I2C_SDA_HI      = $1275 =  4725          I2C.asm:239
I2C_SDA_LO      = $127C =  4732          I2C.asm:243
I2C_SDA_RD      = $0007 =     7          I2C.asm:90
I2C_SDA_WR      = $0007 =     7          I2C.asm:89
I2C_Start       = $124A =  4682          I2C.asm:198
I2C_Stop        = $1255 =  4693          I2C.asm:214
I2C_WrPort      = $1281 =  4737          I2C.asm:246
I2C_Write       = $11E0 =  4576          I2C.asm:116
I2C_WriteBit_Clk = $11F1 =  4593          I2C.asm:125
I2C_WriteBit_Hi = $11EE =  4590          I2C.asm:124
I2C_WriteNoAck  = $120E =  4622          I2C.asm:143
I2C_WriteWr_Loop = $11E5 =  4581          I2C.asm:120
INC_CURSOR      = $0A8F =  2703          LCD.asm:1012
INC_ROW         = $0A9C =  2716          LCD.asm:1019
INIT            = $018A =   394          Z80MiniGame.asm:170
INIT_BASIC      = $0BCC =  3020          LCD.asm:1313
INIT_GAME_WAIT_START = $024C =   588          Z80MiniGame.asm:323
INIT_LCD        = $06A4 =  1700          LCD.asm:176
INIT_TERMINAL   = $09B9 =  2489          LCD.asm:845
INT38           = $0428 =  1064          Z80MiniGame.asm:639
INT38_END       = $0432 =  1074          Z80MiniGame.asm:645
INT_VEC         = $FB97 = 64407          Z80MiniGame.asm:1111
INVERSE         = $FB95 = 64405          Z80MiniGame.asm:1109
INV_BIT         = $0B70 =  2928          LCD.asm:1182
INV_GRAPHIC     = $0B38 =  2872          LCD.asm:1131
KEYDOWN         = $03C5 =   965          Z80MiniGame.asm:580
KEYDOWN_RES     = $03DB =   987          Z80MiniGame.asm:590
KEYUP           = $03A7 =   935          Z80MiniGame.asm:565
KEYUP_RES       = $03BD =   957          Z80MiniGame.asm:575
KEY_A           = $0449 =  1097          Z80MiniGame.asm:661
LCDCTRL         = $0070 =   112          Z80MiniGame.asm:55 (unused)
LCDDATA         = $0071 =   113          Z80MiniGame.asm:56 (unused)
LCD_CLEAR       = $0650 =  1616          LCD.asm:98
LCD_CR          = $0656 =  1622          LCD.asm:106
LCD_DATA        = $0BA1 =  2977          LCD.asm:1254
LCD_DR          = $0071 =   113          LCD.asm:51
LCD_IMAGE_128x64 = $068B =  1675          LCD.asm:156
LCD_INST        = $0B9C =  2972          LCD.asm:1237
LCD_IR          = $0070 =   112          LCD.asm:50
LCD_PRINT_A     = $065C =  1628          LCD.asm:115
LCD_PRINT_A_FIM = $067B =  1659          LCD.asm:136
LCD_PRINT_A_OK  = $0678 =  1656          LCD.asm:134
LCD_PRINT_STRING = $0640 =  1600          LCD.asm:80
LCD_SER         = $0000 =     0          LCD.asm:52
LDETXT          = $13B5 =  5045          Z80MiniGame.asm:1061
LF              = $000A =    10          LCD.asm:66
LINE_LOOP       = $07AC =  1964          LCD.asm:400
LISTLOOP        = $129F =  4767          I2C.asm:329
LISTNEXT        = $12B0 =  4784          I2C.asm:338
LISTTEST        = $12BC =  4796          I2C.asm:351
LL2             = $07D7 =  2007          LCD.asm:432
LL3             = $07E4 =  2020          LCD.asm:440
LOAD            = $05FE =  1534          Z80MiniGame.asm:996
LOAD00          = $0638 =  1592          Z80MiniGame.asm:1032
LOAD2           = $061C =  1564          Z80MiniGame.asm:1012
LOAD3           = $062B =  1579          Z80MiniGame.asm:1023
LOADERR         = $0631 =  1585          Z80MiniGame.asm:1028
LOAD_GAME       = $0294 =   660          Z80MiniGame.asm:370
LoopBC          = $05EF =  1519          Z80MiniGame.asm:969
LoopDE          = $05EC =  1516          Z80MiniGame.asm:967
MENU1           = $03E2 =   994          Z80MiniGame.asm:595
MENU2           = $03F2 =  1010          Z80MiniGame.asm:604
MENU3           = $0402 =  1026          Z80MiniGame.asm:613
MENU4           = $0412 =  1042          Z80MiniGame.asm:622
MENU_LCD_1      = $142D =  5165          Z80MiniGame.asm:1075
MENU_LCD_2      = $143A =  5178          Z80MiniGame.asm:1076
MENU_LCD_3      = $144B =  5195          Z80MiniGame.asm:1077
MENU_LCD_4      = $1457 =  5207          Z80MiniGame.asm:1078
MOVE_DOWN       = $0AFF =  2815          LCD.asm:1083
MOVE_UP         = $0AF1 =  2801          LCD.asm:1074 (unused)
MOVE_VPORT      = $0AEA =  2794          LCD.asm:1069
MSG_END_GAME    = $146B =  5227          Z80MiniGame.asm:1081
MSG_EOF         = $140C =  5132          Z80MiniGame.asm:1070
MSG_READFILE_EXE = $141E =  5150          Z80MiniGame.asm:1071
MSG_READFILE_IMG = $1423 =  5155          Z80MiniGame.asm:1072
MSG_READFILE_TXT = $1428 =  5160          Z80MiniGame.asm:1073
MSG_START_GAME  = $145F =  5215          Z80MiniGame.asm:1080
NEW_LINE_LCD    = $0422 =  1058          Z80MiniGame.asm:633
NEXT_CIRCLE     = $08C5 =  2245          LCD.asm:611
NEXT_CMD        = $06A9 =  1705          LCD.asm:179
NEXT_PIXEL      = $0742 =  1858          LCD.asm:301
NIBBLE_TO_GLCD  = $0A63 =  2659          LCD.asm:966
PC_LOOP         = $099A =  2458          LCD.asm:811
PIXEL_X         = $FB96 = 64406          Z80MiniGame.asm:1110
PLOT_BIT        = $0B74 =  2932          LCD.asm:1186
PLOT_BYTE       = $0B5D =  2909          LCD.asm:1166
PLOT_COLUMN     = $094D =  2381          LCD.asm:745
PLOT_GRAPHIC    = $0B53 =  2899          LCD.asm:1160
PLOT_ROW        = $0935 =  2357          LCD.asm:733
PLOT_TO_LCD     = $0930 =  2352          LCD.asm:730
PRINT           = $0555 =  1365          Z80MiniGame.asm:821
PRINT_CHARS     = $0984 =  2436          LCD.asm:798
PRINT_STRING    = $0962 =  2402          LCD.asm:767
PS1             = $0A3D =  2621          LCD.asm:937
RAD             = $FB8E = 64398          Z80MiniGame.asm:1102
READ_FILE       = $02AC =   684          Z80MiniGame.asm:384
READ_FILE_EXE   = $0318 =   792          Z80MiniGame.asm:452
READ_FILE_IMG   = $032E =   814          Z80MiniGame.asm:471
READ_FILE_IMG_K = $0349 =   841          Z80MiniGame.asm:492
READ_FILE_TXT   = $0353 =   851          Z80MiniGame.asm:499
READ_FILE_TXT_L = $0361 =   865          Z80MiniGame.asm:513
READ_IIC_DE     = $0386 =   902          Z80MiniGame.asm:543
READ_MEM_FILES  = $0294 =   660          Z80MiniGame.asm:371 (unused)
READ_MEM_KEY    = $02C2 =   706          Z80MiniGame.asm:397 (unused)
READ_MEM_KEY_C  = $02EC =   748          Z80MiniGame.asm:420
READ_MEM_NEXT   = $0297 =   663          Z80MiniGame.asm:373
READ_MEM_STEP   = $0301 =   769          Z80MiniGame.asm:433
READ_MEM_STEP_L = $030C =   780          Z80MiniGame.asm:441
READ_NAME       = $02B4 =   692          Z80MiniGame.asm:388
REMOVE_PIXEL    = $0B7E =  2942          LCD.asm:1192
ROWS            = $0BC8 =  3016          LCD.asm:1311
RST00           = $0000 =     0          Z80MiniGame.asm:91
RST08           = $0008 =     8          Z80MiniGame.asm:98 (unused)
RST10           = $0010 =    16          Z80MiniGame.asm:104 (unused)
RST38           = $0038 =    56          Z80MiniGame.asm:110 (unused)
SAVE_COL        = $0B0F =  2831          LCD.asm:1096
SAVE_ROW        = $0AB0 =  2736          LCD.asm:1030
SAVE_VPORT      = $0AFA =  2810          LCD.asm:1079
SBUF            = $0780 =  1920          Z80MiniGame.asm:1090
SEND_A_TO_GLCD  = $0A55 =  2645          LCD.asm:955
SEND_CHAR_TO_GLCD = $09CD =  2509          LCD.asm:867
SEND_HL_TO_GLCD = $0A72 =  2674          LCD.asm:978
SEND_PART       = $0BAF =  2991          LCD.asm:1277
SEND_STRING_TO_GLCD = $0A3C =  2620          LCD.asm:935
SER_BT          = $00F8 =   248          LCD.asm:61 (unused)
SER_BYTE        = $0BA6 =  2982          LCD.asm:1269 (unused)
SER_SYNC        = $0BB4 =  2996          LCD.asm:1284
SETCY           = $05A9 =  1449          Z80MiniGame.asm:903
SET_BUF_CLEAR   = $09AC =  2476          LCD.asm:831
SET_BUF_NO_CLEAR = $09B4 =  2484          LCD.asm:836
SET_CURSOR      = $0A7E =  2686          LCD.asm:991
SET_GAMEOVER    = $0241 =   577          Z80MiniGame.asm:312
SET_GBUF        = $0911 =  2321          LCD.asm:700
SET_GR_MODE     = $0707 =  1799          LCD.asm:239
SET_TXT_MODE    = $0711 =  1809          LCD.asm:246
SHIFT_BIT       = $092A =  2346          LCD.asm:722
SHIFT_BUFFER    = $0AB4 =  2740          LCD.asm:1037
SHOW_MSG_EXE    = $0371 =   881          Z80MiniGame.asm:526
SHOW_MSG_IMG    = $0378 =   888          Z80MiniGame.asm:531
SHOW_MSG_TXT    = $037F =   895          Z80MiniGame.asm:536
SIOA_C          = $0002 =     2          Z80MiniGame.asm:60
SIOA_D          = $0000 =     0          Z80MiniGame.asm:59
SIOB_C          = $0003 =     3          Z80MiniGame.asm:62 (unused)
SIOB_D          = $0001 =     1          Z80MiniGame.asm:61 (unused)
SKIP_TBUF       = $0AC8 =  2760          LCD.asm:1048
SPACE           = $0020 =    32          LCD.asm:69
SPI_WR          = $0BB5 =  2997          LCD.asm:1294
SX              = $FB86 = 64390          Z80MiniGame.asm:1097
SY              = $FB87 = 64391          Z80MiniGame.asm:1098
SYSTEM_SP       = $FFF0 = 65520          Z80MiniGame.asm:77
TAB             = $0009 =     9          LCD.asm:65
TBUF            = $FB82 = 64386          Z80MiniGame.asm:1095
TEST_KEYS       = $046A =  1130          Z80MiniGame.asm:677
TGBUF           = $F780 = 63360          Z80MiniGame.asm:1093
TIMEOUT         = $2710 = 10000          Z80MiniGame.asm:84
TXCRLF          = $055C =  1372          Z80MiniGame.asm:828
UP              = $00B5 =   181          LCD.asm:62
VAR_GAMEOVER    = $FB9C = 64412          Z80MiniGame.asm:1115
VPORT           = $FB80 = 64384          Z80MiniGame.asm:1094
VTELA_X         = $007E =   126          Z80MiniGame.asm:257
VTELA_Y         = $003E =    62          Z80MiniGame.asm:258
V_DELAY_US      = $0007 =     7          LCD.asm:53
WELLCOME        = $13C6 =  5062          Z80MiniGame.asm:1065
WELLCOME_LCD    = $13E0 =  5088          Z80MiniGame.asm:1067
_end            = $FB9E = 64414          Z80MiniGame.asm:90 (unused)
_size           = $FB9E = 64414          Z80MiniGame.asm:90 (unused)
_z80_           = $0001 =     1          Z80MiniGame.asm:1 (unused)
check_keypad    = $0437 =  1079          Z80MiniGame.asm:651
conin           = $056D =  1389          Z80MiniGame.asm:845
conout          = $0563 =  1379          Z80MiniGame.asm:838
conoutA1        = $0564 =  1380          Z80MiniGame.asm:839
gameover_loop   = $026B =   619          Z80MiniGame.asm:337
kCPUClock       = $8000 =7372800          Z80MiniGame.asm:67
kDelayCnt       = $011A =   282          Z80MiniGame.asm:72
kDelayLP        = $001A =    26          Z80MiniGame.asm:69
kDelayOH        = $0024 =    36          Z80MiniGame.asm:68
kDelayTA        = $1CCC =  7372          Z80MiniGame.asm:70
kDelayTB        = $1CA8 =  7336          Z80MiniGame.asm:71
monitor         = $01E5 =   485          Z80MiniGame.asm:222
monitor0        = $01E9 =   489          Z80MiniGame.asm:225
monitor1        = $01EF =   495          Z80MiniGame.asm:230
msg_help        = $1349 =  4937          Z80MiniGame.asm:1047
prng16          = $0227 =   551          Z80MiniGame.asm:278
randomHL        = $0211 =   529          Z80MiniGame.asm:260
read_loop       = $02D8 =   728          Z80MiniGame.asm:411
seed1           = $1474 =  5236          Z80MiniGame.asm:1083
seed2           = $1476 =  5238          Z80MiniGame.asm:1084
set_collision   = $08E8 =  2280          LCD.asm:648
setup_serial    = $052F =  1327          Z80MiniGame.asm:782
start           = $01AC =   428          Z80MiniGame.asm:189
start_loop      = $027D =   637          Z80MiniGame.asm:347
waitForChar     = $056D =  1389          Z80MiniGame.asm:846


total time: 0.1278 sec.
no errors
