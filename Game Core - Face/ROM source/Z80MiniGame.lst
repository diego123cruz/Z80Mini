              	; --------------------------------------
              	; zasm: assemble "Z80MiniGame.asm"
              	; date: 2025-05-24 20:34:46
              	; --------------------------------------


              	; Z80Mini - GameCore
              	; 05/2025
              	; Requerimento: Placa base + Game core - Face.
              	;
              	;
              	;
              	;   ============== COMPILADOR ===================
              	;
              	;   Compilador (https://k1.spdns.de/Develop/Projects/zasm/Distributions/):
              	;
              	;       Win(CMD):           zasm.exe --z80 -w -u --bin  Z80MiniGame.asm
              	;       Win(Powershell):    ./zasm.exe --z80 -w -u --bin  Z80MiniGame.asm
              	;       Macos:              ./zasm --z80 -w -u --bin  Z80MiniGame.asm
              	;
              	;
              	;   =============== GRAVAÇÃO ====================
              	;
              	;     GRAVAÇÃO (32kb) (TL866 2 Plus - MacOS):
              	;	    minipro -p AT28C64B -w Z80MiniGame.rom -s	
              	;
              	;
              	;   =============== HARDWARE ====================
              	;         - CPU Z80@7.37280Mhz
              	;         - Rom 32k 0000h - 7FFFh
              	;         - Ram 32k 8000h - FFFFh
              	;			
              	;		  - Display Grafico - 70h
              	;		  		- 128x64
              	;         
              	;         - Ports:
              	;               - Onboard IN/OUT: 40H
              	;					- Controle - pullDown (Input)
              	;						- bit0 - A
              	;						- bit1 - B
              	;						- bit2 - Start
              	;						- bit3 - Select
              	;						- bit4 - Right
              	;						- bit5 - Down
              	;						- bit6 - Left
              	;						- bit7 - Up
              	;
              	;               - User IN/OUT: C0H
              	;
              	;   =============== LCD LIB ======================
              	;   ; Graphical LCD 128 x 64 Library
              	;   ------------------------------
              	;   By B. Chiha May-2023
              	;   https://github.com/bchiha/Z80_LCD_128x64_Graphics_Library/tree/
              	;
              	;
              	;
              	; -----------------------------------------------------------------------------
              	; PORTS
              	; -----------------------------------------------------------------------------
0070:         	LCDCTRL	    .EQU    $70
0071:         	LCDDATA     .EQU    $71
0040:         	GAMEPAD     .EQU    $40
              	; SIO/2 - 115200
0000:         	SIOA_D		.EQU	$00
0002:         	SIOA_C		.EQU	$02
0001:         	SIOB_D		.EQU	$01 ; Não usado
0003:         	SIOB_C		.EQU	$03 ; Não usado
              	
              	; -----------------------------------------------------------------------------
              	; H_Delay CONFIG
              	; -----------------------------------------------------------------------------
708000:         	kCPUClock:  .EQU 7372800       ;CPU clock speed in Hz
0024:         	kDelayOH:   .EQU 36             ;Overhead for each 1ms in Tcycles
001A:         	kDelayLP:   .EQU 26             ;Inner loop time in Tcycles
1CCC:         	kDelayTA:   .EQU kCPUClock / 1000 ;CPU clock cycles per millisecond
1CA8:         	kDelayTB:   .EQU kDelayTA - kDelayOH  ;Cycles required for inner loop
011A:         	kDelayCnt:  .EQU kDelayTB / kDelayLP  ;Loop counter for inner loop
              	
              	; -----------------------------------------------------------------------------
              	; SYSTEM SETTINGS
              	; -----------------------------------------------------------------------------
FFF0:         	SYSTEM_SP:	.EQU 	$FFF0	;INITIAL STACK POINTER
              	
              	
              	; -----------------------------------------------------------------------------
              	; I2C SETTINGS
              	; -----------------------------------------------------------------------------
00AE:         	I2CA_BLOCK: .EQU $AE            ;I2C device addess: 24LC256 (Copy from/to Mem)
2710:         	TIMEOUT:    .EQU 10000          ;Timeout loop counter
              	
              	
              	; -----------------------------------------------------------------------------
              	; INIT SYSTEM 
              	; -----------------------------------------------------------------------------
0000:         	    .ORG $0000
0000: F3      	RST00:	DI			    ;Disable INTerrupts
0001: C37B01  			JP	INIT		;Initialize Hardware and go
              	
              	;------------------------------------------------------------------------------
              	; TX a character over RS232 wait for TXDONE first.
              	;------------------------------------------------------------------------------
0004: FFFFFFFF	    .ORG $0008
0008: C3C804  	RST08:	JP	conout
              	
              	;------------------------------------------------------------------------------
              	; RX a character from buffer wait until char ready.
              	;------------------------------------------------------------------------------
000B: FFFFFFFF	    .ORG $0010
000F: FF      	
0010: C3D204  	RST10:		JP	conin
              	
              	; =========================================================
              	; Int 38h - Monitor 
              	; =========================================================
0013: FFFFFFFF		.org    $0038
0017: FF...   	
0038:         	RST38:
0038: F3      	    DI
0039: E5      		PUSH HL
003A: 2A97FB  	    LD HL, (INT_VEC)
003D: E9      	    JP (HL)
              	
              	; -----------------------------------------------------------------------------
              	; API
              	; -----------------------------------------------------------------------------
003E: FFFFFFFF		.ORG $0100 ; API POINTER
0042: FF...   	
              	; LCD
0100: C30906  	    JP INIT_LCD             ;Initalise the LCD
0103: C31E06  	    JP CLEAR_GBUF           ;Clear the Graphics Buffer
0106: C32E06  	    JP CLEAR_GR_LCD         ;Clear the Graphics LCD Screen
0109: C35506  	    JP CLEAR_TXT_LCD        ;Clear the Text LCD Screen
010C: C36C06  	    JP SET_GR_MODE          ;Set Graphics Mode
010F: C37606  	    JP SET_TXT_MODE         ;Set Text Mode
0112: C37B06  	    JP DRAW_BOX             ;Draw a rectangle between two points
0115: C3B606  	    JP DRAW_LINE            ;Draw a line between two points
0118: C36107  	    JP DRAW_CIRCLE          ;Draw a circle from Mid X,Y to Radius
011B: C33608  	    JP DRAW_PIXEL           ;Draw one pixel at X,Y
011E: C3A606  	    JP FILL_BOX             ;Draw a filled rectangle between two points
0121: C32808  	    JP FILL_CIRCLE          ;Draw a filled circle from Mid X,Y to Radius
0124: C38908  	    JP PLOT_TO_LCD          ;Display the Graphics Buffer to the LCD Screen
0127: C3BB08  	    JP PRINT_STRING         ;Print Text on the screen in a given row
012A: C3DD08  	    JP PRINT_CHARS          ;Print Characters on the screen in a given row and column
012D: C3FC08  	    JP DELAY_US             ;Microsecond delay for LCD updates
0130: C3FF08  	    JP DELAY_MS             ;Millisecond delay for LCD updates
0133: C30509  	    JP SET_BUF_CLEAR        ;Clear the Graphics buffer on after Plotting to the screen
0136: C30D09  	    JP SET_BUF_NO_CLEAR     ;Retain the Graphics buffer on after Plotting to the screen
0139: C34708  	    JP CLEAR_PIXEL          ;Remove a Pixel at X,Y
013C: C35908  	    JP FLIP_PIXEL           ;Flip a Pixel On/Off at X,Y
013F: C3F50A  	    JP LCD_INST             ;Send a parallel or serial instruction to LCD
0142: C3FA0A  	    JP LCD_DATA             ;Send a parallel or serial datum to LCD
0145: C30D0B  	    JP SER_SYNC             ;Send serial synchronise byte to LCD
0148: C3990A  	    JP DRAW_GRAPHIC         ;Draw an ASCII charcter or Sprite to the LCD
014B: C3910A  	    JP INV_GRAPHIC          ;Inverse graphics printing
014E: C31209  	    JP INIT_TERMINAL        ;Initialize the LCD for terminal emulation
0151: C32609  	    JP SEND_CHAR_TO_GLCD    ;Send an ASCII Character to the LCD
0154: C39509  	    JP SEND_STRING_TO_GLCD  ;Send an ASCII String to the LCD
0157: C3AE09  	    JP SEND_A_TO_GLCD       ;Send register A to the LCD
015A: C3CB09  	    JP SEND_HL_TO_GLCD      ;Send register HL to the LCD
015D: C3D709  	    JP SET_CURSOR           ;Set the graphics cursor
0160: C3880A  	    JP GET_CURSOR           ;Get the current cursor
0163: C38D0A  	    JP DISPLAY_CURSOR       ;Set Cursor on or off
0166: C34E05  	    JP DELAY_DE             ;Delay in milliseconds (DE in millis)
0169: C3A505  		JP LCD_PRINT_STRING		;Print string HL, end with 0 EX: "Test", $00
              		; I2C Board
016C: C32F11  	    JP I2C_Open              ;Start i2c (Device address in A)
016F: C33611  	    JP I2C_Close             ;Close i2c 
0172: C37611  	    JP I2C_Read              ;I2C Read
0175: C33911  	    JP I2C_Write             ;I2C Write
0178: C3EF11  		JP I2CLIST				 ;I2C List devices on lcd
              	
              	
              	
017B:         	INIT:
017B: 31F0FF  	    LD SP, SYSTEM_SP
              		; Init Serial
017E: CD9404  	    CALL setup_serial
0181: 211F13  		LD HL, WELLCOME
0184: CDBA04  	    CALL PRINT
              	
              		; Init LCD
0187: 116400  		LD DE, $0064 ; 100ms
018A: CD4E05  	    CALL DELAY_DE
              	
018D: CD1209  	    CALL INIT_TERMINAL
0190: CD6C06  	    CALL SET_GR_MODE
0193: CD0D09  	    CALL SET_BUF_NO_CLEAR
              	
0196: AF      		XOR A
0197: 329AFB  	    LD (CURSOR_MENU), A
              	
019A:         	start:
019A: CD1E06  		CALL CLEAR_GBUF
              	
019D: 010000  	    LD BC, $0000
01A0: CDD709  	    CALL SET_CURSOR
              	
01A3: AF      		XOR A
01A4: 113913  		LD DE, WELLCOME_LCD
01A7: CD9509  		CALL SEND_STRING_TO_GLCD
              	
01AA: CD8703  		CALL NEW_LINE_LCD
              	
01AD: 3A9AFB  	    LD A, (CURSOR_MENU)
01B0: FE00    	    CP 0
01B2: CD4703  	    CALL MENU1 
              	
01B5: 3A9AFB  	    LD A, (CURSOR_MENU)
01B8: FE01    	    CP 1
01BA: CD5703  	    CALL MENU2
              	
01BD: 3A9AFB  	    LD A, (CURSOR_MENU)
01C0: FE02    	    CP 2
01C2: CD6703  	    CALL MENU3
              	
01C5: 3A9AFB  	    LD A, (CURSOR_MENU)
01C8: FE03    	    CP 3
01CA: CD7703  	    CALL MENU4
              	
01CD: 218D03  		LD  HL, INT38
01D0: 2297FB  	    LD  (INT_VEC), HL
              	    ;IM  1
              	    ;EI
              	
01D3:         	monitor:
01D3: 21D301  		LD HL, monitor ; point to return to monitor
01D6: E5      		PUSH HL
01D7:         	monitor0:
01D7: CDC104  		CALL TXCRLF	; Entry point for Monitor, Normal	
01DA: 3E3E    		LD   A,'>'	; Get a ">"	
01DC: CF      		RST 08H		; print it
              	
01DD:         	monitor1:
01DD: D7      		RST 10H	; Get a character from serial
01DE: FE20    		CP   ' '	; <spc> or less? 	
01E0: 38FB    		JR   C, monitor1	; Go back
              	
01E2: FE3A    		CP   ':'	; ":"?
01E4: CA6305  		JP   Z,LOAD	; First character of a HEX load
              	
01E7: CF      		RST 08H	; Print char on console
              	
01E8: FE3F    		CP   '?'
01EA: CAB304  		JP   Z,HELP
              	
01ED: E65F    		AND  $5F	; Make character uppercase
              	
01EF: FE52    		CP   'R' 	; reset
01F1: CA0000  		JP   Z, RST00
              	
01F4: FE47    		CP   'G'
01F6: CAAD04  		JP   Z,GOTO
              	
01F9: 3E3F    		LD   A,'?'	; Get a "?"	
01FB: CF      		RST 08H		; Print it
              	
01FC: C3D701  	    jp monitor0
              	
              	
              	
01FF:         	LOAD_GAME:
01FF:         	READ_MEM_FILES:
01FF: 110000  	    LD DE, $0000 ; start "D"? File
0202:         	READ_MEM_NEXT:
0202: CDEB02  	    CALL READ_IIC_DE
0205: B7      	    OR A
0206: FE44    	    CP 'D'
0208: CA1702  	    JP Z, READ_FILE
020B: 216513  	    LD HL, MSG_EOF
020E: CDBB05  	    CALL LCD_CR
0211: CDA505  	    CALL LCD_PRINT_STRING
0214: 3E0D    	    LD A, CR
0216: C9      	    RET
              	
0217:         	READ_FILE:
0217: CDBB05  	    CALL LCD_CR ; new line
021A: CDBB05  	    CALL LCD_CR ; new line
021D: 0610    	    LD B, 16
021F:         	READ_NAME:
021F: 13      	    INC DE
0220: CDEB02  	    CALL READ_IIC_DE
0223: B7      	    OR A
0224: FE00    	    CP 0
0226: C4C105  	    CALL NZ, LCD_PRINT_A
0229: 05      	    DEC B
022A: C21F02  	    JP NZ, READ_NAME
              	
022D:         	READ_MEM_KEY:
              	    ; Show commands
022D: D5      	    PUSH DE
022E: 13      	    INC DE
022F: CDEB02  	    CALL READ_IIC_DE
0232: B7      	    OR A
0233: FE00    	    CP 0
0235: CCD602  	    CALL Z, SHOW_MSG_EXE
0238: FE01    	    CP 1
023A: CCDD02  	    CALL Z, SHOW_MSG_IMG
023D: FE02    	    CP 2
023F: CCE402  	    CALL Z, SHOW_MSG_TXT
0242: D1      	    POP DE
              	    ; wait command
0243:         	read_loop:
0243: DB40    	    IN A, (GAMEPAD)
0245: FE00    		cp 0
0247: CA4302  		JP Z, read_loop
024A: CB4F    	    bit 1, A ; Next - B
024C: C26902  	    JP    NZ, READ_MEM_STEP
024F: CB47    	    bit 0, A  ; key Enter, execute - A
0251: CA2D02  	    JP    Z, READ_MEM_KEY
              	    ;read type
0254: 13      	    INC DE
0255: CDEB02  	    CALL READ_IIC_DE
0258: B7      	    OR A
0259: FE00    	    CP 0
025B: CA8002  	    JP Z, READ_FILE_EXE
025E: FE01    	    CP 1
0260: CA9602  	    JP Z, READ_FILE_IMG
0263: FE02    	    CP 2
0265: CAB802  	    JP Z, READ_FILE_TXT
0268: C9      	    RET
              	
0269:         	READ_MEM_STEP:
0269: 13      	    INC DE ; type
026A: 13      	    INC DE ; size H
026B: CDEB02  	    CALL READ_IIC_DE
026E: 67      	    LD H, A
026F: 13      	    INC DE ; size L
0270: CDEB02  	    CALL READ_IIC_DE
0273: 6F      	    LD L, A
0274:         	READ_MEM_STEP_L:
0274: 13      	    INC DE ; step file
0275: 2B      	    DEC HL
0276: 7C      	    LD A, H
0277: B5      	    OR L
0278: C27402  	    JP NZ, READ_MEM_STEP_L
027B: 13      	    INC DE ; end
027C: 13      	    INC DE ; nex start
027D: C30202  	    JP READ_MEM_NEXT
              	
              	
0280:         	READ_FILE_EXE:
              	    ; read size H
0280: 13      	    INC DE
0281: CDEB02  	    CALL READ_IIC_DE
0284: 47      	    LD B, A
              	
              	    ; read size L
0285: 13      	    INC DE
0286: CDEB02  	    CALL READ_IIC_DE
0289: 4F      	    LD C, A
              	
028A: 13      	    INC DE ; first byte file
028B: 210080  	    LD HL, $8000 ; memory user
              	
028E: CD1E12  	    CALL I2C_MemRd
0291: E1      	    POP HL ; return
0292: C30080  	    JP $8000
0295: C9      	    RET
              	
0296:         	READ_FILE_IMG:
              	    ; read size H
0296: 13      	    INC DE
0297: CDEB02  	    CALL READ_IIC_DE
029A: 47      	    LD B, A
              	
              	    ; read size L
029B: 13      	    INC DE
029C: CDEB02  	    CALL READ_IIC_DE
029F: 4F      	    LD C, A
              	
02A0: 13      	    INC DE ; first byte file
02A1: 210080  	    LD HL, $8000 ; memory user
              	
02A4: CD1E12  	    CALL I2C_MemRd
              	
02A7: 2680    	    LD H, $80
02A9: 2E00    	    LD L, $00
02AB: CDF005  	    CALL LCD_IMAGE_128x64
              	
02AE:         	READ_FILE_IMG_K:
02AE: DB40    	    IN A, (GAMEPAD)
02B0: CB5F    	    bit 3, A
02B2: CAAE02  	    JP    Z, READ_FILE_IMG_K
02B5: 3E0C    	    LD A, CS
02B7: C9      	    RET
              	
02B8:         	READ_FILE_TXT:
02B8: CDB505  	    CALL LCD_CLEAR
              	
              	    ; read size H
02BB: 13      	    INC DE
02BC: CDEB02  	    CALL READ_IIC_DE
02BF: 47      	    LD B, A
              	
              	    ; read size L
02C0: 13      	    INC DE
02C1: CDEB02  	    CALL READ_IIC_DE
02C4: 4F      	    LD C, A
              	
02C5: 13      	    INC DE ; first byte file
02C6:         	READ_FILE_TXT_L:
02C6: CDEB02  	    CALL READ_IIC_DE
02C9: CDC105  	    CALL LCD_PRINT_A
02CC: 13      	    INC DE ; step file
02CD: 0B      	    DEC BC
02CE: 78      	    LD A, B
02CF: B1      	    OR C
02D0: C2C602  	    JP NZ, READ_FILE_TXT_L
02D3: 13      	    INC DE ; end
02D4: 13      	    INC DE ; next start    
02D5: C9      	    RET
              	
              	
02D6:         	SHOW_MSG_EXE:
02D6: 217713  	    LD HL, MSG_READFILE_EXE
02D9: CDA505  	    CALL LCD_PRINT_STRING
02DC: C9      	    RET
              	
02DD:         	SHOW_MSG_IMG:
02DD: 217C13  	    LD HL, MSG_READFILE_IMG
02E0: CDA505  	    CALL LCD_PRINT_STRING
02E3: C9      	    RET
              	
02E4:         	SHOW_MSG_TXT:
02E4: 218113  	    LD HL, MSG_READFILE_TXT
02E7: CDA505  	    CALL LCD_PRINT_STRING
02EA: C9      	    RET
              	
              	
              	; Read byte in i2c, address in DE, return byte in A
02EB:         	READ_IIC_DE:
02EB: C5      	    PUSH BC
02EC: D5      	    PUSH DE
02ED: E5      	    PUSH HL
02EE: 3EAE    	    LD   A, I2CA_BLOCK   ;I2C address to write to
02F0: CD2F11  	    CALL I2C_Open
02F3: 7A      	    LD   A, D           ;Address (hi) in I2C memory
02F4: CD3911  	    CALL I2C_Write      ;Write address
02F7: 7B      	    LD   A,E            ;Address (lo) in I2C memory
02F8: CD3911  	    CALL I2C_Write      ;Write address
02FB: 3EAF    	    LD   A,I2CA_BLOCK+1 ;I2C device to be read from
02FD: CD2F11  	    CALL I2C_Open       ;Open for read
0300: CD7611  	    CALL I2C_Read
0303: F5      	    PUSH AF
0304: CDAE11  	    CALL I2C_Stop       ;Generate I2C stop
0307: F1      	    POP AF
0308: E1      	    POP HL
0309: D1      	    POP DE
030A: C1      	    POP BC
030B: C9      	    RET
              	
              	
030C:         	KEYUP:
030C: DB40    	    IN A, (GAMEPAD)
030E: FE00    	    CP 0
0310: C20C03  	    JP NZ, KEYUP
0313: 3A9AFB  	    LD A, (CURSOR_MENU)
0316: FE00    	    CP 0
0318: CA2203  	    JP Z, KEYUP_RES
031B: 3D      	    DEC A
031C: 329AFB  	    LD (CURSOR_MENU), A
031F: C39A01  	    JP start
0322:         	KEYUP_RES:
0322: 3E03    	    LD A, 3
0324: 329AFB  	    LD (CURSOR_MENU), A
0327: C39A01  	    JP start
              	
032A:         	KEYDOWN:
032A: DB40    	    IN A, (GAMEPAD)
032C: FE00    	    CP 0
032E: C22A03  	    JP NZ, KEYDOWN
0331: 3A9AFB  	    LD A, (CURSOR_MENU)
0334: FE03    	    CP 3
0336: CA4003  	    JP Z, KEYDOWN_RES
0339: 3C      	    INC A
033A: 329AFB  	    LD (CURSOR_MENU), A
033D: C39A01  	    JP start
0340:         	KEYDOWN_RES:
0340: AF      	    XOR A
0341: 329AFB  	    LD (CURSOR_MENU), A
0344: C39A01  	    JP start
              	
0347:         	MENU1:
0347: C24F03  	    JP NZ, $+8
034A: 3E06    	    LD A, 6; >
034C: CD2609  	    CALL SEND_CHAR_TO_GLCD
034F: 118613  	    LD DE, MENU_LCD_1
0352: AF      	    XOR A
0353: CD9509  		CALL SEND_STRING_TO_GLCD
0356: C9      	    RET
              	
0357:         	MENU2:
0357: C25F03  	    JP NZ, $+8
035A: 3E06    	    LD A, 6; >
035C: CD2609  	    CALL SEND_CHAR_TO_GLCD
035F: 119313  	    LD DE, MENU_LCD_2
0362: AF      	    XOR A
0363: CD9509  		CALL SEND_STRING_TO_GLCD
0366: C9      	    RET
              	
0367:         	MENU3:
0367: C26F03  	    JP NZ, $+8
036A: 3E06    	    LD A, 6; >
036C: CD2609  	    CALL SEND_CHAR_TO_GLCD
036F: 11A413  	    LD DE, MENU_LCD_3
0372: AF      	    XOR A
0373: CD9509  		CALL SEND_STRING_TO_GLCD
0376: C9      	    RET
              	
0377:         	MENU4:
0377: C27F03  	    JP NZ, $+8
037A: 3E06    	    LD A, 6; >
037C: CD2609  	    CALL SEND_CHAR_TO_GLCD
037F: 11B013  	    LD DE, MENU_LCD_4
0382: AF      	    XOR A
0383: CD9509  		CALL SEND_STRING_TO_GLCD
0386: C9      	    RET
              	
              	
              	
0387:         	NEW_LINE_LCD:
0387: 3E0D    		LD A, CR
0389: CD2609  		CALL SEND_CHAR_TO_GLCD
038C: C9      		RET
              	
              	
038D:         	INT38:
038D: F3      		DI
038E: F5      		PUSH AF
038F: DB40    		IN A, (GAMEPAD)
0391: CA9703  		JP Z, INT38_END
0394: 3299FB  		LD (GAMEPAD_KEY), A
0397:         	INT38_END:
0397: F1      		POP AF
0398: E1      		POP HL
0399: FB      		EI
039A: ED4D    		RETI
              	
039C:         	check_keypad:
039C: DB40    		in A, (GAMEPAD)
039E: CB7F    	    BIT 7, A ; up
03A0: C20C03  	    JP NZ, KEYUP
03A3: CB6F    	    BIT 5, A ; down
03A5: C22A03  	    JP NZ, KEYDOWN
03A8: CB47    		BIT 0, A ; A
03AA: C2AE03  	    JP NZ, KEY_A
03AD: C9      		RET
              	
03AE:         	KEY_A:
03AE: DB40    	    IN A, (GAMEPAD)
03B0: FE00    	    CP 0
03B2: C2AE03  	    JP NZ, KEY_A
03B5: 3A9AFB  		LD A, (CURSOR_MENU)
03B8: FE00    		CP 0
03BA: CA0080  		JP Z, $8000 ; Start game JP $8000
03BD: FE01    		CP 1
03BF: CAFF01  		JP Z, LOAD_GAME
03C2: FE02    		CP 2
03C4: CACF03  		JP Z, TEST_KEYS
03C7: FE03    		CP 3
03C9: CA0000  		JP Z, 0 ; reset
03CC: C30000  		JP 0
              	
              	
03CF:         	TEST_KEYS:
03CF: CD1E06  	    CALL CLEAR_GBUF
              	
              	    ; select
03D2: 0638    	    LD B, 56
03D4: 0E07    	    LD C, 7
03D6: 1E06    	    LD E, $06
03D8: DB40    	    IN A, ($40)
03DA: CB5F    	    BIT 3, A
03DC: CAE503  	    JP Z, $+9
03DF: CD2808  	    CALL FILL_CIRCLE
03E2: C3E803  	    JP $+6
03E5: CD6107  	    CALL DRAW_CIRCLE
              	    
              	    ; Start
03E8: 0649    	    LD B, 73
03EA: 0E07    	    LD C, 7
03EC: 1E06    	    LD E, $06
03EE: DB40    	    IN A, ($40)
03F0: CB57    	    BIT 2, A
03F2: CAFB03  	    JP Z, $+9
03F5: CD2808  	    CALL FILL_CIRCLE
03F8: C3FE03  	    JP $+6
03FB: CD6107  	    CALL DRAW_CIRCLE
              	    
              	
              	    ; A
03FE: 0659    	    LD B, 89
0400: 0E28    	    LD C, 40
0402: 1E06    	    LD E, $06
0404: DB40    	    IN A, ($40)
0406: CB47    	    BIT 0, A
0408: CA1104  	    JP Z, $+9
040B: CD2808  	    CALL FILL_CIRCLE
040E: C31404  	    JP $+6
0411: CD6107  	    CALL DRAW_CIRCLE
              	    
              	    
              	    ; B
0414: 0669    	    LD B, 105
0416: 0E18    	    LD C, 24
0418: 1E06    	    LD E, $06
041A: DB40    	    IN A, ($40)
041C: CB4F    	    BIT 1, A
041E: CA2704  	    JP Z, $+9
0421: CD2808  	    CALL FILL_CIRCLE
0424: C32A04  	    JP $+6
0427: CD6107  	    CALL DRAW_CIRCLE
              	    
              	    
              	    ; Up
042A: 0618    	    LD B, 24
042C: 0E18    	    LD C, 24
042E: 1E06    	    LD E, $06
0430: DB40    	    IN A, ($40)
0432: CB7F    	    BIT 7, A
0434: CA3D04  	    JP Z, $+9
0437: CD2808  	    CALL FILL_CIRCLE
043A: C34004  	    JP $+6
043D: CD6107  	    CALL DRAW_CIRCLE
              	    
              	    ; Down
0440: 0618    	    LD B, 24
0442: 0E39    	    LD C, 57
0444: 1E06    	    LD E, $06
0446: DB40    	    IN A, ($40)
0448: CB6F    	    BIT 5, A
044A: CA5304  	    JP Z, $+9
044D: CD2808  	    CALL FILL_CIRCLE
0450: C35604  	    JP $+6
0453: CD6107  	    CALL DRAW_CIRCLE
              	    
              	    ; Left
0456: 0607    	    LD B, 7
0458: 0E29    	    LD C, 41
045A: 1E06    	    LD E, $06
045C: DB40    	    IN A, ($40)
045E: CB77    	    BIT 6, A
0460: CA6904  	    JP Z, $+9
0463: CD2808  	    CALL FILL_CIRCLE
0466: C36C04  	    JP $+6
0469: CD6107  	    CALL DRAW_CIRCLE
              	    
              	    ; Right
046C: 0628    	    LD B, 40
046E: 0E28    	    LD C, 40
0470: 1E06    	    LD E, $06
0472: DB40    	    IN A, ($40)
0474: CB67    	    BIT 4, A
0476: CA7F04  	    JP Z, $+9
0479: CD2808  	    CALL FILL_CIRCLE
047C: C38204  	    JP $+6
047F: CD6107  	    CALL DRAW_CIRCLE
              	    
0482: CD8908  		CALL PLOT_TO_LCD
              	
              		; check select+start to exit
0485: DB40    	    IN A, (GAMEPAD)
0487: CB57    	    BIT 2, A
0489: CACF03  		JP Z, TEST_KEYS
048C: CB5F    	    BIT 3, A
048E: CACF03  	    JP Z, TEST_KEYS
0491: C37B01  	    jp INIT
              	
              	
0494:         	setup_serial:
              	    ;	Initialise SIO/2 A
0494: 3E04    		LD	A,$04
0496: D302    		OUT	(SIOA_C),A
0498: 3EC4    		LD	A,$C4
049A: D302    		OUT	(SIOA_C),A
              	
049C: 3E03    		LD	A,$03
049E: D302    		OUT	(SIOA_C),A
04A0: 3EE1    		LD	A,$E1
04A2: D302    		OUT	(SIOA_C),A
              	
04A4: 3E05    		LD	A,$05
04A6: D302    		OUT	(SIOA_C),A
04A8: 3E68    		LD	A, $68
04AA: D302    		OUT	(SIOA_C),A
04AC: C9      	    RET
              	
              	
              	
              	
              	; GOTO command
04AD:         	GOTO:
04AD: CD0405  		CALL GETHL		; ENTRY POINT FOR <G>oto addr. Get XXXX from user.
04B0: D8      		RET  C			; Return if invalid       	
04B1: E5      		PUSH HL
04B2: C9      		RET			; Jump to HL address value
              	
              	
              	; HELP
04B3:         	HELP:
04B3: 21A212  		LD HL, msg_help
04B6: CDBA04  		CALL PRINT
04B9: C9      		RET
              	
              	
              	;------------------------------------------------------------------------------
              	; Print string of characters to Serial A until byte=$00, WITH CR, LF
              	;------------------------------------------------------------------------------
04BA: 7E      	PRINT:  LD   A,(HL)	; Get character
04BB: B7      			OR   A		; Is it $00 ?
04BC: C8      			RET  Z		; Then RETurn on terminator
04BD: CF      			RST  08H	; Print it
04BE: 23      			INC  HL		; Next Character
04BF: 18F9    			JR   PRINT	; Continue until $00
              	
04C1: 3E0D    	TXCRLF:	LD   A,$0D	; 
04C3: CF      			RST  08H	; Print character 
04C4: 3E0A    			LD   A,$0A	; 
04C6: CF      			RST  08H	; Print character
04C7: C9      			RET
              	
              	;------------------------------------------------------------------------------
              	; Console output routine - Serial
              	; Output port to send a character.
              	;------------------------------------------------------------------------------
04C8: F5      	conout:		PUSH	AF		; Store character
04C9: CDE104  	conoutA1:	CALL	CKSIOA		; See if SIO channel A is finished transmitting
04CC: 28FB    			JR	Z, conoutA1	; Loop until SIO flag signals ready
04CE: F1      			POP	AF		; RETrieve character
04CF: D300    			OUT	(SIOA_D),A	; OUTput the character
04D1: C9      			RET
              	
04D2:         	conin:
04D2:         	waitForChar:
04D2: CD9C03  		CALL check_keypad ; Enquanto aguarda serial, verifica check_keypad
              		; Check if there is a char in channel A
04D5: 97      		SUB	A
04D6: D302    		OUT 	(SIOA_C),A
04D8: DB02    		IN   	A,(SIOA_C)	; Status byte D2=TX Buff Empty, D0=RX char ready	
04DA: 0F      		RRCA			; Rotates RX status into Carry Flag,	
04DB: 30F5    		JR	NC, waitForChar
04DD: DB00    		IN	A,(SIOA_D)
04DF: B7      		OR A ; clear carry
04E0: C9      		RET
              		
              	
04E1:         	CKSIOA:
04E1: 97      			SUB	A
04E2: D302    			OUT 	(SIOA_C),A
04E4: DB02    			IN   	A,(SIOA_C)	; Status byte D2=TX Buff Empty, D0=RX char ready	
04E6: 0F      			RRCA			; Rotates RX status into Carry Flag,	
04E7: CB4F    			BIT  	1,A		; Set Zero flag if still transmitting character	
04E9: C9      	        RET
              	
              	
              	;------------------------------------------------------------------------------
              	; Get a character from the console, must be $20-$7F to be valid (no control characters)
              	; <Ctrl-c> and <SPACE> breaks with the Zero Flag set
              	;------------------------------------------------------------------------------	
04EA: D7      	GETCHR	RST 10H	; RX a Character
04EB: FE03    			CP   $03	; <ctrl-c> User break?
04ED: C8      			RET  Z			
04EE: FE20    			CP   $20	; <space> or better?
04F0: 38F8    			JR   C,GETCHR	; Do it again until we get something usable
04F2: C9      			RET
              	
              	;------------------------------------------------------------------------------
              	; Gets two ASCII characters from the console (assuming them to be HEX 0-9 A-F)
              	; Moves them into B and C, converts them into a byte value in A and updates a
              	; Checksum value in E
              	;------------------------------------------------------------------------------
04F3: CDEA04  	GET2	CALL GETCHR	; Get us a valid character to work with
04F6: 47      			LD   B,A	; Load it in B
04F7: CDEA04  			CALL GETCHR	; Get us another character
04FA: 4F      			LD   C,A	; load it in C
04FB: CD3205  			CALL BCTOA	; Convert ASCII to byte
04FE: 4F      			LD   C,A	; Build the checksum
04FF: 7B      			LD   A,E
0500: 91      			SUB  C		; The checksum should always equal zero when checked
0501: 5F      			LD   E,A	; Save the checksum back where it came from
0502: 79      			LD   A,C	; Retrieve the byte and go back
0503: C9      			RET
              	
              	;------------------------------------------------------------------------------
              	; Gets four Hex characters from the console, converts them to values in HL
              	;------------------------------------------------------------------------------
0504: 210000  	GETHL		LD   HL,$0000	; Gets xxxx but sets Carry Flag on any Terminator
0507: CD4B05  			CALL ECHO	; RX a Character
050A: FE0D    			CP   $0D	; <CR>?
050C: 200E    			JR   NZ,GETX2	; other key		
050E: 37      	SETCY		SCF		; Set Carry Flag
050F: C9      			RET             ; and Return to main program		
              	;------------------------------------------------------------------------------
              	; This routine converts last four hex characters (0-9 A-F) user types into a value in HL
              	; Rotates the old out and replaces with the new until the user hits a terminating character
              	;------------------------------------------------------------------------------
0510: 210000  	GETX		LD   HL,$0000	; CLEAR HL
0513: CD4B05  	GETX1		CALL ECHO	; RX a character from the console
0516: FE0D    			CP   $0D	; <CR>
0518: C8      			RET  Z		; quit
0519: FE2C    			CP   $2C	; <,> can be used to safely quit for multiple entries
051B: C8      			RET  Z		; (Like filling both DE and HL from the user)
051C: FE03    	GETX2		CP   $03	; Likewise, a <ctrl-C> will terminate clean, too, but
051E: 28EE    			JR   Z,SETCY	; It also sets the Carry Flag for testing later.
0520: 29      			ADD  HL,HL	; Otherwise, rotate the previous low nibble to high
0521: 29      			ADD  HL,HL	; rather slowly
0522: 29      			ADD  HL,HL	; until we get to the top
0523: 29      			ADD  HL,HL	; and then we can continue on.
0524: D630    			SUB  $30	; Convert ASCII to byte	value
0526: FE0A    			CP   $0A	; Are we in the 0-9 range?
0528: 3802    			JR   C,GETX3	; Then we just need to sub $30, but if it is A-F
052A: D607    			SUB  $07	; We need to take off 7 more to get the value down to
052C: E60F    	GETX3		AND  $0F	; to the right hex value
052E: 85      			ADD  A,L	; Add the high nibble to the low
052F: 6F      			LD   L,A	; Move the byte back to A
0530: 18E1    			JR   GETX1	; and go back for next character until he terminates
              	;------------------------------------------------------------------------------
              	; Convert ASCII characters in B C registers to a byte value in A
              	;------------------------------------------------------------------------------
0532: 78      	BCTOA		LD   A,B	; Move the hi order byte to A
0533: D630    			SUB  $30	; Take it down from Ascii
0535: FE0A    			CP   $0A	; Are we in the 0-9 range here?
0537: 3802    			JR   C,BCTOA1	; If so, get the next nybble
0539: D607    			SUB  $07	; But if A-F, take it down some more
053B: 07      	BCTOA1		RLCA		; Rotate the nybble from low to high
053C: 07      			RLCA		; One bit at a time
053D: 07      			RLCA		; Until we
053E: 07      			RLCA		; Get there with it
053F: 47      			LD   B,A	; Save the converted high nybble
0540: 79      			LD   A,C	; Now get the low order byte
0541: D630    			SUB  $30	; Convert it down from Ascii
0543: FE0A    			CP   $0A	; 0-9 at this point?
0545: 3802    			JR   C,BCTOA2	; Good enough then, but
0547: D607    			SUB  $07	; Take off 7 more if it's A-F
0549: 80      	BCTOA2		ADD  A,B	; Add in the high order nybble
054A: C9      			RET
              	
              	;------------------------------------------------------------------------------
              	; Get a character and echo it back to the user
              	;------------------------------------------------------------------------------
054B: D7      	ECHO	RST 10H ; rx
054C: CF      			RST 08H ; tx
054D: C9      			RET
              	
              	
              	
              	; **********************************************************************
              	; Delay by DE milliseconds
              	;   On entry: DE = Delay time in milliseconds
              	;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved
054E: F5      	DELAY_DE:    	PUSH AF
054F: C5      	            PUSH BC
0550: D5      	            PUSH DE
              	; 1 ms loop, DE times...        ;[=36]   [=29]    Overhead for each 1ms
0551: 011A01  	LoopDE:    LD   BC, kDelayCnt   ;[10]    [9]
              	; Inner loop, BC times...       ;[=26]   [=20]    Loop time in Tcycles
0554: 0B      	LoopBC:    DEC  BC             ;[6]     [4]
0555: 79      	            LD   A,C            ;[4]     [4]
0556: B0      	            OR   B              ;[4]     [4]
0557: C25405  	            JP   NZ,LoopBC     ;[12/7]  [8/6] 
              	; Have we looped once for each millisecond requested?
055A: 1B      	            DEC  DE             ;[6]     [4]
055B: 7B      	            LD   A,E            ;[4]     [4]
055C: B2      	            OR   D              ;[4]     [4]
055D: 20F2    	            JR   NZ, LoopDE     ;[12/7]  [8/6]
055F: D1      	            POP  DE
0560: C1      	            POP  BC
0561: F1      	            POP  AF
0562: C9      	            RET
              	
              	
              	
              	;------------------------------------------------------------------------------
              	; LOAD Intel Hex format file from the console.
              	; [Intel Hex Format is:
              	; 1) Colon (Frame 0)
              	; 2) Record Length Field (Frames 1 and 2)
              	; 3) Load Address Field (Frames 3,4,5,6)
              	; 4) Record Type Field (Frames 7 and 8)
              	; 5) Data Field (Frames 9 to 9+2*(Record Length)-1
              	; 6) Checksum Field - Sum of all byte values from Record Length to and 
              	;   including Checksum Field = 0 ]
              	;------------------------------------------------------------------------------	
0563: 1E00    	LOAD:	LD   E,0	; First two Characters is the Record Length Field
0565: CDF304  			CALL GET2	; Get us two characters into BC, convert it to a byte <A>
0568: 57      			LD   D,A	; Load Record Length count into D
0569: CDF304  			CALL GET2	; Get next two characters, Memory Load Address <H>
056C: 67      			LD   H,A	; put value in H register.
056D: CDF304  			CALL GET2	; Get next two characters, Memory Load Address <L>
0570: 6F      			LD   L,A	; put value in L register.
0571: CDF304  			CALL GET2	; Get next two characters, Record Field Type
0574: FE01    			CP   $01	; Record Field Type 00 is Data, 01 is End of File
0576: 2009    			JR   NZ,LOAD2	; Must be the end of that file
0578: CDF304  			CALL GET2	; Get next two characters, assemble into byte
057B: 7B      			LD   A,E	; Recall the Checksum byte
057C: A7      			AND  A		; Is it Zero?
057D: 281E    			JR   Z,LOAD00	; Print footer reached message
057F: 1815    			JR   LOADERR	; Checksums don't add up, Error out
              			
0581: 7A      	LOAD2		LD   A,D	; Retrieve line character counter	
0582: A7      			AND  A		; Are we done with this line?
0583: 280B    			JR   Z,LOAD3	; Get two more ascii characters, build a byte and checksum
0585: CDF304  			CALL GET2	; Get next two chars, convert to byte in A, checksum it
0588: 77      			LD   (HL),A	; Move converted byte in A to memory location
0589: 23      			INC  HL		; Increment pointer to next memory location	
058A: 3E2E    			LD   A,'.'	; Print out a "." for every byte loaded
058C: CF      			RST  08H	;
058D: 15      			DEC  D		; Decrement line character counter
058E: 18F1    			JR   LOAD2	; and keep loading into memory until line is complete
              			
0590: CDF304  	LOAD3		CALL GET2	; Get two chars, build byte and checksum
0593: 7B      			LD   A,E	; Check the checksum value
0594: A7      			AND  A		; Is it zero?
0595: C8      			RET  Z
              	
0596: 21FD12  	LOADERR		LD   HL,CKSUMERR  ; Get "Checksum Error" message
0599: CDBA04  			CALL PRINT	; Print Message from (HL) and terminate the load
059C: C9      			RET
              	
059D: 210E13  	LOAD00  	LD   HL,LDETXT	; Print load complete message
05A0: CDBA04  			CALL PRINT
05A3: C9      			RET
              	
              	
              	
              	
              	
              	#include "LCD.asm"
              	; Graphical LCD 128 x 64 Library
              	; ------------------------------
              	; By B. Chiha May-2023
              	;
              	; This is a native Z80 Graphics library to be used with 128x64 Graphical LCD Screens
              	;
              	; There are a few variants of these LCD screens, but they must all must use the ST7920
              	; LCD Controller.  The LCD Screen that I used is the QC12864B.  This screen has two
              	; ST7921 Panels (128 x 32) stacked one above the other.  Other LCD boards might not do
              	; this.  If so the PLOT_TO_LCD function will need to be modified. (future work)
              	;
              	; These screens have DDRAM (Graphics) and CGRAM (Text) areas.  Both RAM areas can 
              	; be displayed at the same time.
              	;
              	; The Pinout for the QC12864B board is as follows:
              	;
              	; Pin	Name	Desc                    Serial  Parallel
              	; ---   ----    -------------           ------  -------------
              	; 1     VSS     Ground                  GND     GND
              	; 2     VDD     Power                   5v      5v
              	; 3     V0      Contrast                N/A     N/A
              	; 4     D/I     IR/DR (CS)              5v      A7
              	; 5     R/W     R/W (SID)               D0      RD (inverted)
              	; 6     E       Enable (SCLK)           D1      Port 7 (inverted)
              	; 7     DB0     Data                    N/A     D0
              	; 8     DB1     Data                    N/A     D1
              	; 9     DB2     Data                    N/A     D2
              	; 10    DB3     Data                    N/A     D3
              	; 11    DB4     Data                    N/A     D4
              	; 12    DB5     Data                    N/A     D5
              	; 13    DB6     Data                    N/A     D6
              	; 14    DB7     Data                    N/A     D7
              	; 15    PSB     Serial/Para             GND     5v
              	; 16    NC
              	; 17    RST     Reset                   RST     RST
              	; 18    VEE     LCD Drive               N/A     N/A
              	; 19    A       Backlight               5v/NC   5v/NC
              	; 20    K       Backlight               GND/NC  GND/NC
              	;
              	;
              	;        ORG 2000H               ;Start location
              	        
              	; Modifiable values.  Thse three values can be modified to suit your own set up
              	; LCD_IR and LCD_DR are the output ports to send an Instruction or Data value.
              	; V_DELAY_US is the minimum delay needed for a command to be processed by the
              	; LCD board.  If only some of the data is being sent, make this value larger
              	        
              	;Port 7 on TEC is connected to LCD Enable (Pin 6)
              	;A7 is connected to Register select (Pin 4).  (A7=0 for Instruction, A7=1 for Data)
0070:         	LCD_IR:	EQU 70H         ;Instruction Register
0071:         	LCD_DR:	EQU 71H         ;Data Register (A7)
0000:         	LCD_SER: EQU 00H        ;Serial Port if used
0010:         	V_DELAY_US: EQU $0010   ;Delay for 76us on your system $0004
              	
              	;Serial or Parallel communications to the LCD Screen.  Comment one of 
              	;the labels below based on the LCD connections. 00H = FALSE, 01H = TRUE
              	;COMMS_MODE: EQU 00H     ;Using PARALLEL Data connection
              	;COMMS_MODE: EQU 01H     ;Using SERIAL Data connection
              	
              	; Dont need to modify anything else below.
00F8:         	SER_BT: EQU 11111000B           ;Serial Synchronisation Byte
00B5:         	UP:     EQU $B5                 ; Up Arrow, change Z80 Mini
00B6:         	DN:     EQU $B6                 ; Down Arrow, change Z80Mini
0008:         	BKSP:   EQU 08H                 ; Back space 08H
0009:         	TAB:    EQU 09H                 ; Horizontal TAB
000A:         	LF:     EQU 0AH                 ; Line feed
000C:         	CS:     EQU 0CH                 ; Clear screen
000D:         	CR:     EQU 0DH                 ; Carriage return
0020:         	SPACE:  EQU 20H                 ; Space
008F:         	CURSOR: EQU 8FH                 ; Cursor
007F:         	DEL     EQU    7FH              ; Delete
05A4: 00      	BDEL:     DB    00H
0003:         	CTRLC       .EQU    03H             ; Control "C"
              	
              	;-----------------
              	; LCD_PRINT_STRING
              	; Entry: HL
              	; String terminada com 0
              	;-----------------
05A5:         	LCD_PRINT_STRING:
05A5: F5      	        PUSH AF
05A6: C5      		PUSH BC
05A7: D5      	        PUSH DE
05A8: E5      	        PUSH HL
05A9: 3E00    	        LD A, 0 ; terminador da string..
05AB: 545D    	        LD DE, HL
05AD: CD9509  		CALL SEND_STRING_TO_GLCD
05B0: E1      	        POP HL
05B1: D1      	        POP DE
05B2: C1      	        POP BC 
05B3: F1      	        POP AF
05B4: C9      		RET
              	
              	
              	;-----------------
              	; Claer screen - reset terminal
              	;-----------------
05B5:         	LCD_CLEAR:
05B5: 3E0C    	        LD A, CS
05B7: CDC105  	        CALL LCD_PRINT_A
05BA: C9      	        RET
              	        
              	;-----------------
              	; NEW LINE
              	;-----------------
05BB:         	LCD_CR:
05BB: 3E0D    		LD A, CR
05BD: CDC105  		CALL LCD_PRINT_A
05C0: C9      		RET
              	
              	;-----------------
              	; LCD_PRINT_A
              	; Destroy only AF
              	;-----------------
05C1:         	LCD_PRINT_A:
05C1: F5      	        PUSH AF
05C2: C5      		PUSH BC
05C3: D5      	        PUSH DE
05C4: E5      	        PUSH HL
              	        
              	        ; check delete (MSBasic)
05C5: F5      	        PUSH AF
05C6: 3AA405  	        LD A, (BDEL)
05C9: B7      	        or a
05CA: FEFF    	        CP $FF
05CC: CCE505  	        call z, DELETE_CHAR
05CF: F1      	        POP AF
05D0: B7      	        or a
05D1: FE00    	        CP $0
05D3: 2008    	        jr nz, LCD_PRINT_A_OK
05D5: 3EFF    	        LD A, $FF ; delete proximo char
05D7: 32A405  	        LD (BDEL), A
05DA: C3E005  	        jp LCD_PRINT_A_FIM
05DD:         	LCD_PRINT_A_OK:
05DD: CD2609  		CALL SEND_CHAR_TO_GLCD
05E0:         	LCD_PRINT_A_FIM:
05E0: E1      	        POP HL
05E1: D1      	        POP DE
05E2: C1      	        POP BC 
05E3: F1      	        POP AF
05E4: C9      		RET
              	
05E5:         	DELETE_CHAR:
05E5: F1      	        POP AF ; AF
05E6: E1      	        POP HL ; CALL
05E7: AF      	        XOR A
05E8: 32A405  	        LD (BDEL), A
              	        
05EB: 3E7F    	        LD A, DEL ; delete char
05ED: C3DD05  	        JP LCD_PRINT_A_OK
              	
              	;-----------------
              	; LCD_IMAGE_128x64 - Print image 128x64, CURSOR 0,0
              	; Entry: HL
              	;-----------------
05F0:         	LCD_IMAGE_128x64: 
05F0: F5      	        PUSH AF
05F1: C5      		PUSH BC
05F2: D5      	        PUSH DE
05F3: E5      	        PUSH HL
05F4: 010000  	        LD BC, $0000
05F7: CDD709  	        CALL SET_CURSOR
05FA: 0680    	        LD B, 128
05FC: 0E40    	        LD C, 64
05FE: CDAC0A  		CALL PLOT_GRAPHIC
0601: CD8908  	        CALL PLOT_TO_LCD
0604: E1      	        POP HL
0605: D1      	        POP DE
0606: C1      	        POP BC 
0607: F1      	        POP AF
0608: C9      		RET
              	
              	
              	
              	; Initialise LCD
0609:         	INIT_LCD:
0609: 21250B  	        LD HL, INIT_BASIC       ;POINT HL TO LCD INITIALIZE TABLE
060C: 0606    	        LD B, 06H               ;B=4 BYTES
060E:         	NEXT_CMD:
060E: 7E      	        LD A, (HL)
060F: CDF50A  	        CALL LCD_INST
0612: 23      	        INC HL
0613: 10F9    	        DJNZ NEXT_CMD
0615: 118002  	        LD DE, $0280            ;1.6 ms $0140@4Mhz
0618: CDFF08  	        CALL DELAY_MS
              	        
061B: CD2E06  	        CALL CLEAR_GR_LCD
              	        
              	; Clears the Graphics Memory Buffer
061E:         	CLEAR_GBUF:
061E: 2A80FB  	        LD HL, (VPORT)
0621: ED5B80FB	        LD DE, (VPORT)
0625: 13      	        INC DE
0626: AF      	        XOR A
0627: 77      	        LD (HL), A
0628: 01FF03  	        LD BC, 03FFH
062B: EDB0    	        LDIR
062D: C9      	        RET
              	        
              	; Clears the Graphics LCD Buffer
062E:         	CLEAR_GR_LCD:
062E: CD6C06  	        CALL SET_GR_MODE
0631: 0E00    	        LD C, 00H
0633:         	CLR_X:
0633: 3E80    	        LD A, 80H
0635: B1      	        OR C
0636: CDF50A  	        CALL LCD_INST
0639: 3E80    	        LD A, 80H
063B: CDF50A  	        CALL LCD_INST
063E: 3E02    	        LD A, 02H 
0640: CD0D0B  	        CALL SER_SYNC           ;Data Block Sync
0643: AF      	        XOR A                   ;Clear Byte
0644: 0610    	        LD B, 10H
0646:         	CLR_Y:
0646: CDFA0A  	        CALL LCD_DATA
0649: CDFA0A  	        CALL LCD_DATA
064C: 10F8    	        DJNZ CLR_Y
064E: 0C      	        INC C
064F: 79      	        LD A, C
0650: FE20    	        CP 20H
0652: 20DF    	        JR NZ, CLR_X        
0654: C9      	        RET
              	
              	; Clears the ASCII Text LCD
0655:         	CLEAR_TXT_LCD:
0655: CD7606  	        CALL SET_TXT_MODE
0658: 3E80    	        LD A, 80H
065A: CDF50A  	        CALL LCD_INST
065D: 3E02    	        LD A, 02H 
065F: CD0D0B  	        CALL SER_SYNC           ;Data Block Sync
0662: 0640    	        LD B, 40H
0664:         	CLR_ROWS:
0664: 3E20    	        LD A,  " "
0666: CDFA0A  	        CALL LCD_DATA
0669: 10F9    	        DJNZ CLR_ROWS
066B: C9      	        RET
              	        
              	; Set Graphics Mode
066C:         	SET_GR_MODE:
066C: 3E34    	        LD A, 34H
066E: CDF50A  	        CALL LCD_INST
0671: 3E36    	        LD A, 36H
0673: C3F50A  	        JP LCD_INST
              	        
              	; Set Text Mode
0676:         	SET_TXT_MODE:
0676: 3E30    	        LD A, 30H
0678: C3F50A  	        JP LCD_INST
              	        
              	;Draw Box
              	;Inputs: BC = X0,Y0
              	;        DE = X1,Y1
              	;Destroys: HL
067B:         	DRAW_BOX:
067B: C5      	        PUSH BC
067C:         	GTOP:
067C: CD3608  	        CALL DRAW_PIXEL
067F: 7A      	        LD A, D
0680: 04      	        INC B
0681: B8      	        CP B
0682: 30F8    	        JR NC, GTOP
0684: C1      	        POP BC
              	        
0685: C5      	        PUSH BC
0686: 4B      	        LD C, E
0687:         	GBOTTOM:
0687: CD3608  	        CALL DRAW_PIXEL
068A: 7A      	        LD A, D
068B: 04      	        INC B
068C: B8      	        CP B
068D: 30F8    	        JR NC, GBOTTOM
068F: C1      	        POP BC
              	        
0690: C5      	        PUSH BC
0691:         	GLEFT:
0691: CD3608  	        CALL DRAW_PIXEL
0694: 7B      	        LD A, E
0695: 0C      	        INC C
0696: B9      	        CP C
0697: 30F8    	        JR NC, GLEFT
0699: C1      	        POP BC
              	        
069A: C5      	        PUSH BC
069B: 42      	        LD B, D
069C:         	GRIGHT:
069C: CD3608  	        CALL DRAW_PIXEL
069F: 7B      	        LD A, E
06A0: 0C      	        INC C
06A1: B9      	        CP C
06A2: 30F8    	        JR NC, GRIGHT
06A4: C1      	        POP BC
06A5: C9      	        RET
              	        
              	;Fill Box
              	;Draws vertical lines from X0,Y0 to X0,Y1 and increase X0 to X1 until X0=X1
              	;Inputs: BC = X0,Y0
              	;        DE = X1,Y1
              	;Destroys: HL
06A6:         	FILL_BOX:
06A6: C5      	        PUSH BC
06A7:         	NEXT_PIXEL:
06A7: CD3608  	        CALL DRAW_PIXEL
06AA: 7B      	        LD A, E
06AB: 0C      	        INC C
06AC: B9      	        CP C
06AD: 30F8    	        JR NC, NEXT_PIXEL
06AF: C1      	        POP BC
06B0: 7A      	        LD A, D
06B1: 04      	        INC B
06B2: B8      	        CP B
06B3: 30F1    	        JR NC, FILL_BOX
06B5: C9      	        RET
              	        
              	;Draw a line between two points using Bresenham Line Algorithm
              	; void plotLine(int x0, int y0, int x1, int y1)
              	; {
              	;    int dx =  abs(x1-x0), sx = x0<x1 ? 1 : -1;
              	;    int dy = -abs(y1-y0), sy = y0<y1 ? 1 : -1;
              	;    int err = dx+dy, e2; /* error value e_xy */
              	        
              	;    for(;;){  /* loop */
              	;       setPixel(x0,y0);
              	;       if (x0==x1 && y0==y1) break;
              	;       e2 = 2*err;
              	;       if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
              	;       if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
              	;    }
              	; }
              	;Inputs: BC = X0,Y0
              	;        DE = X1,Y1
06B6:         	DRAW_LINE:
              	;check that points are in range
06B6: 79      	        LD A, C
06B7: FE40    	        CP 40H
06B9: D0      	        RET NC
06BA: 78      	        LD A, B
06BB: FE80    	        CP 80H
06BD: D0      	        RET NC
06BE: 7B      	        LD A, E
06BF: FE40    	        CP 40H
06C1: D0      	        RET NC
06C2: 7A      	        LD A, D
06C3: FE80    	        CP 80H
06C5: D0      	        RET NC
              	        
              	;sx = x0<x1 ? 1 : -1
06C6: 2601    	        LD H, 01H
06C8: 78      	        LD A, B
06C9: BA      	        CP D
06CA: 3802    	        JR C, $ + 4
06CC: 26FF    	        LD H, 0FFH
06CE: 7C      	        LD A, H
06CF: 3286FB  	        LD (SX), A
              	        
              	;sy = y0<y1 ? 1 : -1
06D2: 2601    	        LD H, 01H
06D4: 79      	        LD A, C
06D5: BB      	        CP E
06D6: 3802    	        JR C, $ + 4
06D8: 26FF    	        LD H, 0FFH
06DA: 7C      	        LD A, H
06DB: 3287FB  	        LD (SY), A
              	        
06DE: ED5384FB	        ld (ENDPT), DE
              	        
              	;dx =  abs(x1-x0)
06E2: C5      	        PUSH BC
06E3: 6A      	        LD L, D
06E4: 2600    	        LD H, 0
06E6: 48      	        LD C, B
06E7: 0600    	        LD B, 0
06E9: B7      	        OR A
06EA: ED42    	        SBC HL, BC
06EC: CD5707  	        CALL ABSHL
06EF: 2288FB  	        LD (DX), HL
06F2: C1      	        POP BC
              	        
              	;dy = -abs(y1-y0)
06F3: C5      	        PUSH BC
06F4: 6B      	        LD L, E
06F5: 2600    	        LD H, 0
06F7: 0600    	        LD B, 0
06F9: B7      	        OR A
06FA: ED42    	        SBC HL, BC
06FC: CD5707  	        CALL ABSHL
06FF: AF      	        XOR A
0700: 95      	        SUB L
0701: 6F      	        LD L, A
0702: 9F      	        SBC A, A
0703: 94      	        SUB H
0704: 67      	        LD H, A
0705: 228AFB  	        LD (DY), HL
0708: C1      	        POP BC
              	        
              	;err = dx+dy,
0709: ED5B88FB	        LD DE, (DX)
070D: 19      	        ADD HL, DE
070E: 228CFB  	        LD (ERR), HL
              	        
0711:         	LINE_LOOP:
              	;setPixel(x0,y0)
0711: CD3608  	        CALL DRAW_PIXEL
              	        
              	;if (x0==x1 && y0==y1) break;
0714: 3A85FB  	        LD A, (ENDPT + 1)
0717: B8      	        CP B
0718: 2005    	        JR NZ, $ + 7
071A: 3A84FB  	        LD A, (ENDPT)
071D: B9      	        CP C
071E: C8      	        RET Z
              	        
              	;e2 = 2*err;
071F: 2A8CFB  	        LD HL, (ERR)
0722: 29      	        ADD HL, HL              ;E2
              	        
              	;if (e2 >= dy)  err += dy; x0 += sx;
0723: ED5B8AFB	        LD DE, (DY)
0727: B7      	        OR A
0728: ED52    	        SBC HL, DE
072A: 19      	        ADD HL, DE
072B: FA3C07  	        JP M, LL2
              	        
072E: E5      	        PUSH HL
072F: 2A8CFB  	        LD HL, (ERR)
0732: 19      	        ADD HL, DE
0733: 228CFB  	        LD (ERR), HL
0736: 3A86FB  	        LD A, (SX)
0739: 80      	        ADD A, B
073A: 47      	        LD B, A
073B: E1      	        POP HL
              	        
073C:         	LL2:
              	;if (e2 <= dx)  err += dx; y0 += sy;
073C: ED5B88FB	        LD DE, (DX)
0740: B7      	        OR A
0741: ED52    	        SBC HL, DE
0743: 19      	        ADD HL, DE
0744: 2803    	        JR Z, LL3
0746: F21107  	        JP P, LINE_LOOP
0749:         	LL3:
0749: 2A8CFB  	        LD HL, (ERR)
074C: 19      	        ADD HL, DE
074D: 228CFB  	        LD (ERR), HL
0750: 3A87FB  	        LD A, (SY)
0753: 81      	        ADD A, C
0754: 4F      	        LD C, A
              	        
0755: 18BA    	        JR LINE_LOOP
              	        
0757:         	ABSHL:
0757: CB7C    	        BIT 7, H
0759: C8      	        RET Z
075A: AF      	        XOR A
075B: 95      	        SUB L
075C: 6F      	        LD L, A
075D: 9F      	        SBC A, A
075E: 94      	        SUB H
075F: 67      	        LD H, A
0760: C9      	        RET
              	        
              	;Draw a circle from a midpoint to a radius using Bresenham Line Algorithm
              	; void plotCircle(int xm, int ym, int r)
              	; {
              	;    int x = -r, y = 0, err = 2-2*r, i = 0; /* II. Quadrant */
              	;    printf("Midpoint = (%X,%X), Radius = %X\n", xm, ym, r);
              	;    do {
              	;       printf("(%X,%X) ", xm-x, ym+y); /*   I. Quadrant */
              	;       printf("(%X,%X) ", xm-y, ym-x); /*  II. Quadrant */
              	;       printf("(%X,%X) ", xm+x, ym-y); /* III. Quadrant */
              	;       printf("(%X,%X) ", xm+y, ym+x); /*  IV. Quadrant */
              	;       r = err;
              	;       if (r <= y) err += ++y*2+1;           /* e_xy+e_y < 0 */
              	;       if (r > x || err > y) err += ++x*2+1; /* e_xy+e_x > 0 or no 2nd y-step */
              	;       printf("x = %d, r = %d, y = %d, err =%d\n", x, r, y, err);
              	;    } while (x < 0);
              	; }
              	;Inputs BC = xm,ym (Midpoint)
              	;       E = radius
0761:         	DRAW_CIRCLE:
              	;   int x = -r, err = 2-2*r; /* II. Quadrant */
0761: AF      	        XOR A
0762: 93      	        SUB E
0763: 3286FB  	        LD (SX), A              ;x
              	;   y = 0
0766: AF      	        XOR A
0767: 3287FB  	        LD (SY), A              ;y
              	;   RAD = r
076A: 1600    	        LD D, 00H
076C: 7B      	        LD A, E
076D: ED538EFB	        LD (RAD), DE            ;r
              	;   err = 2-2*r
0771: EB      	        EX DE, HL
0772: 29      	        ADD HL, HL
0773: EB      	        EX DE, HL
0774: 210200  	        LD HL, 0002H
0777: B7      	        OR A
0778: ED52    	        SBC HL, DE              ;err
077A: 228CFB  	        LD (ERR), HL
              	        
077D:         	CIRCLE_LOOP:
              	;       setPixel(xm-x, ym+y); /*   I. Quadrant */
077D: C5      	        PUSH BC
077E: 3A86FB  	        LD A, (SX)
0781: ED44    	        NEG
0783: 80      	        ADD A, B
0784: 47      	        LD B, A
0785: 3A87FB  	        LD A, (SY)
0788: 81      	        ADD A, C
0789: 4F      	        LD C, A
078A: CD3608  	        CALL DRAW_PIXEL
078D: C1      	        POP BC
              	;       setPixel(xm+x, ym-y); /* III. Quadrant */
078E: C5      	        PUSH BC
078F: 3A86FB  	        LD A, (SX)
0792: 80      	        ADD A, B
0793: 47      	        LD B, A
0794: 3A87FB  	        LD A, (SY)
0797: ED44    	        NEG
0799: 81      	        ADD A, C
079A: 4F      	        LD C, A
079B: CD3608  	        CALL DRAW_PIXEL
079E: C1      	        POP BC
              	;       setPixel(xm-y, ym-x); /*  II. Quadrant */
079F: C5      	        PUSH BC
07A0: 3A87FB  	        LD A, (SY)
07A3: ED44    	        NEG
07A5: 80      	        ADD A, B
07A6: 47      	        LD B, A
07A7: 3A86FB  	        LD A, (SX)
07AA: ED44    	        NEG
07AC: 81      	        ADD A, C
07AD: 4F      	        LD C, A
07AE: CD3608  	        CALL DRAW_PIXEL
07B1: C1      	        POP BC
              	;       setPixel(xm+y, ym+x); /*  IV. Quadrant */
07B2: C5      	        PUSH BC
07B3: 3A87FB  	        LD A, (SY)
07B6: 80      	        ADD A, B
07B7: 47      	        LD B, A
07B8: 3A86FB  	        LD A, (SX)
07BB: 81      	        ADD A, C
07BC: 4F      	        LD C, A
07BD: CD3608  	        CALL DRAW_PIXEL
07C0: C1      	        POP BC
              	;       r = err;
07C1: 2A8CFB  	        LD HL, (ERR)
07C4: 228EFB  	        LD (RAD), HL
              	;       if (r <= y) err += ++y*2+1;           /* e_xy+e_y < 0 */
07C7: 3A87FB  	        LD A, (SY)
07CA: 5F      	        LD E, A
07CB: 1600    	        LD D, 0
07CD: B7      	        OR A
07CE: ED52    	        SBC HL, DE
07D0: 19      	        ADD HL, DE
07D1: 2803    	        JR Z, $ + 5
07D3: F2E907  	        JP P, DS1
07D6: 3A87FB  	        LD A, (SY)
07D9: 3C      	        INC A
07DA: 3287FB  	        LD (SY), A
07DD: 87      	        ADD A, A
07DE: 3C      	        INC A
07DF: 5F      	        LD E, A
07E0: 1600    	        LD D, 0
07E2: 2A8CFB  	        LD HL, (ERR)
07E5: 19      	        ADD HL, DE
07E6: 228CFB  	        LD (ERR), HL
              	;       if (r > x || err > y) err += ++x*2+1; /* e_xy+e_x > 0 or no 2nd y-step */
07E9:         	DS1:
07E9: 2A8EFB  	        LD HL, (RAD)
07EC: 3A86FB  	        LD A, (SX)
07EF: 16FF    	        LD D, 0FFH
07F1: 5F      	        LD E, A
07F2: B7      	        OR A
07F3: ED52    	        SBC HL, DE
07F5: 19      	        ADD HL, DE
07F6: 2803    	        JR Z, $ + 5
07F8: F20D08  	        JP P, DS2
07FB: 2A8CFB  	        LD HL, (ERR)
07FE: 3A87FB  	        LD A, (SY)
0801: 1600    	        LD D, 0
0803: 5F      	        LD E, A
0804: B7      	        OR A
0805: ED52    	        SBC HL, DE
0807: 19      	        ADD HL, DE
0808: 2816    	        JR Z, DS3
080A: FA2008  	        JP M, DS3
080D:         	DS2:
080D: 3A86FB  	        LD A, (SX)
0810: 3C      	        INC A
0811: 3286FB  	        LD (SX), A
0814: 87      	        ADD A, A
0815: 3C      	        INC A
0816: 5F      	        LD E, A
0817: 16FF    	        LD D, 0FFH
0819: 2A8CFB  	        LD HL, (ERR)
081C: 19      	        ADD HL, DE
081D: 228CFB  	        LD (ERR), HL
              	;   } while (x < 0);
0820:         	DS3:
0820: 3A86FB  	        LD A, (SX)
0823: B7      	        OR A
0824: C27D07  	        JP NZ, CIRCLE_LOOP
0827: C9      	        RET
              	        
              	;Fill Circle
              	;Fills a circle by increasing radius until Radius = Original Radius E
              	;Inputs BC = xm,ym (Midpoint)
              	;       E = radius
0828:         	FILL_CIRCLE:
0828: 1601    	        LD D, 01H               ;Start radius
082A:         	NEXT_CIRCLE:
082A: D5      	        PUSH DE                 ;Save end Radius
082B: 5A      	        LD E, D
082C: CD6107  	        CALL DRAW_CIRCLE
082F: D1      	        POP DE                  ;Restore Radius
0830: 7B      	        LD A, E
0831: 14      	        INC D
0832: BA      	        CP D
0833: 30F5    	        JR NC, NEXT_CIRCLE
0835: C9      	        RET
              	        
              	;Draw Pixel in position X Y
              	;Input B = column/X (0-127), C = row/Y (0-63)
              	;destroys HL
0836:         	DRAW_PIXEL:
0836: 79      	        LD A, C
0837: FE40    	        CP 40H
0839: D0      	        RET NC
083A: 78      	        LD A, B
083B: FE80    	        CP 80H
083D: D0      	        RET NC
              	        
083E: D5      	        PUSH DE
083F: CD6A08  	        CALL SET_GBUF
              	
0842: 7A      	        LD A, D
0843: B6      	        OR (HL)
0844: 77      	        LD (HL), A
0845: D1      	        POP DE
0846: C9      	        RET
              	
              	;Clear Pixel in position X Y
              	;Input B = column/X (0-127), C = row/Y (0-63)
              	;destroys HL
0847:         	CLEAR_PIXEL:
0847: 79      	        LD A, C
0848: FE40    	        CP 40H
084A: D0      	        RET NC
084B: 78      	        LD A, B
084C: FE80    	        CP 80H
084E: D0      	        RET NC
              	        
084F: D5      	        PUSH DE
0850: CD6A08  	        CALL SET_GBUF
              	
0853: 7A      	        LD A, D
0854: 2F      	        CPL
0855: A6      	        AND (HL)
0856: 77      	        LD (HL), A
0857: D1      	        POP DE
0858: C9      	        RET
              	
              	;Flip Pixel in position X Y
              	;Input B = column/X (0-127), C = row/Y (0-63)
              	;destroys HL
0859:         	FLIP_PIXEL:
0859: 79      	        LD A, C
085A: FE40    	        CP 40H
085C: D0      	        RET NC
085D: 78      	        LD A, B
085E: FE80    	        CP 80H
0860: D0      	        RET NC
              	        
0861: D5      	        PUSH DE
0862: CD6A08  	        CALL SET_GBUF
              	
0865: 7A      	        LD A, D
0866: AE      	        XOR (HL)
0867: 77      	        LD (HL), A
0868: D1      	        POP DE
0869: C9      	        RET
              	
              	;Helper routine to set HL to the correct GBUF address given X and Y
              	;Input B = column/X (0-127), C = row/Y (0-63)
              	;Output HL = address of GBUF X,Y byte, D = Byte with Pixel Bit Set
              	;Destroys E
086A:         	SET_GBUF:
086A: 69      	        LD L, C
086B: 2600    	        LD H, 00H
086D: 29      	        ADD HL, HL
086E: 29      	        ADD HL, HL
086F: 29      	        ADD HL, HL
0870: 29      	        ADD HL, HL
0871: ED5B80FB	        LD DE, (VPORT)
0875: 1B      	        DEC DE
0876: 19      	        ADD HL, DE
              	        
0877: 78      	        LD A, B
0878: 1608    	        LD D, 08H
087A:         	BASE_COL:
087A: 23      	        INC HL
087B: 92      	        SUB D
087C: 30FC    	        JR NC, BASE_COL
              	        
087E: 2F      	        CPL
087F: 1601    	        LD D, 01H
0881: B7      	        OR A
0882: C8      	        RET Z
0883:         	SHIFT_BIT:
0883: CB22    	        SLA D
0885: 3D      	        DEC A
0886: 20FB    	        JR NZ, SHIFT_BIT
0888: C9      	        RET
              	
              	;Main draw routine.  Moves GBUF to LCD and clears buffer
              	;Destroys all
0889:         	PLOT_TO_LCD:
0889: 2A80FB  	        LD HL, (VPORT)
088C: 0E80    	        LD C, 80H
088E:         	PLOT_ROW:
088E: 79      	        LD A, C
088F: E69F    	        AND 9FH
0891: CDF50A  	        CALL LCD_INST           ;Vertical
0894: 3E80    	        LD A, 80H
0896: CB69    	        BIT 5, C
0898: 2802    	        JR Z, $ + 4
089A: F608    	        OR 08H
089C: CDF50A  	        CALL LCD_INST           ;Horizontal
089F: 3E02    	        LD A, 02H 
08A1: CD0D0B  	        CALL SER_SYNC           ;Data Block Sync
08A4: 0610    	        LD B, 10H               ;send eight double bytes (16 bytes)
08A6:         	PLOT_COLUMN:
08A6: 7E      	        LD A, (HL)
08A7: CDFA0A  	        CALL LCD_DATA
08AA: 3A90FB  	        LD A, (CLRBUF)
08AD: B7      	        OR A
08AE: 2802    	        JR Z, $ + 4
08B0: 3600    	        LD (HL), 00H            ;Clear Buffer if CLRBUF is non zero
08B2: 23      	        INC HL
08B3: 10F1    	        DJNZ PLOT_COLUMN
08B5: 0C      	        INC C
08B6: CB71    	        BIT 6, C                ;Is Row = 64?
08B8: 28D4    	        JR Z, PLOT_ROW
08BA: C9      	        RET
              	        
              	; Print ASCII text on a given row
              	; Inputs: A = 0 to 3 Row Number
              	;         DB "String" on next line, terminate with 0
              	; EG:
              	;   LD A,2
              	;   CALL PRINT_STRING
              	;   DB "This Text",0
              	;
08BB:         	PRINT_STRING:
08BB: 47      	        LD B, A
08BC: CD7606  	        CALL SET_TXT_MODE
08BF: 21210B  	        LD HL, ROWS
08C2: 78      	        LD A, B
08C3: 85      	        ADD A, L
08C4: 3001    	        JR NC, $ + 3
08C6: 24      	        INC H
08C7: 6F      	        LD L, A
08C8: 7E      	        LD A, (HL)
08C9: CDF50A  	        CALL LCD_INST
08CC: 3E02    	        LD A, 02H 
08CE: CD0D0B  	        CALL SER_SYNC           ;Data Block Sync
08D1: E1      	        POP HL
08D2:         	DS_LOOP:
08D2: 7E      	        LD A, (HL)
08D3: 23      	        INC HL
08D4: B7      	        OR A
08D5: 2805    	        JR Z, DS_EXIT
08D7: CDFA0A  	        CALL LCD_DATA
08DA: 18F6    	        JR DS_LOOP
08DC:         	DS_EXIT:
08DC: E9      	        JP (HL)
              	        
              	;Print Characters at a position X,Y
              	;Eventhough there are 16 columns, only every second column can be written
              	;to and two characters are to be printed.  IE: if you want to print one
              	;character in column 2, then you must set B=0 and print " x", putting
              	;a space before the chracter.
              	;Input B = column/X (0-7), C = row/Y (0-3)
              	;      HL = Start address of text to display, terminate with 0
08DD:         	PRINT_CHARS:
08DD: CD7606  	        CALL SET_TXT_MODE
08E0: 11210B  	        LD DE, ROWS
08E3: 79      	        LD A, C
08E4: 83      	        ADD A, E
08E5: 3001    	        JR NC, $ + 3
08E7: 14      	        INC D
08E8: 5F      	        LD E, A
08E9: 1A      	        LD A, (DE)
08EA: 80      	        ADD A, B
08EB: CDF50A  	        CALL LCD_INST
08EE: 3E02    	        LD A, 02H 
08F0: CD0D0B  	        CALL SER_SYNC           ;Data Block Sync
08F3:         	PC_LOOP:
08F3: 7E      	        LD A, (HL)
08F4: 23      	        INC HL
08F5: B7      	        OR A
08F6: C8      	        RET Z
08F7: CDFA0A  	        CALL LCD_DATA
08FA: 18F7    	        JR PC_LOOP
              	        
              	; Delay for LCD write
08FC:         	DELAY_US:
08FC: 111000  	        LD DE, V_DELAY_US       ;DELAY BETWEEN, was 0010H
08FF:         	DELAY_MS:
08FF: 1B      	        DEC DE                  ;EACH BYTE
0900: 7A      	        LD A, D                 ;AS PER
0901: B3      	        OR E                    ;LCD MANUFACTER'S
0902: 20FB    	        JR NZ, DELAY_MS         ;INSTRUCTIONS
0904: C9      	        RET
              	        
              	; Set Buffer Clearing after outputting to LCD
              	; Input: A = 0 Buffer to be cleared, A <> 0 Buffer kept
0905:         	SET_BUF_CLEAR:
0905: 3EFF    	        LD A, 0FFH
0907: 3290FB  	        LD (CLRBUF), A
090A: C31E06  	        JP CLEAR_GBUF
              	        
090D:         	SET_BUF_NO_CLEAR:
090D: AF      	        XOR A
090E: 3290FB  	        LD (CLRBUF), A
0911: C9      	        RET
              	
              	;Initialise the GLCD Terminal
              	;Clears the GBUF, sets cursor to top left and displays cursor.
              	;This must be called prior to any Terminal routine.  This routine
              	;will as call INIT_LCD.
0912:         	INIT_TERMINAL:
0912: 2180F7  	        LD HL,TGBUF              ;Reset VPORT and BUFF_TOP to TGBUF
0915: 2280FB  	        LD (VPORT),HL           ;to GBUF
0918: 2282FB  	        LD (TBUF),HL
091B: CD0906  	        CALL INIT_LCD           ;Clear LCD GBUF
091E: 010000  	        LD BC,0000H
0921: CDD709  	        CALL SET_CURSOR         ;Move cursor to top left
0924: 185F    	        JR DRAW_CURSOR          ;Draw Cursor and exit
              	
              	;Send or handle ASCII characters to the GLCD screen.  This routines displays
              	;ASCII charcters to the GLCD screen and handles some special control characters
              	;It also handles srolling history of 10 lines.  Characters are drawn at the 
              	;current cursor position.  Cursor increments if characger is drawn.
              	;       CR / 0DH = will move the cursor down and reset it column
              	;       LF / 0AH = is ignored
              	;       FF / 0CH = clears the terminal (restarts)
              	;       BS / 08H = will delete the character at the cursor and move cursor back one
              	;       HT / 09H = will TAB 4 spaces
              	;       UP / 05H = will scroll up one line if any
              	;       DN / 06H = will scroll down one line if any
              	;Input: A = ASCII charcter to send to the GLCD screen.
              	;       A = 0  cursor drawn only
0926:         	SEND_CHAR_TO_GLCD:
              	        ;Check for special characters
0926: B7      	        OR A                    ;Zero?
0927: 285C    	        JR Z,DRAW_CURSOR
0929:         	DO_SCRL_UP:
0929: FEB5    	        CP UP                   ;Up Arrow
092B: 2007    	        JR NZ,DO_SCRL_DN
092D: AF      	        XOR A
092E: CD430A  	        CALL MOVE_VPORT
0931: C38908  	        JP PLOT_TO_LCD
0934:         	DO_SCRL_DN:
0934: FEB6    	        CP DN                   ;Down Arrow
0936: 2004    	        JR NZ,DO_CR
0938: 3E01    	        LD A,1
093A: 18F2    	        JR $-12                 ;Move VPORT above
093C:         	DO_CR:
              	        ;Key is now a drawing character, reset VPORT first
093C: 2180F7  	        LD HL,TGBUF
093F: 2280FB  	        LD (VPORT),HL
0942: FE0A    	        CP LF      ;LF
0944: C8      	        RET Z
0945: FE0D    	        CP CR      ;CR
0947: 200D    	        JR NZ,DO_FF
0949: 3E20    	        LD A,SPACE              ;Clear Cursor
094B: CD990A  	        CALL DRAW_GRAPHIC
094E: CDF509  	        CALL INC_ROW
0951: 3293FB  	        LD (CURSOR_YS),A        ;Save start row
0954: 182F    	        JR DRAW_CURSOR
0956:         	DO_FF:
0956: FE0C    	        CP CS                   ;Form Feed / Clear Screen
0958: 28B8    	        JR Z,INIT_TERMINAL      ;Reset All.
095A:         	DO_BS:
095A: FE7F    	        CP DEL                 ;Backspace BKSP
095C: 200A    	        JR NZ,DO_TAB
095E: 3E20    	        LD A,SPACE              ;Space
0960: CD990A  	        CALL DRAW_GRAPHIC
0963: CD630A  	        CALL DEC_CURSOR
0966: 181D    	        JR DRAW_CURSOR
0968:         	DO_TAB:
0968: FE09    	        CP TAB                  ;Horizontal Tab
096A: 2013    	        JR NZ,DO_CHAR
096C: 3E20    	        LD A,SPACE              ;Space
096E: CD990A  	        CALL DRAW_GRAPHIC
0971: CDE809  	        CALL INC_CURSOR
0974: CDE809  	        CALL INC_CURSOR
0977: CDE809  	        CALL INC_CURSOR
097A: CDE809  	        CALL INC_CURSOR
097D: 1806    	        JR DRAW_CURSOR
097F:         	DO_CHAR:
097F: CD990A  	        CALL DRAW_GRAPHIC
0982: CDE809  	        CALL INC_CURSOR
0985:         	DRAW_CURSOR:
0985: 3A94FB  	        LD A,(CURSOR_ON)
0988: B7      	        OR A
0989: 3E20    	        LD A,SPACE              ;Space
098B: 2002    	        JR NZ,$+4               ;Skip cursor draw
098D: 3E8F    	        LD A,CURSOR             ;Cursor
098F: CD990A  	        CALL DRAW_GRAPHIC
0992: C38908  	        JP PLOT_TO_LCD          ;Plot screen and exit
              	
              	
              	
              	;Send a string of characters to the GLCD.  Prints a string pointed 
              	;by DE.  It stops printing and returns when either a CR is printed or
              	;when the next byte is the same as what is in register A
              	;Inputs: DE = address of string to print
              	;        A = character to stop printing.
              	;Destroy: All
0995:         	SEND_STRING_TO_GLCD:
0995: 47      	        LD B,A                  ;Save cp in B
0996:         	PS1:
0996: 1A      	        LD A,(DE)               ;Get character
0997: 13      	        INC DE                  ;Move pointer
0998: B8      	        CP B                    ;Same as B?
0999: 28EA    	        JR Z,DRAW_CURSOR        ;Yes exit and plot LCD screen
099B: FE0D    	        CP CR                   ;Is it a CR?
099D: 289D    	        JR Z,DO_CR              ;Yes do a CR and plot LCD screen and exit
099F: FE0C    	        CP CS                   ;Is it a FF?
09A1: 28B3    	        JR Z,DO_FF              ;Yes do a Form Feed and plot LCD screen and exit
09A3: D9      	        EXX                     ;Save bulk registers
09A4: CD990A  	        CALL DRAW_GRAPHIC       ;Draw the character
09A7: CDE809  	        CALL INC_CURSOR         ;Move cursor by one
09AA: D9      	        EXX                     ;Restore bulk registers
09AB: 18E9    	        JR PS1                  ;Repeat for next character
09AD: C9      	        RET     
              	
              	;Display the register A in ASCII on the GLCD
              	;Input: A = value to convert and display
09AE:         	SEND_A_TO_GLCD:
09AE: CDB309  	        CALL DRAW_A             ;Do the conversion
09B1: 18D2    	        JR DRAW_CURSOR          ;exit and plot LCD screen
09B3:         	DRAW_A:
09B3: F5      	        PUSH AF                 ;Save AF
09B4: 0F      	        RRCA                    ;move high
09B5: 0F      	        RRCA                    ;nibble to low nibble
09B6: 0F      	        RRCA
09B7: 0F      	        RRCA
09B8: CDBC09  	        CALL NIBBLE_TO_GLCD     ;Convert and display
09BB: F1      	        POP AF                  ;Restore AF
09BC:         	NIBBLE_TO_GLCD:
09BC: E60F    	        AND 0FH                 ;mask out high nibble
09BE: C690    	        ADD A,90H               ;convert to 
09C0: 27      	        DAA                     ;ASCII
09C1: CE40    	        ADC A,40H               ;using this
09C3: 27      	        DAA                     ;amazing routine
09C4: CD990A  	        CALL DRAW_GRAPHIC       ;Draw the character
09C7: CDE809  	        CALL INC_CURSOR         ;Move cursor by one
09CA: C9      	        RET
              	
              	;Display the register HL in ASCII on the GLCD
              	;Input: HL = value to convert and display
09CB:         	SEND_HL_TO_GLCD:
09CB: E5      	        PUSH HL                 ;Save HL
09CC: 7C      	        LD A,H                  ;get H
09CD: CDB309  	        CALL DRAW_A             ;Do the conversion
09D0: E1      	        POP HL
09D1: 7D      	        LD A,L                  ;get L
09D2: CDB309  	        CALL DRAW_A             ;Do the conversion
09D5: 18AE    	        JR DRAW_CURSOR          ;exit and plot LCD screen
              	
              	;Set the Graphic cursor position
              	;Inputs: BC = X,Y where X = 0..127, Y = 0..63
              	;Ignores update if one of the X,Y values are out of range
              	;Destroys: A
09D7:         	SET_CURSOR:
              	        ;Check range. Exit if X,Y out of range
09D7: 79      	        LD A, C
09D8: FE40    	        CP 40H
09DA: D0      	        RET NC
09DB: 78      	        LD A, B
09DC: FE80    	        CP 80H
09DE: D0      	        RET NC
              	        ;Set Cursor and initial start row
09DF: ED4391FB	        LD (CURSOR_XY),BC       ;Save cursor
09E3: 79      	        LD A,C
09E4: 3293FB  	        LD (CURSOR_YS),A        ;And initial Y Start
09E7: C9      	        RET
              	
              	;Increment the cursor by one font character
              	;A Font Character is 6x6 Pixels.  Move column 6 across until it can't then reset
              	;column back to 0 and move 6 down.
              	;If can't go down any further then keep on last row but move column back to 0
              	;Font Characters maximum 20 across and 10 down
              	;Output: Carry Set = No screen overflow
              	;Destroys: A
09E8:         	INC_CURSOR:
09E8: 3A92FB  	        LD A,(CURSOR_X)         ;Get X
09EB: C606    	        ADD A,6                 ;Add 6
09ED: FE7E    	        CP 126                  ;Is it >= 126?
09EF: 3004    	        JR NC,INC_ROW           ;Yes, reset column and increment row
09F1: 3292FB  	        LD (CURSOR_X),A         ;Save new column
09F4: C9      	        RET
09F5:         	INC_ROW:
09F5: AF      	        XOR A
09F6: 3292FB  	        LD (CURSOR_X),A         ;reset column to 0
09F9: 3A91FB  	        LD A,(CURSOR_Y)         ;get row
09FC: C606    	        ADD A,6                 ;Add 6
09FE: FE3C    	        CP 60                   ;Is it >= 60
0A00: 3807    	        JR C,SAVE_ROW           ;No, save new row
0A02: F5      	        PUSH AF
0A03: CD0D0A  	        CALL SHIFT_BUFFER       ;Shift buffer up one row
0A06: F1      	        POP AF
0A07: D606    	        SUB 6                   ;overflow, just leave the same
0A09:         	SAVE_ROW:
0A09: 3291FB  	        LD (CURSOR_Y),A         ;Save new row
0A0C: C9      	        RET
              	
              	;Shift the graphics buffer (GBUF) into the scroll buffer (SBUF) by
              	;one row (6 lines).  Move the top buffer address to the new top of 
              	;the scroll buffer
0A0D:         	SHIFT_BUFFER:
              	        ;Check if anymore buffer left
0A0D: 2A82FB  	        LD HL,(TBUF)        ;Get top buffer address
0A10: 1100F0  	        LD DE,TGBUF-SBUF    ;Get scroll buffer address
0A13: B7      	        OR A                ;Clear carry
0A14: ED52    	        SBC HL,DE           ;TBUF-SBUF
0A16: 2809    	        JR Z,SKIP_TBUF
0A18: 19      	        ADD HL,DE           ;restore HL
0A19: 116000  	        LD DE,16*6          ;Six pixel rows
0A1C: ED52    	        SBC HL,DE           ;Move TBUF down by 6 rows
0A1E: 2282FB  	        LD (TBUF),HL        ;Save new TBUF
0A21:         	SKIP_TBUF:
0A21: 2160F0  	        LD HL,TGBUF-SBUF+(16*6) ;Top of scroll buffer less one row
0A24: 1100F0  	        LD DE,TGBUF-SBUF    ;Top of scroll buffer
0A27: 01E00A  	        LD BC,16*6*29       ;19 rows (change to 20 lines 19 to 29 (+10)) Z80 Mini
0A2A: EDB0    	        LDIR
0A2C: 21E0FA  	        LD HL,TGBUF+0360H   ;clear last row (9*16)
0A2F: 11E1FA  	        LD DE,TGBUF+0361H
0A32: 015F00  	        LD BC,5FH
0A35: AF      	        XOR A
0A36: 77      	        LD (HL),A
0A37: EDB0    	        LDIR
              	        ;Move Y Start up one row
0A39: 3A93FB  	        LD A,(CURSOR_YS)    ;Get Y Start row
0A3C: D606    	        SUB 6
0A3E: D8      	        RET C               ;Ignore if less than zero
0A3F: 3293FB  	        LD (CURSOR_YS),A    
0A42: C9      	        RET
              	
              	;Move the VPORT vertically between TBUF and end of GBUB.  VPORT will be 
              	;shifted by a standard termial row of 6 lines.
              	;input: A = 0 shift up else shift down
0A43:         	MOVE_VPORT:
0A43: 2A80FB  	        LD HL,(VPORT)       ;get viewport
0A46: EB      	        EX DE,HL
0A47: B7      	        OR A                ;check move
0A48: 200E    	        JR NZ,MOVE_DOWN     ;shift down
0A4A:         	MOVE_UP:
0A4A: 2A82FB  	        LD HL,(TBUF)        ;get top of buffer
0A4D: ED52    	        SBC HL,DE           ;
0A4F: C8      	        RET Z               ;if the same, then at top already
0A50: 21A0FF  	        LD HL,0-60H         ;one row up 60
0A53:         	SAVE_VPORT:
0A53: 19      	        ADD HL,DE           ;get new VPORT value
0A54: 2280FB  	        LD (VPORT),HL
0A57: C9      	        RET
0A58:         	MOVE_DOWN:
0A58: 2180F7  	        LD HL,TGBUF         ;get top of graphics buffer
0A5B: ED52    	        SBC HL,DE           ;
0A5D: C8      	        RET Z               ;if the same, then at top already
0A5E: 216000  	        LD HL,60H           ;one row down 60
0A61: 18F0    	        JR SAVE_VPORT
              	
              	;Decrement the cursor by one font character up to the current row start
              	;Used to help with Backspace character or left arrow?
              	;Destroys: A
0A63:         	DEC_CURSOR:
0A63: 3A92FB  	        LD A,(CURSOR_X)         ;Get X
0A66: D606    	        SUB 6                   ;subract 6
0A68:         	SAVE_COL:
0A68: 3292FB  	        LD (CURSOR_X),A         ;Save new column
              	        ;if < 0 then just make 0 or 20 depending on Y Start
0A6B: D0      	        RET NC
0A6C: C5      	        PUSH BC
0A6D: 3A93FB  	        LD A,(CURSOR_YS)        ;Get Y Start
0A70: 47      	        LD B,A
0A71: 3A91FB  	        LD A,(CURSOR_Y)         ;Get Y
0A74: 90      	        SUB B
0A75: C1      	        POP BC
0A76: 3E00    	        LD A,0                  ;reset to 0
0A78: 28EE    	        JR Z,SAVE_COL
0A7A: 3E78    	        LD A,6*20               ;last column 20
0A7C: 3292FB  	        LD (CURSOR_X),A         ;Save new column
0A7F: 3A91FB  	        LD A,(CURSOR_Y)
0A82: D606    	        SUB 6                   ;move row one line up
0A84: 3291FB  	        LD (CURSOR_Y),A         ;Save new row
0A87: C9      	        RET
              	
              	;Get cursor position
              	;Outputs: BC = X,Y where X = 0..127, Y = 0..63
0A88:         	GET_CURSOR:
0A88: ED4B91FB	        LD BC,(CURSOR_XY)
0A8C: C9      	        RET
              	
              	;Display Cursor
              	;Input: A = 0, Turn cursor on, A = non zero, Turn cursor off
              	;Default is Cursor ON
0A8D:         	DISPLAY_CURSOR:
0A8D: 3294FB  	        LD (CURSOR_ON),A
0A90: C9      	        RET
              	
              	;Inverse Graphic Drawing
              	;Initial state is normal.  Calling this routine will TOGGLE the inverse drawing flag
              	;Destroys: A
0A91:         	INV_GRAPHIC:
0A91: 3A95FB  	        LD A,(INVERSE)
0A94: 2F      	        CPL                 ;flip bits
0A95: 3295FB  	        LD (INVERSE),A
0A98: C9      	        RET
              	
              	;Draw Graphic at the current cursor.  Draw either an ASCII character or
              	;a custom sprite/picture
              	;Input: A = ASCII number or 
              	;    if A=0 Then 
              	;       HL = Address of graphic data
              	;       B = width of graphic in pixels (1-128)
              	;       C = height of graphic in pixels (1-64)
              	;Destroys: All
0A99:         	DRAW_GRAPHIC:
0A99: B7      	        OR A                ;is A=0
0A9A: 2810    	        JR Z,PLOT_GRAPHIC   ;yes, use data pointing to HL
              	        ;Use internal font table and index it to value in A
0A9C: 3D      	        DEC A               ;fix for A = 0..255
0A9D: 2600    	        LD H,0
0A9F: 6F      	        LD L,A
0AA0: 29      	        ADD HL,HL           ;Multipy A by 2
0AA1: 54      	        LD D,H
0AA2: 5D      	        LD E,L              ;Save in DE
0AA3: 29      	        ADD HL,HL           ;Multipy A by 4
0AA4: 19      	        ADD HL,DE           ;Multiply by 6
0AA5: 112F0B  	        LD DE,FONT_DATA     ;Font Table
0AA8: 19      	        ADD HL,DE           ;Add index (A*8) to HL
0AA9: 010606  	        LD BC,0606H         ;Six pixels across, Six pixels down
0AAC:         	PLOT_GRAPHIC:
0AAC: 50      	        LD D,B              ;D=Column pixel count
0AAD: 7A      	        LD A,D
0AAE: 3296FB  	        LD (PIXEL_X),A      ;Save original pixel length
0AB1: 59      	        LD E,C              ;E=Row pixel count
0AB2: ED4B91FB	        LD BC,(CURSOR_XY)   ;Get graphics cursor position
0AB6:         	PLOT_BYTE:
0AB6: 7A      	        LD A,D              ;Get column bit count
0AB7: D608    	        SUB 8
0AB9: 57      	        LD D,A
0ABA: D5      	        PUSH DE        
0ABB: 1608    	        LD D,8
0ABD: 5E      	        LD E,(HL)           ;get pixel data
0ABE: 3009    	        JR NC,INV_BIT
0AC0: 82      	        ADD A,D             ;Restore column bit count
0AC1: 57      	        LD D,A
0AC2: 7A      	        LD A,D
              	        ;D = Rotate adjust count
0AC3: CB0B    	        RRC E               ;rotate it to get first bit in bit 7
0AC5: 15      	        DEC D
0AC6: 20FB    	        JR NZ,$-3
0AC8: 57      	        LD D,A              ;reset D to actual bit count
0AC9:         	INV_BIT:
0AC9: 3E00    	        LD A, 0      ;check inverse flag
0ACB: AB      	        XOR E               ;flip bits
0ACC: 5F      	        LD E,A              ;save new data
0ACD:         	PLOT_BIT:
0ACD: CB03    	        RLC E
0ACF: E5      	        PUSH HL
0AD0: 3005    	        JR NC,REMOVE_PIXEL
0AD2: CD3608  	        CALL DRAW_PIXEL
0AD5: 1803    	        JR $+5
0AD7:         	REMOVE_PIXEL:
0AD7: CD4708  	        CALL CLEAR_PIXEL
0ADA: E1      	        POP HL
0ADB: 04      	        INC B               ;move X to the right by one
0ADC: 15      	        DEC D
0ADD: 20EE    	        JR NZ,PLOT_BIT
              	        ;All bits are plotted check if D <= 0
0ADF: 23      	        INC HL              ;move to next pixel byte
0AE0: D1      	        POP DE              ;restore Column/Row bit count
0AE1: 7A      	        LD A,D
0AE2: B7      	        OR A                ;check for zero or lessor
0AE3: 2803    	        JR Z,$+5
0AE5: F2B60A  	        JP P,PLOT_BYTE      ;its greater or zero, do next byte
              	        ;Move down a row and set column to the start
0AE8: 1D      	        DEC E               ;move column pixel count down by one
0AE9: C8      	        RET Z               ;if its zero no more to do, just exit
0AEA: 0C      	        INC C               ;move down a row
0AEB: 3A92FB  	        LD A,(CURSOR_X)
0AEE: 47      	        LD B,A              ;reset column
0AEF: 3A96FB  	        LD A,(PIXEL_X)
0AF2: 57      	        LD D,A              ;reset pixel length per row
0AF3: 18C1    	        JR PLOT_BYTE
              	
              	;Serial/Paralled Communication routines
              	;Send information to the LCD screen via SERIAL or PARALLEL connection.  Parallel is straight
              	;forward.  Just send the Byte in the Accumilator to the relevante Instruction or Data port.
              	;Then call a delay for that byte to be processed by the LCD.
              	;For Serial communication, three Bytes are to be sent using the SPI protocol.
              	;The first byte is a synchronise/configuration byte.  This sets
              	;the Data/Instruction register bit.  The second and third bytes is the actual data to send.
              	;It is split into two bytes with 4 bits of data set at the upper nibble and zeros for the rest.
              	;A maximum of 256 Bytes of Data information can be send with only one Synchronise Byte.  The
              	;LCD Data routine doesn't send the sync byte.  It needs to be done prior by calling SER_SYNC first.
              	;
              	;The two routines to use are:
              	;LCD_DATA, Sends Data information.  Along with SER_SYNC called prior and
              	;LCD_INST, Sends Instruction information
              	
              	;Send to LCD Instruction register
              	;If serial connection it will send the byte with a synchronise byte.
              	;If parallel byte is sent to the Instruction register port and a delay is triggered
              	;Input: A = Byte to send
0AF5:         	LCD_INST:
              	;IF COMMS_MODE
              	;        PUSH AF
              	;        XOR A
              	;        CALL SER_SYNC
              	;        POP AF
              	;        JP SER_BYTE
              	;ELSE
0AF5: D370    	        OUT (LCD_IR), A
0AF7: C3FC08  	        JP DELAY_US
              	;ENDIF
              	
              	;Send to LCD Data register
              	;If serial connection it will send the byte with no synchronise byte.  The
              	;synchronise byte is to be sent separately.
              	;If parallel byte is sent to the Data register port and a delay is triggered
              	;Input: A = Byte to send
0AFA:         	LCD_DATA:
              	;IF COMMS_MODE
              	;        JP SER_BYTE
              	;ELSE
0AFA: D371    	        OUT (LCD_DR), A
0AFC: C3FC08  	        JP DELAY_US
              	;ENDIF
              	
              	;Serial Byte Send
              	;Send a Byte in two halfs,  First half is the upper nibble with 4 zeros and second
              	;byte is the lower nibble shifted to the upper nibble with 4 zeros.
              	;   EG: if Byte to send is 10010110B, then
              	;   BYTE 1 = 10010000b and
              	;   BYTE 2 = 01100000b
              	;Input: A = byte to send
0AFF:         	SER_BYTE:
0AFF: F5      	        PUSH AF
0B00: CD080B  	        CALL SEND_PART
0B03: F1      	        POP AF
0B04: 07      	        RLCA
0B05: 07      	        RLCA
0B06: 07      	        RLCA
0B07: 07      	        RLCA
0B08:         	SEND_PART:
0B08: E6F0    	        AND 0F0H                ;Mask out lower nibble
0B0A: C30E0B  	        JP SPI_WR               ;Send First Half of Command/Data byte
              	
              	;Serial Synchronise Byte
              	;Send 5 consecutive '1's then '000's for instruction or '010' for data.
              	;Input: A = 0x00 for instruction register and 0x02 if data register
0B0D:         	SER_SYNC:
              	;IF COMMS_MODE
              	;        OR SER_BT
              	;ELSE
0B0D: C9      	        RET
              	;ENDIF
              	
              	;SPI Write Routine.
              	;Send a byte to the LCD using the SPI protocol
              	;Inputs: A = Byte to be sent
0B0E:         	SPI_WR:
0B0E: C5      	        PUSH BC
0B0F: 0608    	        LD B, 08H       ;Eight Bits to send
0B11: 4F      	        LD C, A         ;SPI Byte
0B12: AF      	        XOR A           ;Clear A
0B13:         	CLK_LOOP:
0B13: CB01    	        RLC C           ;Put Bit 7 in Carry Flag
0B15: 8F      	        ADC A,A         ;Set Bit 0 with Carry Flag
0B16: F602    	        OR 02H          ;Set SCLK high (pulse clock)
0B18: D300    	        OUT (LCD_SER),A ;Output to LCD
0B1A: AF      	        XOR A           ;Set SCLK low (and SID)
0B1B: D300    	        OUT (LCD_SER),A ;Output to LCD
0B1D: 10F4    	        DJNZ CLK_LOOP   ;Get next Bit
0B1F: C1      	        POP BC
0B20: C9      	        RET
              	
              	; Contstants
0B21: 80908898	ROWS:   DB      80H,90H,88H,98H ;Text Row start position
              	        
0B25:         	INIT_BASIC:
0B25: 30      	        DB  30H
0B26: 20      	        DB  20H
0B27: 30      	        DB  30H
0B28: 0C      	        DB  0CH
0B29: 01      	        DB  01H
0B2A: 02      	        DB  02H
              	        ;fim
              	
              	
              	
              	
0B2B: 30      	        DB      30H             ;8 Bit interface, basic instruction
0B2C: 0C      	        DB      0CH             ;display on, cursor & blink off
0B2D: 06      	        DB      06H             ;cursor move to right ,no shift
0B2E: 01      	        DB      01H             ;clear RAM
              	
              	;General Graphic Data
              	;Byte 1 = X pixel length, Byte 2 = Y pixel length
              	;Byte n = Pixel data where bits represent pixels.  Read from LSB
0B2F:         	FONT_DATA:
              	        ;001
0B2F: 1E      	        DB 00011110b   ;  ####
0B30: 21      	        DB 00100001b   ; #    #
0B31: 21      	        DB 00100001b   ; #    #
0B32: 21      	        DB 00100001b   ; #    #
0B33: 21      	        DB 00100001b   ; #    #
0B34: 1E      	        DB 00011110b   ;  ####
              	        ;002
0B35: 1E      	        DB 00011110b   ;  ####
0B36: 3F      	        DB 00111111b   ; ######
0B37: 3F      	        DB 00111111b   ; ######
0B38: 3F      	        DB 00111111b   ; ######
0B39: 3F      	        DB 00111111b   ; ######
0B3A: 1E      	        DB 00011110b   ;  ####
              	        ;003 Up Arrow
0B3B: 0C      	        DB 00001100b   ;   ##
0B3C: 1E      	        DB 00011110b   ;  ####
0B3D: 3F      	        DB 00111111b   ; ######
0B3E: 0C      	        DB 00001100b   ;   ##
0B3F: 0C      	        DB 00001100b   ;   ##
0B40: 0C      	        DB 00001100b   ;   ##
              	        ;004 Down Arrow
0B41: 0C      	        DB 00001100b   ;   ##
0B42: 0C      	        DB 00001100b   ;   ##
0B43: 0C      	        DB 00001100b   ;   ##
0B44: 3F      	        DB 00111111b   ; ######
0B45: 1E      	        DB 00011110b   ;  ####
0B46: 0C      	        DB 00001100b   ;   ##
              	        ;005 Left Arrow
0B47: 08      	        DB 00001000b   ;   #
0B48: 18      	        DB 00011000b   ;  ##
0B49: 3F      	        DB 00111111b   ; ######
0B4A: 3F      	        DB 00111111b   ; ######
0B4B: 18      	        DB 00011000b   ;  ##
0B4C: 08      	        DB 00001000b   ;   #
              	        ;006 Right Arrow
0B4D: 04      	        DB 00000100b   ;    #
0B4E: 06      	        DB 00000110b   ;    ##
0B4F: 3F      	        DB 00111111b   ; ######
0B50: 3F      	        DB 00111111b   ; ######
0B51: 06      	        DB 00000110b   ;    ##
0B52: 04      	        DB 00000100b   ;    #
              	        ;007 Up Hat
0B53: 0C      	        DB 00001100b   ;   ##
0B54: 1E      	        DB 00011110b   ;  ####
0B55: 3F      	        DB 00111111b   ; ######
0B56: 00      	        DB 00000000b   ;
0B57: 00      	        DB 00000000b   ;
0B58: 00      	        DB 00000000b   ;
              	        ;008 Down Hat
0B59: 00      	        DB 00000000b   ;
0B5A: 00      	        DB 00000000b   ;
0B5B: 00      	        DB 00000000b   ;
0B5C: 3F      	        DB 00111111b   ; ######
0B5D: 1E      	        DB 00011110b   ;  ####
0B5E: 0C      	        DB 00001100b   ;   ##
              	        ;009 Left Hat
0B5F: 08      	        DB 00001000b   ;   #
0B60: 18      	        DB 00011000b   ;  ##
0B61: 38      	        DB 00111000b   ; ###
0B62: 38      	        DB 00111000b   ; ###
0B63: 18      	        DB 00011000b   ;  ##
0B64: 08      	        DB 00001000b   ;   #
              	        ;010 Right Hat
0B65: 04      	        DB 00000100b   ;    #
0B66: 06      	        DB 00000110b   ;    ##
0B67: 07      	        DB 00000111b   ;    ###
0B68: 07      	        DB 00000111b   ;    ###
0B69: 06      	        DB 00000110b   ;    ##
0B6A: 04      	        DB 00000100b   ;    #
              	        ;011 Note 1
0B6B: 04      	        DB 00000100b   ;    #
0B6C: 04      	        DB 00000100b   ;    # 
0B6D: 04      	        DB 00000100b   ;    # 
0B6E: 1C      	        DB 00011100b   ;  ###
0B6F: 3C      	        DB 00111100b   ; ####
0B70: 18      	        DB 00011000b   ;  ##
              	        ;012 Note 2
0B71: 04      	        DB 00000100b   ;    #
0B72: 06      	        DB 00000110b   ;    ## 
0B73: 05      	        DB 00000101b   ;    # #
0B74: 1C      	        DB 00011100b   ;  ###
0B75: 3C      	        DB 00111100b   ; ####
0B76: 18      	        DB 00011000b   ;  ##
              	        ;013 Rocket
0B77: 0C      	        DB 00001100b   ;   ##
0B78: 0C      	        DB 00001100b   ;   ##
0B79: 0C      	        DB 00001100b   ;   ##
0B7A: 0C      	        DB 00001100b   ;   ##
0B7B: 1E      	        DB 00011110b   ;  ####
0B7C: 33      	        DB 00110011b   ; ##  ##
              	        ;014 Bomb
0B7D: 1E      	        DB 00011110b   ;  ####
0B7E: 0C      	        DB 00001100b   ;   ##
0B7F: 1E      	        DB 00011110b   ;  ####
0B80: 1E      	        DB 00011110b   ;  ####
0B81: 1E      	        DB 00011110b   ;  ####
0B82: 0C      	        DB 00001100b   ;   ##
              	        ;015 Explosion
0B83: 0C      	        DB 00001100b   ;   ##
0B84: 3F      	        DB 00111111b   ; ######
0B85: 06      	        DB 00000110b   ;    ##
0B86: 0C      	        DB 00001100b   ;   ##
0B87: 18      	        DB 00011000b   ;  ##
0B88: 0C      	        DB 00001100b   ;   ##
              	        ;016
0B89: 36      	        DB 00110110b   ; ## ##
0B8A: 24      	        DB 00100100b   ; #  #
0B8B: 00      	        DB 00000000b   ;
0B8C: 00      	        DB 00000000b   ;
0B8D: 00      	        DB 00000000b   ;
0B8E: 00      	        DB 00000000b   ;
              	        ;017
0B8F: 36      	        DB 00110110b   ; ## ##
0B90: 12      	        DB 00010010b   ;  #  #
0B91: 00      	        DB 00000000b   ;
0B92: 00      	        DB 00000000b   ;
0B93: 00      	        DB 00000000b   ;
0B94: 00      	        DB 00000000b   ;
              	        ;018
0B95: 0E      	        DB 00001110b   ;   ###
0B96: 12      	        DB 00010010b   ;  #  #
0B97: 38      	        DB 00111000b   ; ###
0B98: 12      	        DB 00010010b   ;  #  #
0B99: 3E      	        DB 00111110b   ; #####
0B9A: 00      	        DB 00000000b   ;
              	        ;019
0B9B: 1C      	        DB 00011100b   ;  ###
0B9C: 22      	        DB 00100010b   ; #   #
0B9D: 2A      	        DB 00101010b   ; # # #
0B9E: 22      	        DB 00100010b   ; #   #
0B9F: 1C      	        DB 00011100b   ;  ###
0BA0: 00      	        DB 00000000b   ;
              	        ;020
0BA1: 3E      	        DB 00111110b   ; #####
0BA2: 34      	        DB 00110100b   ; ## #
0BA3: 34      	        DB 00110100b   ; ## #
0BA4: 14      	        DB 00010100b   ;  # #
0BA5: 14      	        DB 00010100b   ;  # #
0BA6: 00      	        DB 00000000b   ;
              	        ;021
0BA7: 1C      	        DB 00011100b   ;  ###
0BA8: 18      	        DB 00011000b   ;  ##
0BA9: 24      	        DB 00100100b   ; #  #
0BAA: 18      	        DB 00011000b   ;  ##
0BAB: 38      	        DB 00111000b   ; ###
0BAC: 00      	        DB 00000000b   ;
              	        ;022
0BAD: 0C      	        DB 00001100b   ;   ##
0BAE: 0C      	        DB 00001100b   ;   ##
0BAF: 02      	        DB 00000010b   ;     #
0BB0: 00      	        DB 00000000b   ;
0BB1: 00      	        DB 00000000b   ;
0BB2: 00      	        DB 00000000b   ;
              	        ;023
0BB3: 14      	        DB 00010100b   ;  # #
0BB4: 00      	        DB 00000000b   ;
0BB5: 08      	        DB 00001000b   ;   #
0BB6: 22      	        DB 00100010b   ; #   # 
0BB7: 1C      	        DB 00011100b   ;  ###
0BB8: 00      	        DB 00000000b   ;
              	        ;024
0BB9: 14      	        DB 00010100b   ;  # #
0BBA: 00      	        DB 00000000b   ;
0BBB: 00      	        DB 00000000b   ;
0BBC: 1C      	        DB 00011100b   ;  ###
0BBD: 22      	        DB 00100010b   ; #   # 
0BBE: 00      	        DB 00000000b   ;
              	        ;025
0BBF: 08      	        DB 00001000b   ;   #
0BC0: 00      	        DB 00000000b   ;
0BC1: 18      	        DB 00011000b   ;  ##
0BC2: 22      	        DB 00100010b   ; #   #
0BC3: 1C      	        DB 00011100b   ;  ###
0BC4: 00      	        DB 00000000b   ;
              	        ;026
0BC5: 08      	        DB 00001000b   ;   #
0BC6: 00      	        DB 00000000b   ;
0BC7: 08      	        DB 00001000b   ;   #
0BC8: 08      	        DB 00001000b   ;   #
0BC9: 08      	        DB 00001000b   ;   #
0BCA: 00      	        DB 00000000b   ;
              	        ;027
0BCB: 00      	        DB 00000000b   ;
0BCC: 00      	        DB 00000000b   ;
0BCD: 3E      	        DB 00111110b   ; #####
0BCE: 06      	        DB 00000110b   ;    ##
0BCF: 06      	        DB 00000110b   ;    ##
0BD0: 00      	        DB 00000000b   ;
              	        ;028
0BD1: 1C      	        DB 00011100b   ;  ###
0BD2: 1C      	        DB 00011100b   ;  ###
0BD3: 3E      	        DB 00111110b   ; #####
0BD4: 08      	        DB 00001000b   ;   #
0BD5: 1C      	        DB 00011100b   ;  ###
0BD6: 00      	        DB 00000000b   ;
              	        ;029
0BD7: 08      	        DB 00001000b   ;   #
0BD8: 1C      	        DB 00011100b   ;  ###
0BD9: 3E      	        DB 00111110b   ; #####
0BDA: 1C      	        DB 00011100b   ;  ###
0BDB: 08      	        DB 00001000b   ;   #
0BDC: 00      	        DB 00000000b   ;
              	        ;030
0BDD: 14      	        DB 00010100b   ;  # #
0BDE: 3E      	        DB 00111110b   ; #####
0BDF: 3E      	        DB 00111110b   ; #####
0BE0: 1C      	        DB 00011100b   ;  ###
0BE1: 08      	        DB 00001000b   ;   #
0BE2: 00      	        DB 00000000b   ;
              	        ;031
0BE3: 08      	        DB 00001000b   ;   #
0BE4: 1C      	        DB 00011100b   ;  ###
0BE5: 3E      	        DB 00111110b   ; #####
0BE6: 08      	        DB 00001000b   ;   #
0BE7: 1C      	        DB 00011100b   ;  ###
0BE8: 00      	        DB 00000000b   ;
              	        ;032 Space
0BE9: 00      	        DB 00000000b   ;
0BEA: 00      	        DB 00000000b   ;
0BEB: 00      	        DB 00000000b   ;
0BEC: 00      	        DB 00000000b   ;
0BED: 00      	        DB 00000000b   ;
0BEE: 00      	        DB 00000000b   ;
              	        ;033 !
0BEF: 08      	        DB 00001000b   ;   #
0BF0: 08      	        DB 00001000b   ;   #
0BF1: 08      	        DB 00001000b   ;   #
0BF2: 00      	        DB 00000000b   ;
0BF3: 08      	        DB 00001000b   ;   #
0BF4: 00      	        DB 00000000b   ;
              	        ;034 "
0BF5: 14      	        DB 00010100b   ;  # #
0BF6: 14      	        DB 00010100b   ;  # #
0BF7: 00      	        DB 00000000b   ;
0BF8: 00      	        DB 00000000b   ;
0BF9: 00      	        DB 00000000b   ;
0BFA: 00      	        DB 00000000b   ;
              	        ;035 #
0BFB: 14      	        DB 00010100b   ;  # #
0BFC: 3E      	        DB 00111110b   ; #####
0BFD: 14      	        DB 00010100b   ;  # #
0BFE: 3E      	        DB 00111110b   ; #####
0BFF: 14      	        DB 00010100b   ;  # #
0C00: 00      	        DB 00000000b   ;
              	        ;036 $
0C01: 1E      	        DB 00011110b   ;  ####
0C02: 28      	        DB 00101000b   ; # #
0C03: 1C      	        DB 00011100b   ;  ###
0C04: 0A      	        DB 00001010b   ;   # #
0C05: 3C      	        DB 00111100b   ; ####
0C06: 00      	        DB 00000000b   ;
              	        ;037 %
0C07: 32      	        DB 00110010b   ; ##  #
0C08: 34      	        DB 00110100b   ; ## #
0C09: 08      	        DB 00001000b   ;   #
0C0A: 16      	        DB 00010110b   ;  # ##
0C0B: 26      	        DB 00100110b   ; #  ##
0C0C: 00      	        DB 00000000b   ;
              	        ;038 &
0C0D: 18      	        DB 00011000b   ;  ##
0C0E: 24      	        DB 00100100b   ; #  #
0C0F: 1A      	        DB 00011010b   ;  ## #
0C10: 24      	        DB 00100100b   ; #  #
0C11: 1A      	        DB 00011010b   ;  ## #
0C12: 00      	        DB 00000000b   ;
              	        ;039 '
0C13: 04      	        DB 00000100b   ;    #
0C14: 08      	        DB 00001000b   ;   #
0C15: 00      	        DB 00000000b   ;
0C16: 00      	        DB 00000000b   ;
0C17: 00      	        DB 00000000b   ;
0C18: 00      	        DB 00000000b   ;
              	        ;040 (
0C19: 04      	        DB 00000100b   ;    #
0C1A: 08      	        DB 00001000b   ;   #
0C1B: 08      	        DB 00001000b   ;   #
0C1C: 08      	        DB 00001000b   ;   #
0C1D: 04      	        DB 00000100b   ;    #
0C1E: 00      	        DB 00000000b   ;
              	        ;041 )
0C1F: 10      	        DB 00010000b   ;  #
0C20: 08      	        DB 00001000b   ;   #
0C21: 08      	        DB 00001000b   ;   #
0C22: 08      	        DB 00001000b   ;   #
0C23: 10      	        DB 00010000b   ;  #
0C24: 00      	        DB 00000000b   ;
              	        ;042 *
0C25: 2A      	        DB 00101010b   ; # # #
0C26: 1C      	        DB 00011100b   ;  ###
0C27: 3E      	        DB 00111110b   ; #####
0C28: 1C      	        DB 00011100b   ;  ###
0C29: 2A      	        DB 00101010b   ; # # #
0C2A: 00      	        DB 00000000b   ;
              	        ;043 +
0C2B: 00      	        DB 00000000b   ;
0C2C: 08      	        DB 00001000b   ;   #
0C2D: 1C      	        DB 00011100b   ;  ###
0C2E: 08      	        DB 00001000b   ;   #
0C2F: 00      	        DB 00000000b   ;
0C30: 00      	        DB 00000000b   ;
              	        ;044 ,
0C31: 00      	        DB 00000000b   ;
0C32: 00      	        DB 00000000b   ;
0C33: 00      	        DB 00000000b   ;
0C34: 08      	        DB 00001000b   ;   #
0C35: 10      	        DB 00010000b   ;  #
0C36: 00      	        DB 00000000b   ;
              	        ;045 -
0C37: 00      	        DB 00000000b   ;
0C38: 00      	        DB 00000000b   ;
0C39: 1C      	        DB 00011100b   ;  ###
0C3A: 00      	        DB 00000000b   ;
0C3B: 00      	        DB 00000000b   ;
0C3C: 00      	        DB 00000000b   ;
              	        ;046 .
0C3D: 00      	        DB 00000000b   ;
0C3E: 00      	        DB 00000000b   ;
0C3F: 00      	        DB 00000000b   ;
0C40: 00      	        DB 00000000b   ;
0C41: 10      	        DB 00010000b   ;  #
0C42: 00      	        DB 00000000b   ;
              	        ;047 /
0C43: 04      	        DB 00000100b   ;    #
0C44: 08      	        DB 00001000b   ;   #
0C45: 08      	        DB 00001000b   ;   #
0C46: 08      	        DB 00001000b   ;   #
0C47: 10      	        DB 00010000b   ;  #
0C48: 00      	        DB 00000000b   ;
              	        ;048 0
0C49: 1C      	        DB 00011100b   ;  ###
0C4A: 14      	        DB 00010100b   ;  # #
0C4B: 14      	        DB 00010100b   ;  # #
0C4C: 14      	        DB 00010100b   ;  # #
0C4D: 1C      	        DB 00011100b   ;  ###
0C4E: 00      	        DB 00000000b   ;
              	        ;049 1
0C4F: 08      	        DB 00001000b   ;   #
0C50: 18      	        DB 00011000b   ;  ##
0C51: 08      	        DB 00001000b   ;   #
0C52: 08      	        DB 00001000b   ;   #
0C53: 1C      	        DB 00011100b   ;  ###
0C54: 00      	        DB 00000000b   ;
              	        ;050 2
0C55: 1C      	        DB 00011100b   ;  ###
0C56: 04      	        DB 00000100b   ;    #
0C57: 1C      	        DB 00011100b   ;  ###
0C58: 10      	        DB 00010000b   ;  #
0C59: 1C      	        DB 00011100b   ;  ###
0C5A: 00      	        DB 00000000b   ;
              	        ;051 3
0C5B: 1C      	        DB 00011100b   ;  ###
0C5C: 04      	        DB 00000100b   ;    #
0C5D: 0C      	        DB 00001100b   ;   ##
0C5E: 04      	        DB 00000100b   ;    #
0C5F: 1C      	        DB 00011100b   ;  ###
0C60: 00      	        DB 00000000b   ;
              	        ;052 4
0C61: 10      	        DB 00010000b   ;  #
0C62: 10      	        DB 00010000b   ;  #
0C63: 14      	        DB 00010100b   ;  # #
0C64: 1C      	        DB 00011100b   ;  ###
0C65: 04      	        DB 00000100b   ;    #
0C66: 00      	        DB 00000000b   ;
              	        ;053 5
0C67: 1C      	        DB 00011100b   ;  ###
0C68: 10      	        DB 00010000b   ;  #
0C69: 1C      	        DB 00011100b   ;  ###
0C6A: 04      	        DB 00000100b   ;    #
0C6B: 1C      	        DB 00011100b   ;  ###
0C6C: 00      	        DB 00000000b   ;
              	        ;054 6
0C6D: 18      	        DB 00011000b   ;  ##
0C6E: 10      	        DB 00010000b   ;  #
0C6F: 1C      	        DB 00011100b   ;  ###
0C70: 14      	        DB 00010100b   ;  # #
0C71: 1C      	        DB 00011100b   ;  ###
0C72: 00      	        DB 00000000b   ;
              	        ;055 7
0C73: 1C      	        DB 00011100b   ;  ###
0C74: 04      	        DB 00000100b   ;    #
0C75: 08      	        DB 00001000b   ;   #
0C76: 10      	        DB 00010000b   ;  #
0C77: 10      	        DB 00010000b   ;  #
0C78: 00      	        DB 00000000b   ;
              	        ;056 8
0C79: 1C      	        DB 00011100b   ;  ###
0C7A: 14      	        DB 00010100b   ;  # #
0C7B: 1C      	        DB 00011100b   ;  ###
0C7C: 14      	        DB 00010100b   ;  # #
0C7D: 1C      	        DB 00011100b   ;  ###
0C7E: 00      	        DB 00000000b   ;
              	        ;057 9
0C7F: 1C      	        DB 00011100b   ;  ###
0C80: 14      	        DB 00010100b   ;  # #
0C81: 1C      	        DB 00011100b   ;  ###
0C82: 04      	        DB 00000100b   ;    #
0C83: 1C      	        DB 00011100b   ;  ###
0C84: 00      	        DB 00000000b   ;
              	        ;058 :
0C85: 00      	        DB 00000000b   ;
0C86: 08      	        DB 00001000b   ;   #
0C87: 00      	        DB 00000000b   ;
0C88: 08      	        DB 00001000b   ;   #
0C89: 00      	        DB 00000000b   ;
0C8A: 00      	        DB 00000000b   ;
              	        ;059 ;
0C8B: 00      	        DB 00000000b   ;
0C8C: 08      	        DB 00001000b   ;   #
0C8D: 00      	        DB 00000000b   ;
0C8E: 08      	        DB 00001000b   ;   #
0C8F: 10      	        DB 00010000b   ;  #
0C90: 00      	        DB 00000000b   ;
              	        ;060 <
0C91: 04      	        DB 00000100b   ;    #
0C92: 08      	        DB 00001000b   ;   #
0C93: 10      	        DB 00010000b   ;  #
0C94: 08      	        DB 00001000b   ;   #
0C95: 04      	        DB 00000100b   ;    #
0C96: 00      	        DB 00000000b   ;
              	        ;061 =
0C97: 00      	        DB 00000000b   ;
0C98: 1C      	        DB 00011100b   ;  ###
0C99: 00      	        DB 00000000b   ;
0C9A: 1C      	        DB 00011100b   ;  ###
0C9B: 00      	        DB 00000000b   ;
0C9C: 00      	        DB 00000000b   ;
              	        ;062 >
0C9D: 10      	        DB 00010000b   ;  #
0C9E: 08      	        DB 00001000b   ;   #
0C9F: 04      	        DB 00000100b   ;    #
0CA0: 08      	        DB 00001000b   ;   #
0CA1: 10      	        DB 00010000b   ;  #
0CA2: 00      	        DB 00000000b   ;
              	        ;063 ?
0CA3: 1C      	        DB 00011100b   ;  ###
0CA4: 22      	        DB 00100010b   ; #   # 
0CA5: 0C      	        DB 00001100b   ;   ##
0CA6: 00      	        DB 00000000b   ;
0CA7: 08      	        DB 00001000b   ;   #
0CA8: 00      	        DB 00000000b   ;
              	        ;064 @
0CA9: 1C      	        DB 00011100b   ;  ###
0CAA: 22      	        DB 00100010b   ; #   #
0CAB: 26      	        DB 00100110b   ; #  ##
0CAC: 2A      	        DB 00101010b   ; # # # 
0CAD: 0C      	        DB 00001100b   ;   ##
0CAE: 00      	        DB 00000000b   ;
              	        ;065 A
0CAF: 18      	        DB 00011000b   ;  ##
0CB0: 24      	        DB 00100100b   ; #  #
0CB1: 22      	        DB 00100010b   ; #   #
0CB2: 3E      	        DB 00111110b   ; #####
0CB3: 22      	        DB 00100010b   ; #   #
0CB4: 00      	        DB 00000000b   ; 
              	        ;066 B
0CB5: 38      	        DB 00111000b   ; ###
0CB6: 24      	        DB 00100100b   ; #  #
0CB7: 3C      	        DB 00111100b   ; ####
0CB8: 22      	        DB 00100010b   ; #   #
0CB9: 3C      	        DB 00111100b   ; ####
0CBA: 00      	        DB 00000000b   ; 
              	        ;067 C
0CBB: 1C      	        DB 00011100b   ;  ###
0CBC: 22      	        DB 00100010b   ; #   # 
0CBD: 20      	        DB 00100000b   ; #
0CBE: 22      	        DB 00100010b   ; #   # 
0CBF: 1C      	        DB 00011100b   ;  ###
0CC0: 00      	        DB 00000000b   ;
              	        ;068 D
0CC1: 3C      	        DB 00111100b   ; ####
0CC2: 26      	        DB 00100110b   ; #  ##
0CC3: 22      	        DB 00100010b   ; #   #
0CC4: 22      	        DB 00100010b   ; #   #
0CC5: 3C      	        DB 00111100b   ; ####
0CC6: 00      	        DB 00000000b   ;
              	        ;069 E
0CC7: 3E      	        DB 00111110b   ; #####
0CC8: 20      	        DB 00100000b   ; #
0CC9: 3C      	        DB 00111100b   ; ####
0CCA: 20      	        DB 00100000b   ; #
0CCB: 3E      	        DB 00111110b   ; #####
0CCC: 00      	        DB 00000000b   ;
              	        ;070 F
0CCD: 3E      	        DB 00111110b   ; #####
0CCE: 20      	        DB 00100000b   ; #
0CCF: 3C      	        DB 00111100b   ; ####
0CD0: 20      	        DB 00100000b   ; #
0CD1: 20      	        DB 00100000b   ; #
0CD2: 00      	        DB 00000000b   ;
              	        ;071 G
0CD3: 1C      	        DB 00011100b   ;  ###
0CD4: 20      	        DB 00100000b   ; #    
0CD5: 26      	        DB 00100110b   ; #  ##
0CD6: 22      	        DB 00100010b   ; #   # 
0CD7: 1C      	        DB 00011100b   ;  ###
0CD8: 00      	        DB 00000000b   ;
              	        ;072 H
0CD9: 24      	        DB 00100100b   ; #  #
0CDA: 22      	        DB 00100010b   ; #   #
0CDB: 3E      	        DB 00111110b   ; #####
0CDC: 22      	        DB 00100010b   ; #   #
0CDD: 22      	        DB 00100010b   ; #   #
0CDE: 00      	        DB 00000000b   ;
              	        ;073 I
0CDF: 1C      	        DB 00011100b   ;  ###
0CE0: 08      	        DB 00001000b   ;   #
0CE1: 08      	        DB 00001000b   ;   #
0CE2: 08      	        DB 00001000b   ;   #
0CE3: 1C      	        DB 00011100b   ;  ###
0CE4: 00      	        DB 00000000b   ;
              	        ;074 J
0CE5: 0C      	        DB 00001100b   ;   ##
0CE6: 04      	        DB 00000100b   ;    #
0CE7: 04      	        DB 00000100b   ;    #
0CE8: 14      	        DB 00010100b   ;  # #
0CE9: 1C      	        DB 00011100b   ;  ###
0CEA: 00      	        DB 00000000b   ;
              	        ;075 K
0CEB: 24      	        DB 00100100b   ; #  #
0CEC: 28      	        DB 00101000b   ; # #
0CED: 30      	        DB 00110000b   ; ##
0CEE: 28      	        DB 00101000b   ; # #
0CEF: 24      	        DB 00100100b   ; #  #
0CF0: 00      	        DB 00000000b   ;
              	        ;076 L
0CF1: 20      	        DB 00100000b   ; #
0CF2: 20      	        DB 00100000b   ; #
0CF3: 20      	        DB 00100000b   ; #
0CF4: 20      	        DB 00100000b   ; #
0CF5: 3C      	        DB 00111100b   ; ####
0CF6: 00      	        DB 00000000b   ; 
              	        ;077 M
0CF7: 22      	        DB 00100010b   ; #   #
0CF8: 36      	        DB 00110110b   ; ## ##
0CF9: 2A      	        DB 00101010b   ; # # #
0CFA: 22      	        DB 00100010b   ; #   #
0CFB: 22      	        DB 00100010b   ; #   #
0CFC: 00      	        DB 00000000b   ; 
              	        ;078 N
0CFD: 22      	        DB 00100010b   ; #   #
0CFE: 32      	        DB 00110010b   ; ##  #
0CFF: 2A      	        DB 00101010b   ; # # #
0D00: 26      	        DB 00100110b   ; #  ##
0D01: 22      	        DB 00100010b   ; #   #
0D02: 00      	        DB 00000000b   ; 
              	        ;079 O
0D03: 1C      	        DB 00011100b   ;  ###
0D04: 26      	        DB 00100110b   ; #  ## 
0D05: 22      	        DB 00100010b   ; #   #
0D06: 22      	        DB 00100010b   ; #   # 
0D07: 1C      	        DB 00011100b   ;  ###
0D08: 00      	        DB 00000000b   ; 
              	        ;080 P
0D09: 38      	        DB 00111000b   ; ###
0D0A: 24      	        DB 00100100b   ; #  #
0D0B: 38      	        DB 00111000b   ; ###
0D0C: 20      	        DB 00100000b   ; #
0D0D: 20      	        DB 00100000b   ; #
0D0E: 00      	        DB 00000000b   ; 
              	        ;081 Q
0D0F: 1C      	        DB 00011100b   ;  ###
0D10: 22      	        DB 00100010b   ; #   # 
0D11: 22      	        DB 00100010b   ; #   #
0D12: 26      	        DB 00100110b   ; #  ## 
0D13: 1E      	        DB 00011110b   ;  ####
0D14: 00      	        DB 00000000b   ; 
              	        ;082 R
0D15: 38      	        DB 00111000b   ; ###
0D16: 24      	        DB 00100100b   ; #  #
0D17: 38      	        DB 00111000b   ; ###
0D18: 28      	        DB 00101000b   ; # #
0D19: 24      	        DB 00100100b   ; #  #
0D1A: 00      	        DB 00000000b   ; 
              	        ;083 S
0D1B: 1E      	        DB 00011110b   ;  ####
0D1C: 20      	        DB 00100000b   ; #
0D1D: 1C      	        DB 00011100b   ;  ###
0D1E: 02      	        DB 00000010b   ;     #
0D1F: 3C      	        DB 00111100b   ; ####
0D20: 00      	        DB 00000000b   ; 
              	        ;084 T
0D21: 3E      	        DB 00111110b   ; #####
0D22: 08      	        DB 00001000b   ;   #
0D23: 08      	        DB 00001000b   ;   #
0D24: 08      	        DB 00001000b   ;   #
0D25: 08      	        DB 00001000b   ;   #
0D26: 00      	        DB 00000000b   ; 
              	        ;085 U
0D27: 24      	        DB 00100100b   ; #  #
0D28: 22      	        DB 00100010b   ; #   #
0D29: 22      	        DB 00100010b   ; #   #
0D2A: 22      	        DB 00100010b   ; #   #
0D2B: 1C      	        DB 00011100b   ;  ###
0D2C: 00      	        DB 00000000b   ; 
              	        ;086 V
0D2D: 22      	        DB 00100010b   ; #   #
0D2E: 22      	        DB 00100010b   ; #   #
0D2F: 14      	        DB 00010100b   ;  # #
0D30: 14      	        DB 00010100b   ;  # #
0D31: 08      	        DB 00001000b   ;   #
0D32: 00      	        DB 00000000b   ; 
              	        ;087 W
0D33: 24      	        DB 00100100b   ; #  #
0D34: 22      	        DB 00100010b   ; #   #
0D35: 2A      	        DB 00101010b   ; # # #
0D36: 2A      	        DB 00101010b   ; # # #
0D37: 14      	        DB 00010100b   ;  # #
0D38: 00      	        DB 00000000b   ; 
              	        ;088 X
0D39: 22      	        DB 00100010b   ; #   #
0D3A: 14      	        DB 00010100b   ;  # #
0D3B: 08      	        DB 00001000b   ;   #
0D3C: 14      	        DB 00010100b   ;  # #
0D3D: 22      	        DB 00100010b   ; #   #
0D3E: 00      	        DB 00000000b   ; 
              	        ;089 Y
0D3F: 22      	        DB 00100010b   ; #   #
0D40: 14      	        DB 00010100b   ;  # #
0D41: 08      	        DB 00001000b   ;   #
0D42: 08      	        DB 00001000b   ;   #
0D43: 08      	        DB 00001000b   ;   #
0D44: 00      	        DB 00000000b   ; 
              	        ;090 Z
0D45: 3E      	        DB 00111110b   ; #####
0D46: 04      	        DB 00000100b   ;    #
0D47: 08      	        DB 00001000b   ;   #
0D48: 10      	        DB 00010000b   ;  #
0D49: 3E      	        DB 00111110b   ; #####
0D4A: 00      	        DB 00000000b   ; 
              	        ;091 [
0D4B: 0C      	        DB 00001100b   ;   ##
0D4C: 08      	        DB 00001000b   ;   #
0D4D: 08      	        DB 00001000b   ;   #
0D4E: 08      	        DB 00001000b   ;   #
0D4F: 0C      	        DB 00001100b   ;   ##
0D50: 00      	        DB 00000000b   ; 
              	        ;092 \
0D51: 10      	        DB 00010000b   ;  #
0D52: 08      	        DB 00001000b   ;   #
0D53: 08      	        DB 00001000b   ;   #
0D54: 08      	        DB 00001000b   ;   #
0D55: 04      	        DB 00000100b   ;    #
0D56: 00      	        DB 00000000b   ; 
              	        ;093 ]
0D57: 18      	        DB 00011000b   ;  ##
0D58: 08      	        DB 00001000b   ;   #
0D59: 08      	        DB 00001000b   ;   #
0D5A: 08      	        DB 00001000b   ;   #
0D5B: 18      	        DB 00011000b   ;  ##
0D5C: 00      	        DB 00000000b   ; 
              	        ;094 ^
0D5D: 08      	        DB 00001000b   ;   #
0D5E: 14      	        DB 00010100b   ;  # #
0D5F: 00      	        DB 00000000b   ; 
0D60: 00      	        DB 00000000b   ; 
0D61: 00      	        DB 00000000b   ; 
0D62: 00      	        DB 00000000b   ; 
              	        ;095 _
0D63: 00      	        DB 00000000b   ; 
0D64: 00      	        DB 00000000b   ; 
0D65: 00      	        DB 00000000b   ; 
0D66: 00      	        DB 00000000b   ; 
0D67: 3E      	        DB 00111110b   ; #####
0D68: 00      	        DB 00000000b   ; 
              	        ;096 `
0D69: 08      	        DB 00001000b   ;   #
0D6A: 04      	        DB 00000100b   ;    #
0D6B: 00      	        DB 00000000b   ;
0D6C: 00      	        DB 00000000b   ;
0D6D: 00      	        DB 00000000b   ;
0D6E: 00      	        DB 00000000b   ;
              	        ;097 a
0D6F: 00      	        DB 00000000b   ; 
0D70: 1C      	        DB 00011100b   ;  ###
0D71: 22      	        DB 00100010b   ; #   #
0D72: 26      	        DB 00100110b   ; #  ##
0D73: 1A      	        DB 00011010b   ;  ## #
0D74: 00      	        DB 00000000b   ; 
              	        ;098 b
0D75: 20      	        DB 00100000b   ; #
0D76: 3C      	        DB 00111100b   ; ####
0D77: 22      	        DB 00100010b   ; #   #
0D78: 22      	        DB 00100010b   ; #   #
0D79: 3C      	        DB 00111100b   ; ####
0D7A: 00      	        DB 00000000b   ; 
              	        ;099 c
0D7B: 00      	        DB 00000000b   ; 
0D7C: 1C      	        DB 00011100b   ;  ###
0D7D: 20      	        DB 00100000b   ; #   
0D7E: 20      	        DB 00100000b   ; #   
0D7F: 1C      	        DB 00011100b   ;  ###
0D80: 00      	        DB 00000000b   ; 
              	        ;100 d
0D81: 02      	        DB 00000010b   ;     #
0D82: 1E      	        DB 00011110b   ;  ####
0D83: 22      	        DB 00100010b   ; #   #
0D84: 22      	        DB 00100010b   ; #   #
0D85: 1E      	        DB 00011110b   ;  ####
0D86: 00      	        DB 00000000b   ; 
              	        ;101 e
0D87: 1C      	        DB 00011100b   ;  ###
0D88: 22      	        DB 00100010b   ; #   #
0D89: 3C      	        DB 00111100b   ; ####
0D8A: 20      	        DB 00100000b   ; #
0D8B: 1E      	        DB 00011110b   ;  ####
0D8C: 00      	        DB 00000000b   ; 
              	        ;102 f
0D8D: 0E      	        DB 00001110b   ;   ###
0D8E: 10      	        DB 00010000b   ;  # 
0D8F: 3C      	        DB 00111100b   ; ####
0D90: 10      	        DB 00010000b   ;  # 
0D91: 10      	        DB 00010000b   ;  # 
0D92: 00      	        DB 00000000b   ; 
              	        ;103 g
0D93: 1E      	        DB 00011110b   ;  ####
0D94: 22      	        DB 00100010b   ; #   #
0D95: 1E      	        DB 00011110b   ;  ####
0D96: 02      	        DB 00000010b   ;     #
0D97: 3C      	        DB 00111100b   ; ####
0D98: 00      	        DB 00000000b   ; 
              	        ;104 h
0D99: 20      	        DB 00100000b   ; #
0D9A: 20      	        DB 00100000b   ; #
0D9B: 3C      	        DB 00111100b   ; ####
0D9C: 22      	        DB 00100010b   ; #   #
0D9D: 22      	        DB 00100010b   ; #   #
0D9E: 00      	        DB 00000000b   ; 
              	        ;105 i
0D9F: 08      	        DB 00001000b   ;   #
0DA0: 00      	        DB 00000000b   ; 
0DA1: 08      	        DB 00001000b   ;   #
0DA2: 08      	        DB 00001000b   ;   #
0DA3: 08      	        DB 00001000b   ;   #
0DA4: 00      	        DB 00000000b   ; 
              	        ;106 j
0DA5: 04      	        DB 00000100b   ;    # 
0DA6: 00      	        DB 00000000b   ; 
0DA7: 04      	        DB 00000100b   ;    # 
0DA8: 04      	        DB 00000100b   ;    # 
0DA9: 18      	        DB 00011000b   ;  ##
0DAA: 00      	        DB 00000000b   ; 
              	        ;107 k
0DAB: 20      	        DB 00100000b   ; #
0DAC: 24      	        DB 00100100b   ; #  #
0DAD: 28      	        DB 00101000b   ; # #
0DAE: 34      	        DB 00110100b   ; ## #
0DAF: 22      	        DB 00100010b   ; #   #
0DB0: 00      	        DB 00000000b   ; 
              	        ;108 l
0DB1: 08      	        DB 00001000b   ;   #
0DB2: 08      	        DB 00001000b   ;   #
0DB3: 08      	        DB 00001000b   ;   #
0DB4: 08      	        DB 00001000b   ;   #
0DB5: 0C      	        DB 00001100b   ;   ##
0DB6: 00      	        DB 00000000b   ; 
              	        ;109 m
0DB7: 00      	        DB 00000000b   ; 
0DB8: 14      	        DB 00010100b   ;  # #
0DB9: 2A      	        DB 00101010b   ; # # #
0DBA: 2A      	        DB 00101010b   ; # # #
0DBB: 2A      	        DB 00101010b   ; # # #
0DBC: 00      	        DB 00000000b   ; 
              	        ;110 n
0DBD: 00      	        DB 00000000b   ; 
0DBE: 1C      	        DB 00011100b   ;  ###
0DBF: 22      	        DB 00100010b   ; #   #
0DC0: 22      	        DB 00100010b   ; #   #
0DC1: 22      	        DB 00100010b   ; #   #
0DC2: 00      	        DB 00000000b   ; 
              	        ;111 o
0DC3: 00      	        DB 00000000b   ; 
0DC4: 1C      	        DB 00011100b   ;  ###
0DC5: 22      	        DB 00100010b   ; #   #
0DC6: 22      	        DB 00100010b   ; #   #
0DC7: 1C      	        DB 00011100b   ;  ###
0DC8: 00      	        DB 00000000b   ; 
              	        ;112 p
0DC9: 1C      	        DB 00011100b   ;  ###
0DCA: 22      	        DB 00100010b   ; #   #
0DCB: 22      	        DB 00100010b   ; #   #
0DCC: 3C      	        DB 00111100b   ; ####
0DCD: 20      	        DB 00100000b   ; #
0DCE: 00      	        DB 00000000b   ; 
              	        ;113 q
0DCF: 1C      	        DB 00011100b   ;  ###
0DD0: 22      	        DB 00100010b   ; #   #
0DD1: 22      	        DB 00100010b   ; #   #
0DD2: 1E      	        DB 00011110b   ;  ####
0DD3: 02      	        DB 00000010b   ;     #
0DD4: 00      	        DB 00000000b   ; 
              	        ;114 r
0DD5: 00      	        DB 00000000b   ; 
0DD6: 2C      	        DB 00101100b   ; # ##
0DD7: 30      	        DB 00110000b   ; ##
0DD8: 20      	        DB 00100000b   ; #
0DD9: 20      	        DB 00100000b   ; #
0DDA: 00      	        DB 00000000b   ; 
              	        ;115 s
0DDB: 1C      	        DB 00011100b   ;  ###
0DDC: 20      	        DB 00100000b   ; #
0DDD: 1C      	        DB 00011100b   ;  ###
0DDE: 02      	        DB 00000010b   ;     #
0DDF: 3C      	        DB 00111100b   ; ####
0DE0: 00      	        DB 00000000b   ; 
              	        ;116 t
0DE1: 08      	        DB 00001000b   ;   #
0DE2: 1C      	        DB 00011100b   ;  ###
0DE3: 08      	        DB 00001000b   ;   #
0DE4: 08      	        DB 00001000b   ;   #
0DE5: 04      	        DB 00000100b   ;    #
0DE6: 00      	        DB 00000000b   ; 
              	        ;117 u
0DE7: 00      	        DB 00000000b   ; 
0DE8: 22      	        DB 00100010b   ; #   # 
0DE9: 22      	        DB 00100010b   ; #   # 
0DEA: 22      	        DB 00100010b   ; #   # 
0DEB: 1C      	        DB 00011100b   ;  ###
0DEC: 00      	        DB 00000000b   ; 
              	        ;118 v
0DED: 00      	        DB 00000000b   ; 
0DEE: 22      	        DB 00100010b   ; #   # 
0DEF: 22      	        DB 00100010b   ; #   # 
0DF0: 14      	        DB 00010100b   ;  # # 
0DF1: 08      	        DB 00001000b   ;   #
0DF2: 00      	        DB 00000000b   ; 
              	        ;119 w
0DF3: 00      	        DB 00000000b   ; 
0DF4: 22      	        DB 00100010b   ; #   # 
0DF5: 22      	        DB 00100010b   ; #   # 
0DF6: 2A      	        DB 00101010b   ; # # # 
0DF7: 36      	        DB 00110110b   ; ## ##
0DF8: 00      	        DB 00000000b   ; 
              	        ;120 x
0DF9: 00      	        DB 00000000b   ; 
0DFA: 22      	        DB 00100010b   ; #   # 
0DFB: 1C      	        DB 00011100b   ;  ###
0DFC: 1C      	        DB 00011100b   ;  ###
0DFD: 22      	        DB 00100010b   ; #   # 
0DFE: 00      	        DB 00000000b   ; 
              	        ;121 y
0DFF: 22      	        DB 00100010b   ; #   # 
0E00: 22      	        DB 00100010b   ; #   # 
0E01: 1E      	        DB 00011110b   ;  ####
0E02: 02      	        DB 00000010b   ;     #
0E03: 3C      	        DB 00111100b   ; ####
0E04: 00      	        DB 00000000b   ; 
              	        ;122 z
0E05: 00      	        DB 00000000b   ; 
0E06: 3C      	        DB 00111100b   ; #### 
0E07: 08      	        DB 00001000b   ;   #
0E08: 10      	        DB 00010000b   ;  #
0E09: 3C      	        DB 00111100b   ; #### 
0E0A: 00      	        DB 00000000b   ; 
              	        ;123 {
0E0B: 0C      	        DB 00001100b   ;   ##
0E0C: 08      	        DB 00001000b   ;   #
0E0D: 10      	        DB 00010000b   ;  #
0E0E: 08      	        DB 00001000b   ;   #
0E0F: 0C      	        DB 00001100b   ;   ##
0E10: 00      	        DB 00000000b   ; 
              	        ;124 |
0E11: 08      	        DB 00001000b   ;   # 
0E12: 08      	        DB 00001000b   ;   # 
0E13: 08      	        DB 00001000b   ;   # 
0E14: 08      	        DB 00001000b   ;   # 
0E15: 08      	        DB 00001000b   ;   # 
0E16: 00      	        DB 00000000b   ; 
              	        ;125 }
0E17: 18      	        DB 00011000b   ;  ##
0E18: 08      	        DB 00001000b   ;   #
0E19: 04      	        DB 00000100b   ;    #
0E1A: 08      	        DB 00001000b   ;   #
0E1B: 18      	        DB 00011000b   ;  ##
0E1C: 00      	        DB 00000000b   ; 
              	        ;126 ~
0E1D: 14      	        DB 00010100b   ;  # #
0E1E: 28      	        DB 00101000b   ; # #
0E1F: 00      	        DB 00000000b   ; 
0E20: 00      	        DB 00000000b   ; 
0E21: 00      	        DB 00000000b   ; 
0E22: 00      	        DB 00000000b   ; 
              	        ;127 
0E23: 2A      	        DB 00101010b   ; # # #
0E24: 15      	        DB 00010101b   ;  # # #
0E25: 2A      	        DB 00101010b   ; # # #
0E26: 15      	        DB 00010101b   ;  # # #
0E27: 2A      	        DB 00101010b   ; # # #
0E28: 15      	        DB 00010101b   ;  # # #
              	        ;128
0E29: 00      	        DB 00000000b   ; 
0E2A: 00      	        DB 00000000b   ; 
0E2B: 00      	        DB 00000000b   ; 
0E2C: 00      	        DB 00000000b   ; 
0E2D: 00      	        DB 00000000b   ; 
0E2E: 00      	        DB 00000000b   ; 
              	        ;129
0E2F: 38      	        DB 00111000b   ; ###
0E30: 38      	        DB 00111000b   ; ###
0E31: 38      	        DB 00111000b   ; ###
0E32: 00      	        DB 00000000b   ; 
0E33: 00      	        DB 00000000b   ; 
0E34: 00      	        DB 00000000b   ; 
              	        ;130
0E35: 07      	        DB 00000111b   ;    ###
0E36: 07      	        DB 00000111b   ;    ###
0E37: 07      	        DB 00000111b   ;    ###
0E38: 00      	        DB 00000000b   ; 
0E39: 00      	        DB 00000000b   ; 
0E3A: 00      	        DB 00000000b   ; 
              	        ;131
0E3B: 3F      	        DB 00111111b   ; ######
0E3C: 3F      	        DB 00111111b   ; ######
0E3D: 3F      	        DB 00111111b   ; ######
0E3E: 00      	        DB 00000000b   ; 
0E3F: 00      	        DB 00000000b   ; 
0E40: 00      	        DB 00000000b   ; 
              	        ;132
0E41: 00      	        DB 00000000b   ; 
0E42: 00      	        DB 00000000b   ; 
0E43: 00      	        DB 00000000b   ; 
0E44: 38      	        DB 00111000b   ; ###
0E45: 38      	        DB 00111000b   ; ###
0E46: 38      	        DB 00111000b   ; ###
              	        ;133
0E47: 38      	        DB 00111000b   ; ###
0E48: 38      	        DB 00111000b   ; ###
0E49: 38      	        DB 00111000b   ; ###
0E4A: 38      	        DB 00111000b   ; ###
0E4B: 38      	        DB 00111000b   ; ###
0E4C: 38      	        DB 00111000b   ; ###
              	        ;134
0E4D: 07      	        DB 00000111b   ;    ###
0E4E: 07      	        DB 00000111b   ;    ###
0E4F: 07      	        DB 00000111b   ;    ###
0E50: 38      	        DB 00111000b   ; ###
0E51: 38      	        DB 00111000b   ; ###
0E52: 38      	        DB 00111000b   ; ###
              	        ;135
0E53: 3F      	        DB 00111111b   ; ######
0E54: 3F      	        DB 00111111b   ; ######
0E55: 3F      	        DB 00111111b   ; ######
0E56: 38      	        DB 00111000b   ; ###
0E57: 38      	        DB 00111000b   ; ###
0E58: 38      	        DB 00111000b   ; ###
              	        ;136
0E59: 00      	        DB 00000000b   ; 
0E5A: 00      	        DB 00000000b   ; 
0E5B: 00      	        DB 00000000b   ; 
0E5C: 07      	        DB 00000111b   ;    ###
0E5D: 07      	        DB 00000111b   ;    ###
0E5E: 07      	        DB 00000111b   ;    ###
              	        ;137
0E5F: 38      	        DB 00111000b   ; ###
0E60: 38      	        DB 00111000b   ; ###
0E61: 38      	        DB 00111000b   ; ###
0E62: 07      	        DB 00000111b   ;    ###
0E63: 07      	        DB 00000111b   ;    ###
0E64: 07      	        DB 00000111b   ;    ###
              	        ;138
0E65: 07      	        DB 00000111b   ;    ###
0E66: 07      	        DB 00000111b   ;    ###
0E67: 07      	        DB 00000111b   ;    ###
0E68: 07      	        DB 00000111b   ;    ###
0E69: 07      	        DB 00000111b   ;    ###
0E6A: 07      	        DB 00000111b   ;    ###
              	        ;139
0E6B: 3F      	        DB 00111111b   ; ######
0E6C: 3F      	        DB 00111111b   ; ######
0E6D: 3F      	        DB 00111111b   ; ######
0E6E: 07      	        DB 00000111b   ;    ###
0E6F: 07      	        DB 00000111b   ;    ###
0E70: 07      	        DB 00000111b   ;    ###
              	        ;140
0E71: 00      	        DB 00000000b   ; 
0E72: 00      	        DB 00000000b   ; 
0E73: 00      	        DB 00000000b   ; 
0E74: 3F      	        DB 00111111b   ; ######
0E75: 3F      	        DB 00111111b   ; ######
0E76: 3F      	        DB 00111111b   ; ######
              	        ;141
0E77: 38      	        DB 00111000b   ; ###
0E78: 38      	        DB 00111000b   ; ###
0E79: 38      	        DB 00111000b   ; ###
0E7A: 3F      	        DB 00111111b   ; ######
0E7B: 3F      	        DB 00111111b   ; ######
0E7C: 3F      	        DB 00111111b   ; ######
              	        ;142
0E7D: 07      	        DB 00000111b   ;    ###
0E7E: 07      	        DB 00000111b   ;    ###
0E7F: 07      	        DB 00000111b   ;    ###
0E80: 3F      	        DB 00111111b   ; ######
0E81: 3F      	        DB 00111111b   ; ######
0E82: 3F      	        DB 00111111b   ; ######
              	        ;143
0E83: 3F      	        DB 00111111b   ; ######
0E84: 3F      	        DB 00111111b   ; ######
0E85: 3F      	        DB 00111111b   ; ######
0E86: 3F      	        DB 00111111b   ; ######
0E87: 3F      	        DB 00111111b   ; ######
0E88: 3F      	        DB 00111111b   ; ######
              	        ;144
0E89: 00      	        DB 00000000b   ; 
0E8A: 00      	        DB 00000000b   ; 
0E8B: 0C      	        DB 00001100b   ;   ##
0E8C: 0C      	        DB 00001100b   ;   ##
0E8D: 00      	        DB 00000000b   ; 
0E8E: 00      	        DB 00000000b   ; 
              	        ;145
0E8F: 0C      	        DB 00001100b   ;   ##
0E90: 0C      	        DB 00001100b   ;   ##
0E91: 0C      	        DB 00001100b   ;   ##
0E92: 0C      	        DB 00001100b   ;   ##
0E93: 00      	        DB 00000000b   ; 
0E94: 00      	        DB 00000000b   ; 
              	        ;146
0E95: 00      	        DB 00000000b   ; 
0E96: 00      	        DB 00000000b   ; 
0E97: 0F      	        DB 00001111b   ;   ####
0E98: 0F      	        DB 00001111b   ;   ####
0E99: 00      	        DB 00000000b   ; 
0E9A: 00      	        DB 00000000b   ; 
              	        ;147
0E9B: 0C      	        DB 00001100b   ;   ##
0E9C: 0C      	        DB 00001100b   ;   ##
0E9D: 0F      	        DB 00001111b   ;   ####
0E9E: 07      	        DB 00000111b   ;    ###
0E9F: 00      	        DB 00000000b   ; 
0EA0: 00      	        DB 00000000b   ; 
              	        ;148
0EA1: 00      	        DB 00000000b   ; 
0EA2: 00      	        DB 00000000b   ; 
0EA3: 0C      	        DB 00001100b   ;   ##
0EA4: 0C      	        DB 00001100b   ;   ##
0EA5: 0C      	        DB 00001100b   ;   ##
0EA6: 0C      	        DB 00001100b   ;   ##
              	        ;149
0EA7: 0C      	        DB 00001100b   ;   ##
0EA8: 0C      	        DB 00001100b   ;   ##
0EA9: 0C      	        DB 00001100b   ;   ##
0EAA: 0C      	        DB 00001100b   ;   ##
0EAB: 0C      	        DB 00001100b   ;   ##
0EAC: 0C      	        DB 00001100b   ;   ##
              	        ;150
0EAD: 00      	        DB 00000000b   ; 
0EAE: 00      	        DB 00000000b   ; 
0EAF: 07      	        DB 00000111b   ;    ###
0EB0: 0F      	        DB 00001111b   ;   ####
0EB1: 0C      	        DB 00001100b   ;   ##
0EB2: 0C      	        DB 00001100b   ;   ##
              	        ;151
0EB3: 0C      	        DB 00001100b   ;   ##
0EB4: 0C      	        DB 00001100b   ;   ##
0EB5: 0F      	        DB 00001111b   ;   ####
0EB6: 0F      	        DB 00001111b   ;   ####
0EB7: 0C      	        DB 00001100b   ;   ##
0EB8: 0C      	        DB 00001100b   ;   ##
              	        ;152
0EB9: 00      	        DB 00000000b   ; 
0EBA: 00      	        DB 00000000b   ; 
0EBB: 3C      	        DB 00111100b   ; ####
0EBC: 3C      	        DB 00111100b   ; ####
0EBD: 00      	        DB 00000000b   ; 
0EBE: 00      	        DB 00000000b   ; 
              	        ;153
0EBF: 0C      	        DB 00001100b   ;   ##
0EC0: 0C      	        DB 00001100b   ;   ##
0EC1: 3C      	        DB 00111100b   ; ####
0EC2: 38      	        DB 00111000b   ; ###
0EC3: 00      	        DB 00000000b   ; 
0EC4: 00      	        DB 00000000b   ; 
              	        ;154
0EC5: 00      	        DB 00000000b   ; 
0EC6: 00      	        DB 00000000b   ; 
0EC7: 3F      	        DB 00111111b   ; ######
0EC8: 3F      	        DB 00111111b   ; ######
0EC9: 00      	        DB 00000000b   ; 
0ECA: 00      	        DB 00000000b   ; 
              	        ;155
0ECB: 0C      	        DB 00001100b   ;   ##
0ECC: 0C      	        DB 00001100b   ;   ##
0ECD: 3F      	        DB 00111111b   ; ######
0ECE: 3F      	        DB 00111111b   ; ######
0ECF: 00      	        DB 00000000b   ; 
0ED0: 00      	        DB 00000000b   ; 
              	        ;156
0ED1: 00      	        DB 00000000b   ; 
0ED2: 00      	        DB 00000000b   ; 
0ED3: 38      	        DB 00111000b   ; ###
0ED4: 3C      	        DB 00111100b   ; ####
0ED5: 0C      	        DB 00001100b   ;   ##
0ED6: 0C      	        DB 00001100b   ;   ##
              	        ;157
0ED7: 0C      	        DB 00001100b   ;   ##
0ED8: 0C      	        DB 00001100b   ;   ##
0ED9: 3C      	        DB 00111100b   ; ####
0EDA: 3C      	        DB 00111100b   ; ####
0EDB: 0C      	        DB 00001100b   ;   ##
0EDC: 0C      	        DB 00001100b   ;   ##
              	        ;158
0EDD: 00      	        DB 00000000b   ; 
0EDE: 00      	        DB 00000000b   ; 
0EDF: 3F      	        DB 00111111b   ; ######
0EE0: 3F      	        DB 00111111b   ; ######
0EE1: 0C      	        DB 00001100b   ;   ##
0EE2: 0C      	        DB 00001100b   ;   ##
              	        ;159
0EE3: 0C      	        DB 00001100b   ;   ##
0EE4: 0C      	        DB 00001100b   ;   ##
0EE5: 3F      	        DB 00111111b   ; ######
0EE6: 3F      	        DB 00111111b   ; ######
0EE7: 0C      	        DB 00001100b   ;   ##
0EE8: 0C      	        DB 00001100b   ;   ##
              	        ;160
0EE9: 00      	        DB 00000000b   ; 
0EEA: 12      	        DB 00010010b   ;  #  #
0EEB: 00      	        DB 00000000b   ; 
0EEC: 00      	        DB 00000000b   ; 
0EED: 12      	        DB 00010010b   ;  #  #
0EEE: 00      	        DB 00000000b   ; 
              	        ;161
0EEF: 12      	        DB 00010010b   ;  #  #
0EF0: 12      	        DB 00010010b   ;  #  #
0EF1: 12      	        DB 00010010b   ;  #  #
0EF2: 12      	        DB 00010010b   ;  #  #
0EF3: 00      	        DB 00000000b   ; 
0EF4: 00      	        DB 00000000b   ; 
              	        ;162
0EF5: 00      	        DB 00000000b   ; 
0EF6: 0F      	        DB 00001111b   ;   ####
0EF7: 00      	        DB 00000000b   ; 
0EF8: 00      	        DB 00000000b   ; 
0EF9: 0F      	        DB 00001111b   ;   ####
0EFA: 00      	        DB 00000000b   ; 
              	        ;163
0EFB: 12      	        DB 00010010b   ;  #  #
0EFC: 13      	        DB 00010011b   ;  #  ##
0EFD: 10      	        DB 00010000b   ;  #
0EFE: 10      	        DB 00010000b   ;  #
0EFF: 0F      	        DB 00001111b   ;   ####
0F00: 00      	        DB 00000000b   ; 
              	        ;164
0F01: 00      	        DB 00000000b   ; 
0F02: 00      	        DB 00000000b   ; 
0F03: 12      	        DB 00010010b   ;  #  #
0F04: 12      	        DB 00010010b   ;  #  #
0F05: 12      	        DB 00010010b   ;  #  #
0F06: 12      	        DB 00010010b   ;  #  #
              	        ;165
0F07: 12      	        DB 00010010b   ;  #  #
0F08: 12      	        DB 00010010b   ;  #  #
0F09: 12      	        DB 00010010b   ;  #  #
0F0A: 12      	        DB 00010010b   ;  #  #
0F0B: 12      	        DB 00010010b   ;  #  #
0F0C: 12      	        DB 00010010b   ;  #  #
              	        ;166
0F0D: 00      	        DB 00000000b   ; 
0F0E: 0F      	        DB 00001111b   ;   ####
0F0F: 10      	        DB 00010000b   ;  #
0F10: 10      	        DB 00010000b   ;  #
0F11: 13      	        DB 00010011b   ;  #  ##
0F12: 12      	        DB 00010010b   ;  #  #
              	        ;167
0F13: 12      	        DB 00010010b   ;  #  #
0F14: 13      	        DB 00010011b   ;  #  ##
0F15: 10      	        DB 00010000b   ;  #
0F16: 10      	        DB 00010000b   ;  #
0F17: 13      	        DB 00010011b   ;  #  ##
0F18: 12      	        DB 00010010b   ;  #  #
              	        ;168
0F19: 00      	        DB 00000000b   ; 
0F1A: 3C      	        DB 00111100b   ; ####
0F1B: 00      	        DB 00000000b   ; 
0F1C: 00      	        DB 00000000b   ; 
0F1D: 3C      	        DB 00111100b   ; ####
0F1E: 00      	        DB 00000000b   ; 
              	        ;169
0F1F: 12      	        DB 00010010b   ;  #  #
0F20: 32      	        DB 00110010b   ; ##  #
0F21: 02      	        DB 00000010b   ;     #
0F22: 02      	        DB 00000010b   ;     #
0F23: 3C      	        DB 00111100b   ; ####
0F24: 00      	        DB 00000000b   ; 
              	        ;170
0F25: 00      	        DB 00000000b   ; 
0F26: 3F      	        DB 00111111b   ; ######
0F27: 00      	        DB 00000000b   ; 
0F28: 00      	        DB 00000000b   ; 
0F29: 3F      	        DB 00111111b   ; ######
0F2A: 00      	        DB 00000000b   ; 
              	        ;171
0F2B: 12      	        DB 00010010b   ;  #  #
0F2C: 33      	        DB 00110011b   ; ##  ##
0F2D: 00      	        DB 00000000b   ; 
0F2E: 00      	        DB 00000000b   ; 
0F2F: 3F      	        DB 00111111b   ; ######
0F30: 00      	        DB 00000000b   ; 
              	        ;172
0F31: 00      	        DB 00000000b   ; 
0F32: 3C      	        DB 00111100b   ; ####
0F33: 02      	        DB 00000010b   ;     #
0F34: 02      	        DB 00000010b   ;     #
0F35: 32      	        DB 00110010b   ; ##  #
0F36: 12      	        DB 00010010b   ;  #  #
              	        ;173
0F37: 12      	        DB 00010010b   ;  #  #
0F38: 32      	        DB 00110010b   ; ##  #
0F39: 02      	        DB 00000010b   ;     #
0F3A: 02      	        DB 00000010b   ;     #
0F3B: 32      	        DB 00110010b   ; ##  #
0F3C: 12      	        DB 00010010b   ;  #  #
              	        ;174
0F3D: 00      	        DB 00000000b   ; 
0F3E: 3F      	        DB 00111111b   ; ######
0F3F: 00      	        DB 00000000b   ; 
0F40: 00      	        DB 00000000b   ; 
0F41: 33      	        DB 00110011b   ; ##  ##
0F42: 12      	        DB 00010010b   ;  #  #
              	        ;175
0F43: 12      	        DB 00010010b   ;  #  #
0F44: 33      	        DB 00110011b   ; ##  ##
0F45: 00      	        DB 00000000b   ; 
0F46: 00      	        DB 00000000b   ; 
0F47: 33      	        DB 00110011b   ; ##  ##
0F48: 12      	        DB 00010010b   ;  #  #
              	        ;176
0F49: 0C      	        DB 00001100b   ;   ##
0F4A: 18      	        DB 00011000b   ;  ##
0F4B: 30      	        DB 00110000b   ; ##
0F4C: 20      	        DB 00100000b   ; #
0F4D: 00      	        DB 00000000b   ; 
0F4E: 00      	        DB 00000000b   ; 
              	        ;177
0F4F: 0C      	        DB 00001100b   ;   ##
0F50: 06      	        DB 00000110b   ;    ##
0F51: 03      	        DB 00000011b   ;     ##
0F52: 01      	        DB 00000001b   ;      #
0F53: 00      	        DB 00000000b   ; 
0F54: 00      	        DB 00000000b   ; 
              	        ;178
0F55: 00      	        DB 00000000b   ; 
0F56: 00      	        DB 00000000b   ; 
0F57: 01      	        DB 00000001b   ;      #
0F58: 03      	        DB 00000011b   ;     ##
0F59: 06      	        DB 00000110b   ;    ##
0F5A: 0C      	        DB 00001100b   ;   ##
              	        ;179
0F5B: 00      	        DB 00000000b   ; 
0F5C: 00      	        DB 00000000b   ; 
0F5D: 20      	        DB 00100000b   ; #
0F5E: 30      	        DB 00110000b   ; ##
0F5F: 18      	        DB 00011000b   ;  ##
0F60: 0C      	        DB 00001100b   ;   ##
              	        ;180
0F61: 0C      	        DB 00001100b   ;   ##
0F62: 1E      	        DB 00011110b   ;  ####
0F63: 33      	        DB 00110011b   ; ##  ##
0F64: 21      	        DB 00100001b   ; #    # 
0F65: 00      	        DB 00000000b   ; 
0F66: 00      	        DB 00000000b   ; 
              	        ;181
0F67: 0C      	        DB 00001100b   ;   ##
0F68: 06      	        DB 00000110b   ;    ##
0F69: 03      	        DB 00000011b   ;     ##
0F6A: 03      	        DB 00000011b   ;     ##
0F6B: 06      	        DB 00000110b   ;    ##
0F6C: 0C      	        DB 00001100b   ;   ##
              	        ;182
0F6D: 00      	        DB 00000000b   ; 
0F6E: 00      	        DB 00000000b   ; 
0F6F: 21      	        DB 00100001b   ; #    # 
0F70: 33      	        DB 00110011b   ; ##  ##
0F71: 1E      	        DB 00011110b   ;  ####
0F72: 0C      	        DB 00001100b   ;   ##
              	        ;183
0F73: 0C      	        DB 00001100b   ;   ##
0F74: 18      	        DB 00011000b   ;  ##
0F75: 30      	        DB 00110000b   ; ##
0F76: 30      	        DB 00110000b   ; ##
0F77: 18      	        DB 00011000b   ;  ##
0F78: 0C      	        DB 00001100b   ;   ##
              	        ;184
0F79: 0C      	        DB 00001100b   ;   ##
0F7A: 18      	        DB 00011000b   ;  ##
0F7B: 31      	        DB 00110001b   ; ##   #
0F7C: 23      	        DB 00100011b   ; #   ##
0F7D: 06      	        DB 00000110b   ;    ##
0F7E: 0C      	        DB 00001100b   ;   ##
              	        ;185
0F7F: 0C      	        DB 00001100b   ;   ##
0F80: 06      	        DB 00000110b   ;    ##
0F81: 23      	        DB 00100011b   ; #   ##
0F82: 31      	        DB 00110001b   ; ##   #
0F83: 18      	        DB 00011000b   ;  ##
0F84: 0C      	        DB 00001100b   ;   ##
              	        ;186
0F85: 0C      	        DB 00001100b   ;   ##
0F86: 1E      	        DB 00011110b   ;  ####
0F87: 33      	        DB 00110011b   ; ##  ##
0F88: 33      	        DB 00110011b   ; ##  ##
0F89: 1E      	        DB 00011110b   ;  ####
0F8A: 0C      	        DB 00001100b   ;   ##
              	        ;187
0F8B: 33      	        DB 00110011b   ; ##  ##
0F8C: 33      	        DB 00110011b   ; ##  ##
0F8D: 0C      	        DB 00001100b   ;   ##
0F8E: 0C      	        DB 00001100b   ;   ##
0F8F: 33      	        DB 00110011b   ; ##  ##
0F90: 33      	        DB 00110011b   ; ##  ##
              	        ;188
0F91: 03      	        DB 00000011b   ;     ##
0F92: 03      	        DB 00000011b   ;     ##
0F93: 0C      	        DB 00001100b   ;   ##
0F94: 0C      	        DB 00001100b   ;   ##
0F95: 30      	        DB 00110000b   ; ##
0F96: 30      	        DB 00110000b   ; ##
              	        ;189
0F97: 30      	        DB 00110000b   ; ##
0F98: 30      	        DB 00110000b   ; ##
0F99: 0C      	        DB 00001100b   ;   ##
0F9A: 0C      	        DB 00001100b   ;   ##
0F9B: 03      	        DB 00000011b   ;     ##
0F9C: 03      	        DB 00000011b   ;     ##
              	        ;190
0F9D: 2A      	        DB 00101010b   ; # # #
0F9E: 14      	        DB 00010100b   ;  # #
0F9F: 2A      	        DB 00101010b   ; # # #
0FA0: 14      	        DB 00010100b   ;  # #
0FA1: 2A      	        DB 00101010b   ; # # #
0FA2: 00      	        DB 00000000b   ; 
              	        ;191
0FA3: 14      	        DB 00010100b   ;  # #
0FA4: 2A      	        DB 00101010b   ; # # #
0FA5: 14      	        DB 00010100b   ;  # #
0FA6: 2A      	        DB 00101010b   ; # # #
0FA7: 14      	        DB 00010100b   ;  # #
0FA8: 00      	        DB 00000000b   ; 
              	        ;192
0FA9: 00      	        DB 00000000b   ; 
0FAA: 1A      	        DB 00011010b   ;  ## #
0FAB: 24      	        DB 00100100b   ; #  #
0FAC: 24      	        DB 00100100b   ; #  #
0FAD: 1A      	        DB 00011010b   ;  ## #
0FAE: 00      	        DB 00000000b   ; 
              	        ;193
0FAF: 18      	        DB 00011000b   ;  ##
0FB0: 24      	        DB 00100100b   ; #  #
0FB1: 2C      	        DB 00101100b   ; # ##
0FB2: 22      	        DB 00100010b   ; #   #
0FB3: 2C      	        DB 00101100b   ; # ##
0FB4: 00      	        DB 00000000b   ; 
              	        ;194
0FB5: 00      	        DB 00000000b   ; 
0FB6: 22      	        DB 00100010b   ; #   #
0FB7: 1C      	        DB 00011100b   ;  ###
0FB8: 22      	        DB 00100010b   ; #   #
0FB9: 1C      	        DB 00011100b   ;  ###
0FBA: 00      	        DB 00000000b   ; 
              	        ;195
0FBB: 1C      	        DB 00011100b   ;  ###
0FBC: 30      	        DB 00110000b   ; ##
0FBD: 1C      	        DB 00011100b   ;  ###
0FBE: 22      	        DB 00100010b   ; #   #
0FBF: 1C      	        DB 00011100b   ;  ### 
0FC0: 00      	        DB 00000000b   ; 
              	        ;196
0FC1: 0E      	        DB 00001110b   ;   ### 
0FC2: 30      	        DB 00110000b   ; ##
0FC3: 3C      	        DB 00111100b   ; ####
0FC4: 30      	        DB 00110000b   ; ##
0FC5: 0E      	        DB 00001110b   ;   ###
0FC6: 00      	        DB 00000000b   ; 
              	        ;197
0FC7: 1C      	        DB 00011100b   ;  ###
0FC8: 22      	        DB 00100010b   ; #   #
0FC9: 3E      	        DB 00111110b   ; #####
0FCA: 22      	        DB 00100010b   ; #   #
0FCB: 1C      	        DB 00011100b   ;  ###
0FCC: 00      	        DB 00000000b   ; 
              	        ;198
0FCD: 20      	        DB 00100000b   ; #
0FCE: 10      	        DB 00010000b   ;  #
0FCF: 08      	        DB 00001000b   ;   #
0FD0: 14      	        DB 00010100b   ;  # #
0FD1: 22      	        DB 00100010b   ; #   # 
0FD2: 00      	        DB 00000000b   ; 
              	        ;199
0FD3: 24      	        DB 00100100b   ; #  #
0FD4: 24      	        DB 00100100b   ; #  #
0FD5: 38      	        DB 00111000b   ; ###
0FD6: 20      	        DB 00100000b   ; #
0FD7: 20      	        DB 00100000b   ; # 
0FD8: 00      	        DB 00000000b   ; 
              	        ;200
0FD9: 00      	        DB 00000000b   ; 
0FDA: 3E      	        DB 00111110b   ; #####
0FDB: 14      	        DB 00010100b   ;  # #
0FDC: 14      	        DB 00010100b   ;  # #
0FDD: 24      	        DB 00100100b   ; #  #
0FDE: 00      	        DB 00000000b   ; 
              	        ;201
0FDF: 00      	        DB 00000000b   ; 
0FE0: 1E      	        DB 00011110b   ;  ####
0FE1: 34      	        DB 00110100b   ; ## #
0FE2: 34      	        DB 00110100b   ; ## #
0FE3: 18      	        DB 00011000b   ;  ##
0FE4: 00      	        DB 00000000b   ; 
              	        ;202
0FE5: 06      	        DB 00000110b   ;    ##
0FE6: 1C      	        DB 00011100b   ;  ###
0FE7: 36      	        DB 00110110b   ; ## ##
0FE8: 1C      	        DB 00011100b   ;  ###
0FE9: 30      	        DB 00110000b   ; ##
0FEA: 00      	        DB 00000000b   ; 
              	        ;203
0FEB: 06      	        DB 00000110b   ;    ##
0FEC: 04      	        DB 00000100b   ;    #
0FED: 36      	        DB 00110110b   ; ## ##
0FEE: 1C      	        DB 00011100b   ;  ###
0FEF: 30      	        DB 00110000b   ; ##
0FF0: 00      	        DB 00000000b   ; 
              	        ;204
0FF1: 32      	        DB 00110010b   ; ##  #
0FF2: 1C      	        DB 00011100b   ;  ###
0FF3: 0C      	        DB 00001100b   ;   ##
0FF4: 16      	        DB 00010110b   ;  # ##
0FF5: 22      	        DB 00100010b   ; #   #
0FF6: 00      	        DB 00000000b   ; 
              	        ;205
0FF7: 00      	        DB 00000000b   ; 
0FF8: 14      	        DB 00010100b   ;  # #
0FF9: 22      	        DB 00100010b   ; #   #
0FFA: 2A      	        DB 00101010b   ; # # #
0FFB: 1C      	        DB 00011100b   ;  ###
0FFC: 00      	        DB 00000000b   ; 
              	        ;206
0FFD: 3E      	        DB 00111110b   ; #####
0FFE: 12      	        DB 00010010b   ;  #  #
0FFF: 08      	        DB 00001000b   ;   #
1000: 12      	        DB 00010010b   ;  #  #
1001: 3E      	        DB 00111110b   ; #####
1002: 00      	        DB 00000000b   ; 
              	        ;207
1003: 1C      	        DB 00011100b   ;  ###
1004: 22      	        DB 00100010b   ; #   #
1005: 22      	        DB 00100010b   ; #   #
1006: 14      	        DB 00010100b   ;  # #
1007: 36      	        DB 00110110b   ; ## ##
1008: 00      	        DB 00000000b   ; 
              	        ;208
1009: 1C      	        DB 00011100b   ;  ###
100A: 1C      	        DB 00011100b   ;  ###
100B: 0A      	        DB 00001010b   ;   # #
100C: 1C      	        DB 00011100b   ;  ###
100D: 28      	        DB 00101000b   ; # #
100E: 08      	        DB 00001000b   ;   #
              	        ;209
100F: 1C      	        DB 00011100b   ;  ###
1010: 1C      	        DB 00011100b   ;  ###
1011: 28      	        DB 00101000b   ; # #
1012: 1C      	        DB 00011100b   ;  ###
1013: 0A      	        DB 00001010b   ;   # #
1014: 08      	        DB 00001000b   ;   #
              	        ;210
1015: 1C      	        DB 00011100b   ;  ###
1016: 1C      	        DB 00011100b   ;  ###
1017: 2A      	        DB 00101010b   ; # # #
1018: 1C      	        DB 00011100b   ;  ###
1019: 08      	        DB 00001000b   ;   # 
101A: 08      	        DB 00001000b   ;   #
              	        ;211
101B: 1C      	        DB 00011100b   ;  ###
101C: 1C      	        DB 00011100b   ;  ###
101D: 08      	        DB 00001000b   ;   # 
101E: 1C      	        DB 00011100b   ;  ###
101F: 2A      	        DB 00101010b   ; # # #
1020: 08      	        DB 00001000b   ;   #
              	        ;212
1021: 14      	        DB 00010100b   ;  # # 
1022: 00      	        DB 00000000b   ; 
1023: 14      	        DB 00010100b   ;  # # 
1024: 14      	        DB 00010100b   ;  # # 
1025: 1C      	        DB 00011100b   ;  ###
1026: 00      	        DB 00000000b   ; 
              	        ;213
1027: 14      	        DB 00010100b   ;  # # 
1028: 00      	        DB 00000000b   ; 
1029: 1C      	        DB 00011100b   ;  ###
102A: 14      	        DB 00010100b   ;  # # 
102B: 1C      	        DB 00011100b   ;  ###
102C: 00      	        DB 00000000b   ; 
              	        ;214
102D: 14      	        DB 00010100b   ;  # # 
102E: 00      	        DB 00000000b   ; 
102F: 1C      	        DB 00011100b   ;  ###
1030: 14      	        DB 00010100b   ;  # # 
1031: 1E      	        DB 00011110b   ;  ####
1032: 00      	        DB 00000000b   ; 
              	        ;215
1033: 14      	        DB 00010100b   ;  # # 
1034: 00      	        DB 00000000b   ; 
1035: 1C      	        DB 00011100b   ;  ###
1036: 14      	        DB 00010100b   ;  # # 
1037: 14      	        DB 00010100b   ;  # # 
1038: 00      	        DB 00000000b   ; 
              	        ;216
1039: 28      	        DB 00101000b   ; # #
103A: 2C      	        DB 00101100b   ; # ## 
103B: 3E      	        DB 00111110b   ; ##### 
103C: 0C      	        DB 00001100b   ;   ## 
103D: 08      	        DB 00001000b   ;   #
103E: 00      	        DB 00000000b   ; 
              	        ;217
103F: 0A      	        DB 00001010b   ;   # #
1040: 1A      	        DB 00011010b   ;  ## #
1041: 3E      	        DB 00111110b   ; #####
1042: 18      	        DB 00011000b   ;  ## 
1043: 08      	        DB 00001000b   ;   #
1044: 00      	        DB 00000000b   ; 
              	        ;218
1045: 08      	        DB 00001000b   ;   #
1046: 1C      	        DB 00011100b   ;  ###
1047: 08      	        DB 00001000b   ;   #
1048: 00      	        DB 00000000b   ;  
1049: 1C      	        DB 00011100b   ;  ###
104A: 00      	        DB 00000000b   ;
              	        ;219
104B: 08      	        DB 00001000b   ;   #
104C: 00      	        DB 00000000b   ; 
104D: 3E      	        DB 00111110b   ; #####
104E: 00      	        DB 00000000b   ;
104F: 08      	        DB 00001000b   ;   #
1050: 00      	        DB 00000000b   ;
              	        ;220
1051: 04      	        DB 00000100b   ;    #
1052: 08      	        DB 00001000b   ;   # 
1053: 10      	        DB 00010000b   ;  #
1054: 08      	        DB 00001000b   ;   # 
1055: 1C      	        DB 00011100b   ;  ###
1056: 00      	        DB 00000000b   ; 
              	        ;221
1057: 10      	        DB 00010000b   ;  #
1058: 08      	        DB 00001000b   ;   # 
1059: 04      	        DB 00000100b   ;    #
105A: 08      	        DB 00001000b   ;   # 
105B: 1C      	        DB 00011100b   ;  ###
105C: 00      	        DB 00000000b   ; 
              	        ;222
105D: 1C      	        DB 00011100b   ;  ###
105E: 00      	        DB 00000000b   ; 
105F: 1C      	        DB 00011100b   ;  ###
1060: 00      	        DB 00000000b   ; 
1061: 1C      	        DB 00011100b   ;  ###
1062: 00      	        DB 00000000b   ; 
              	        ;223
1063: 06      	        DB 00000110b   ;    ## 
1064: 04      	        DB 00000100b   ;    # 
1065: 34      	        DB 00110100b   ; ## #
1066: 14      	        DB 00010100b   ;  # # 
1067: 08      	        DB 00001000b   ;   # 
1068: 00      	        DB 00000000b   ; 
              	        ;224
1069: 1E      	        DB 00011110b   ;  #### 
106A: 0E      	        DB 00001110b   ;   ### 
106B: 0E      	        DB 00001110b   ;   ### 
106C: 12      	        DB 00010010b   ;  #  #
106D: 20      	        DB 00100000b   ; # 
106E: 00      	        DB 00000000b   ; 
              	        ;225
106F: 20      	        DB 00100000b   ; #
1070: 12      	        DB 00010010b   ;  #  #
1071: 0E      	        DB 00001110b   ;   ###
1072: 0E      	        DB 00001110b   ;   ###
1073: 1E      	        DB 00011110b   ;  ####
1074: 00      	        DB 00000000b   ; 
              	        ;226
1075: 02      	        DB 00000010b   ;      #
1076: 24      	        DB 00100100b   ;  #  #
1077: 38      	        DB 00111000b   ;  ###
1078: 38      	        DB 00111000b   ;  ###
1079: 3C      	        DB 00111100b   ;  #### 
107A: 00      	        DB 00000000b   ; 
              	        ;227
107B: 3C      	        DB 00111100b   ; ####
107C: 38      	        DB 00111000b   ; ###
107D: 38      	        DB 00111000b   ; ###
107E: 24      	        DB 00100100b   ; #  # 
107F: 02      	        DB 00000010b   ;     #
1080: 00      	        DB 00000000b   ; 
              	        ;228
1081: 3E      	        DB 00111110b   ; #####
1082: 22      	        DB 00100010b   ; #   #
1083: 22      	        DB 00100010b   ; #   #
1084: 22      	        DB 00100010b   ; #   #
1085: 3E      	        DB 00111110b   ; #####
1086: 00      	        DB 00000000b   ; 
              	        ;229
1087: 3E      	        DB 00111110b   ; #####
1088: 26      	        DB 00100110b   ; #  ##
1089: 2A      	        DB 00101010b   ; # # #
108A: 32      	        DB 00110010b   ; ##  #
108B: 3E      	        DB 00111110b   ; #####
108C: 00      	        DB 00000000b   ; 
              	        ;230
108D: 08      	        DB 00001000b   ;   # 
108E: 12      	        DB 00010010b   ;  #  #
108F: 24      	        DB 00100100b   ; #  #
1090: 12      	        DB 00010010b   ;  #  #
1091: 08      	        DB 00001000b   ;   # 
1092: 00      	        DB 00000000b   ; 
              	        ;231
1093: 08      	        DB 00001000b   ;   # 
1094: 24      	        DB 00100100b   ; #  #
1095: 12      	        DB 00010010b   ;  #  #
1096: 24      	        DB 00100100b   ; #  #
1097: 08      	        DB 00001000b   ;   # 
1098: 00      	        DB 00000000b   ; 
              	        ;232 TEC-1G
1099: 1D      	        DB 00011101b   ;  ### #
109A: 08      	        DB 00001000b   ;   #
109B: 09      	        DB 00001001b   ;   #  #
109C: 08      	        DB 00001000b   ;   #
109D: 09      	        DB 00001001b   ;   #  #
109E: 00      	        DB 00000000b   ; 
              	        ;233 TEC-1G
109F: 37      	        DB 00110111b   ; ## ###
10A0: 04      	        DB 00000100b   ;    #
10A1: 34      	        DB 00110100b   ; ## #
10A2: 04      	        DB 00000100b   ;    #
10A3: 37      	        DB 00110111b   ; ## ###
10A4: 00      	        DB 00000000b   ; 
              	        ;234 TEC-1G
10A5: 00      	        DB 00000000b   ; 
10A6: 01      	        DB 00000001b   ;      #
10A7: 1C      	        DB 00011100b   ;  ###
10A8: 00      	        DB 00000000b   ; 
10A9: 00      	        DB 00000000b   ; 
10AA: 00      	        DB 00000000b   ; 
              	        ;235 TEC-1G
10AB: 2E      	        DB 00101110b   ; # ###
10AC: 28      	        DB 00101000b   ; # #
10AD: 2A      	        DB 00101010b   ; # # #
10AE: 2A      	        DB 00101010b   ; # # #
10AF: 2E      	        DB 00101110b   ; # ###
10B0: 00      	        DB 00000000b   ; 
              	        ;236 Z80
10B1: 1D      	        DB 00011101b   ;  ### #
10B2: 05      	        DB 00000101b   ;    # #
10B3: 09      	        DB 00001001b   ;   #  #
10B4: 11      	        DB 00010001b   ;  #   #
10B5: 1D      	        DB 00011101b   ;  ### #
10B6: 00      	        DB 00000000b   ; 
              	        ;237 Z80
10B7: 37      	        DB 00110111b   ; ## ###
10B8: 15      	        DB 00010101b   ;  # # #
10B9: 35      	        DB 00110101b   ; ## # #
10BA: 15      	        DB 00010101b   ;  # # #
10BB: 37      	        DB 00110111b   ; ## ###
10BC: 00      	        DB 00000000b   ; 
              	        ;238 CPU
10BD: 1D      	        DB 00011101b   ;  ### #
10BE: 11      	        DB 00010001b   ;  #   #
10BF: 11      	        DB 00010001b   ;  #   #
10C0: 11      	        DB 00010001b   ;  #   #
10C1: 1D      	        DB 00011101b   ;  ### #
10C2: 00      	        DB 00000000b   ; 
              	        ;239 CPU
10C3: 35      	        DB 00110101b   ; ## # #
10C4: 15      	        DB 00010101b   ;  # # #
10C5: 35      	        DB 00110101b   ; ## # #
10C6: 05      	        DB 00000101b   ;    # #
10C7: 07      	        DB 00000111b   ;    ###
10C8: 00      	        DB 00000000b   ; 
              	        ;240
10C9: 00      	        DB 00000000b   ; 
10CA: 00      	        DB 00000000b   ; 
10CB: 00      	        DB 00000000b   ; 
10CC: 00      	        DB 00000000b   ; 
10CD: 00      	        DB 00000000b   ; 
10CE: 00      	        DB 00000000b   ; 
              	        ;241
10CF: 00      	        DB 00000000b   ; 
10D0: 00      	        DB 00000000b   ; 
10D1: 00      	        DB 00000000b   ; 
10D2: 00      	        DB 00000000b   ; 
10D3: 00      	        DB 00000000b   ; 
10D4: 00      	        DB 00000000b   ; 
              	        ;242
10D5: 00      	        DB 00000000b   ; 
10D6: 00      	        DB 00000000b   ; 
10D7: 00      	        DB 00000000b   ; 
10D8: 00      	        DB 00000000b   ; 
10D9: 00      	        DB 00000000b   ; 
10DA: 00      	        DB 00000000b   ; 
              	        ;243
10DB: 00      	        DB 00000000b   ; 
10DC: 00      	        DB 00000000b   ; 
10DD: 00      	        DB 00000000b   ; 
10DE: 00      	        DB 00000000b   ; 
10DF: 00      	        DB 00000000b   ; 
10E0: 00      	        DB 00000000b   ; 
              	        ;244
10E1: 00      	        DB 00000000b   ; 
10E2: 00      	        DB 00000000b   ; 
10E3: 00      	        DB 00000000b   ; 
10E4: 00      	        DB 00000000b   ; 
10E5: 00      	        DB 00000000b   ; 
10E6: 00      	        DB 00000000b   ; 
              	        ;245
10E7: 00      	        DB 00000000b   ; 
10E8: 00      	        DB 00000000b   ; 
10E9: 00      	        DB 00000000b   ; 
10EA: 00      	        DB 00000000b   ; 
10EB: 00      	        DB 00000000b   ; 
10EC: 00      	        DB 00000000b   ; 
              	        ;246
10ED: 00      	        DB 00000000b   ; 
10EE: 00      	        DB 00000000b   ; 
10EF: 00      	        DB 00000000b   ; 
10F0: 00      	        DB 00000000b   ; 
10F1: 00      	        DB 00000000b   ; 
10F2: 00      	        DB 00000000b   ; 
              	        ;247
10F3: 00      	        DB 00000000b   ; 
10F4: 00      	        DB 00000000b   ; 
10F5: 00      	        DB 00000000b   ; 
10F6: 00      	        DB 00000000b   ; 
10F7: 00      	        DB 00000000b   ; 
10F8: 00      	        DB 00000000b   ; 
              	        ;248
10F9: 00      	        DB 00000000b   ; 
10FA: 00      	        DB 00000000b   ; 
10FB: 00      	        DB 00000000b   ; 
10FC: 00      	        DB 00000000b   ; 
10FD: 00      	        DB 00000000b   ; 
10FE: 00      	        DB 00000000b   ; 
              	        ;249
10FF: 00      	        DB 00000000b   ; 
1100: 00      	        DB 00000000b   ; 
1101: 00      	        DB 00000000b   ; 
1102: 00      	        DB 00000000b   ; 
1103: 00      	        DB 00000000b   ; 
1104: 00      	        DB 00000000b   ; 
              	        ;250
1105: 00      	        DB 00000000b   ; 
1106: 00      	        DB 00000000b   ; 
1107: 00      	        DB 00000000b   ; 
1108: 00      	        DB 00000000b   ; 
1109: 00      	        DB 00000000b   ; 
110A: 00      	        DB 00000000b   ; 
              	        ;251
110B: 00      	        DB 00000000b   ; 
110C: 00      	        DB 00000000b   ; 
110D: 00      	        DB 00000000b   ; 
110E: 00      	        DB 00000000b   ; 
110F: 00      	        DB 00000000b   ; 
1110: 00      	        DB 00000000b   ; 
              	        ;252
1111: 00      	        DB 00000000b   ; 
1112: 00      	        DB 00000000b   ; 
1113: 00      	        DB 00000000b   ; 
1114: 00      	        DB 00000000b   ; 
1115: 00      	        DB 00000000b   ; 
1116: 00      	        DB 00000000b   ; 
              	        ;253
1117: 00      	        DB 00000000b   ; 
1118: 00      	        DB 00000000b   ; 
1119: 00      	        DB 00000000b   ; 
111A: 00      	        DB 00000000b   ; 
111B: 00      	        DB 00000000b   ; 
111C: 00      	        DB 00000000b   ; 
              	        ;254
111D: 00      	        DB 00000000b   ; 
111E: 00      	        DB 00000000b   ; 
111F: 00      	        DB 00000000b   ; 
1120: 00      	        DB 00000000b   ; 
1121: 00      	        DB 00000000b   ; 
1122: 00      	        DB 00000000b   ; 
              	        ;255
1123: 00      	        DB 00000000b   ; 
1124: 00      	        DB 00000000b   ; 
1125: 00      	        DB 00000000b   ; 
1126: 00      	        DB 00000000b   ; 
1127: 00      	        DB 00000000b   ; 
1128: 00      	        DB 00000000b   ; 
              	        ;256
1129: 00      	        DB 00000000b   ; 
112A: 00      	        DB 00000000b   ; 
112B: 00      	        DB 00000000b   ; 
112C: 00      	        DB 00000000b   ; 
112D: 00      	        DB 00000000b   ; 
112E: 01      	        DB 00000001b   ;      #
              	        
              	
              	;    JP INIT_LCD             ;Initalise the LCD
              	;    JP CLEAR_GBUF           ;Clear the Graphics Buffer
              	;    JP CLEAR_GR_LCD         ;Clear the Graphics LCD Screen
              	;    JP CLEAR_TXT_LCD        ;Clear the Text LCD Screen
              	;    JP SET_GR_MODE          ;Set Graphics Mode
              	;    JP SET_TXT_MODE         ;Set Text Mode
              	;    JP DRAW_BOX             ;Draw a rectangle between two points
              	;    JP DRAW_LINE            ;Draw a line between two points
              	;    JP DRAW_CIRCLE          ;Draw a circle from Mid X,Y to Radius
              	;    JP DRAW_PIXEL           ;Draw one pixel at X,Y
              	;    JP FILL_BOX             ;Draw a filled rectangle between two points
              	;    JP FILL_CIRCLE          ;Draw a filled circle from Mid X,Y to Radius
              	;    JP PLOT_TO_LCD          ;Display the Graphics Buffer to the LCD Screen
              	;    JP PRINT_STRING         ;Print Text on the screen in a given row
              	;    JP PRINT_CHARS          ;Print Characters on the screen in a given row and column
              	;    JP DELAY_US             ;Microsecond delay for LCD updates
              	;    JP DELAY_MS             ;Millisecond delay for LCD updates
              	;    JP SET_BUF_CLEAR        ;Clear the Graphics buffer on after Plotting to the screen
              	;    JP SET_BUF_NO_CLEAR     ;Retain the Graphics buffer on after Plotting to the screen
              	;    JP CLEAR_PIXEL          ;Remove a Pixel at X,Y
              	;    JP FLIP_PIXEL           ;Flip a Pixel On/Off at X,Y
              	;    JP LCD_INST             ;Send a parallel or serial instruction to LCD
              	;    JP LCD_DATA             ;Send a parallel or serial datum to LCD
              	;    JP SER_SYNC             ;Send serial synchronise byte to LCD
              	;    JP DRAW_GRAPHIC         ;Draw an ASCII charcter or Sprite to the LCD
              	;    JP INV_GRAPHIC          ;Inverse graphics printing
              	;    JP INIT_TERMINAL        ;Initialize the LCD for terminal emulation
              	;    JP SEND_CHAR_TO_GLCD    ;Send an ASCII Character to the LCD
              	;    JP SEND_STRING_TO_GLCD  ;Send an ASCII String to the LCD
              	;    JP SEND_A_TO_GLCD       ;Send register A to the LCD
              	;    JP SEND_HL_TO_GLCD      ;Send register HL to the LCD
              	;    JP SET_CURSOR           ;Set the graphics cursor
              	;    JP GET_CURSOR           ;Get the current cursor
              	;    JP DISPLAY_CURSOR       ;Set Cursor on or off
              	#include "I2C.asm"
              	; **********************************************************************
              	; I2C support functions
              	
              	; I2C bus open device
              	;   On entry: A = Device address (bit zero is read flag)
              	;             SCL = unknown, SDA = unknown
              	;   On exit:  If successfully A = 0 and Z flagged
              	;             If unsuccessfully A = Error and NZ flagged
              	;             BC DE HL IX IY preserved
112F: F5      	I2C_Open:   PUSH AF
1130: CDA311  	            CALL I2C_Start      ;Output start condition
1133: F1      	            POP  AF
1134: 1803    	            JR   I2C_Write      ;Write data byte
              	
              	
              	; I2C bus close device
              	;   On entry: SCL = unknown, SDA = unknown
              	;   On exit:  If successfully A=0 and Z flagged
              	;             If unsuccessfully A=Error and NZ flagged
              	;             SCL = hi, SDA = hi
              	;             BC DE HL IX IY preserved
1136: C3AE11  	I2C_Close:  JP   I2C_Stop       ;Output stop condition
              	
              	
              	; **********************************************************************
              	; **********************************************************************
              	; I2C bus master driver
              	; **********************************************************************
              	; **********************************************************************
              	
              	; Functions provided are:
              	;     I2C_Start
              	;     I2C_Stop
              	;     I2C_Read
              	;     I2C_Write
              	;
              	; This code has delays between all I/O operations to ensure it works
              	; with the slowest I2C devices
              	;
              	; I2C transfer sequence
              	;   +-------+  +---------+  +---------+     +---------+  +-------+
              	;   | Start |  | Address |  | Data    | ... | Data    |  | Stop  |
              	;   |       |  | frame   |  | frame 1 |     | frame N |  |       |
              	;   +-------+  +---------+  +---------+     +---------+  +-------+
              	;
              	;
              	; Start condition                     Stop condition
              	; Output by master device             Output by master device
              	;       ----+                                      +----
              	; SDA       |                         SDA          |
              	;           +-------                        -------+
              	;       -------+                                +-------
              	; SCL          |                      SCL       |
              	;              +----                        ----+
              	;
              	;
              	; Address frame
              	; Clock and data output from master device
              	; Receiving device outputs acknowledge 
              	;        +-----+-----+-----+-----+-----+-----+-----+-----+     +---+
              	; SDA    | A 7 | A 6 | A 5 | A 4 | A 3 | A 2 | A 1 | R/W | ACK |   |
              	;     ---+-----+-----+-----+-----+-----+-----+-----+-----+-----+   +---
              	;          +-+   +-+   +-+   +-+   +-+   +-+   +-+   +-+   +-+
              	; SCL      | |   | |   | |   | |   | |   | |   | |   | |   | |
              	;     -----+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ +---------
              	;
              	;
              	; Data frame 
              	; Clock output by master device
              	; Data output by transmitting device
              	; Receiving device outputs acknowledge 
              	;        +-----+-----+-----+-----+-----+-----+-----+-----+     +---+
              	; SDA    | D 7 | D 6 | D 5 | D 4 | D 3 | D 2 | D 1 | D 0 | ACK |   |
              	;     ---+-----+-----+-----+-----+-----+-----+-----+-----+-----+   +---
              	;          +-+   +-+   +-+   +-+   +-+   +-+   +-+   +-+   +-+
              	; SCL      | |   | |   | |   | |   | |   | |   | |   | |   | |
              	;     -----+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ +---------
              	;
              	
              	
              	; **********************************************************************
              	; I2C constants
              	
              	
              	; I2C bus master interface
              	; The default device option is for SC126 or compatible
              	
0021:         	I2C_PORT:   .EQU $21           ;Host I2C port address
0007:         	I2C_SDA_WR: .EQU 7              ;Host I2C write SDA bit number
0007:         	I2C_SDA_RD: .EQU 7              ;Host I2C read SDA bit number
0000:         	I2C_SCL_WR: .EQU 0              ;Host I2C write SCL bit number
0000:         	I2C_SCL_RD: .EQU 0              ;Host I2C read SCL bit number 
0081:         	I2C_QUIES:  .EQU 0b10000001     ;Host I2C output port quiescent value
              	
              	
              	; I2C support constants
0000:         	ERR_NONE:   .EQU 0              ;Error = None
0001:         	ERR_JAM:    .EQU 1              ;Error = Bus jammed [not used]
0002:         	ERR_NOACK:  .EQU 2              ;Error = No ackonowledge
0003:         	ERR_TOUT:   .EQU 3              ;Error = Timeout
              	
              	
              	; **********************************************************************
              	; Hardware dependent I2C bus functions
              	
              	
              	; I2C bus transmit frame (address or data)
              	;   On entry: A = Data byte, or
              	;                 Address byte (bit zero is read flag)
              	;             SCL = low, SDA = low
              	;   On exit:  If successful A=0 and Z flagged
              	;                SCL = lo, SDA = lo
              	;             If unsuccessful A=Error and NZ flagged
              	;                SCL = high, SDA = high, I2C closed
              	;             BC DE HL IX IY preserved
1139: C5      	I2C_Write:  PUSH BC             ;Preserve registers
113A: D5      	            PUSH DE
113B: 57      	            LD   D,A            ;Store byte to be written
113C: 0608    	            LD   B,8            ;8 data bits, bit 7 first
113E: CB12    	I2C_WriteWr_Loop:   RL   D              ;Test M.S.Bit
1140: 3805    	            JR   C,I2C_WriteBit_Hi      ;High, so skip
1142: CDD511  	            CALL I2C_SDA_LO     ;SDA low   (SCL lo, SDA = data bit)
1145: 1803    	            JR   I2C_WriteBit_Clk
1147: CDCE11  	I2C_WriteBit_Hi:    CALL I2C_SDA_HI     ;SDA high  (SCL lo, SDA = data bit)
114A: CDC011  	I2C_WriteBit_Clk:   CALL I2C_SCL_HI     ;SCL high  (SCL hi, SDA = data bit)
114D: CDC711  	            CALL I2C_SCL_LO     ;SCL low   (SCL lo, SDA = data bit)
1150: 10EC    	            DJNZ I2C_WriteWr_Loop
              	; Test for acknowledge from slave (receiver)
              	; On arriving here, SCL = lo, SDA = data bit
1152: CDCE11  	            CALL I2C_SDA_HI     ;SDA high  (SCL lo, SDA hi/ack)
1155: CDC011  	            CALL I2C_SCL_HI     ;SCL high  (SCL hi, SDA hi/ack)
1158: CDE611  	            CALL I2C_RdPort     ;Read SDA input
115B: 47      	            LD   B,A
115C: CDC711  	            CALL I2C_SCL_LO     ;SCL low   (SCL lo, SDA = hi)
115F: CB78    	            BIT  I2C_SDA_RD,B
1161: 2004    	            JR   NZ,I2C_WriteNoAck      ;Skip if no acknowledge
1163: D1      	            POP  DE             ;Restore registers
1164: C1      	            POP  BC
1165: AF      	            XOR  A              ;Return success A=0 and Z flagged
1166: C9      	            RET
              	; I2C STOP required as no acknowledge
              	; On arriving here, SCL = lo, SDA = hi
1167: CDD511  	I2C_WriteNoAck:     CALL I2C_SDA_LO     ;SDA low   (SCL lo, SDA = lo)
116A: CDC011  	            CALL I2C_SCL_HI     ;SCL high  (SCL hi, SDA = lo)
116D: CDCE11  	            CALL I2C_SDA_HI     ;SDA low   (SCL hi, SDA = hi)
1170: D1      	            POP  DE             ;Restore registers
1171: C1      	            POP  BC
1172: 3E02    	            LD   A,ERR_NOACK    ;Return error = No Acknowledge
1174: B7      	            OR   A              ;  and NZ flagged
1175: C9      	            RET
              	
              	
              	; I2C bus receive frame (data)
              	;   On entry: A = Acknowledge flag
              	;               If A != 0 the read is acknowledged
              	;             SCL low, SDA low
              	;   On exit:  If successful A = data byte and Z flagged
              	;               SCL = low, SDA = low
              	;             If unsuccessul* A = Error and NZ flagged
              	;               SCL = low, SDA = low
              	;             BC DE HL IX IY preserved
              	; *This function always returns successful
1176: C5      	I2C_Read:   PUSH BC             ;Preserve registers
1177: D5      	            PUSH DE
1178: 5F      	            LD   E,A            ;Store acknowledge flag
1179: 0608    	            LD   B,8            ;8 data bits, 7 first
117B: CDCE11  	            CALL I2C_SDA_HI     ;SDA high  (SCL lo, SDA hi/input)
117E: CDC011  	I2C_ReadRd_Loop:   CALL I2C_SCL_HI     ;SCL high  (SCL hi, SDA hi/input)
1181: CDE611  	            CALL I2C_RdPort     ;Read SDA input bit
1184: 37      	            SCF                 ;Set carry flag
1185: CB7F    	            BIT  I2C_SDA_RD,A   ;SDA input high?
1187: 2001    	            JR   NZ, I2C_ReadRotate     ;Yes, skip with carry flag set
1189: 3F      	            CCF                 ;Clear carry flag
118A: CB12    	I2C_ReadRotate:    RL   D              ;Rotate result into D
118C: CDC711  	            CALL I2C_SCL_LO     ;SCL low   (SCL lo, SDA hi/input)
118F: 10ED    	            DJNZ  I2C_ReadRd_Loop       ;Repeat for all 8 bits
              	; Acknowledge input byte
              	; On arriving here, SCL = lo, SDA = hi/input
1191: 7B      	            LD   A,E            ;Get acknowledge flag
1192: B7      	            OR   A              ;A = 0? (indicates no acknowledge)
1193: 2803    	            JR   Z, I2C_ReadNoAck       ;Yes, so skip acknowledge
1195: CDD511  	            CALL I2C_SDA_LO     ;SDA low   (SCL lo, SDA lo)
1198: CDC011  	I2C_ReadNoAck:     CALL I2C_SCL_HI     ;SCL hi    (SCL hi, SDA lo)
119B: CDC711  	            CALL I2C_SCL_LO     ;SCL low   (SCL lo, SDA lo)
119E: 7A      	            LD   A,D            ;Get data byte received
119F: D1      	            POP  DE             ;Restore registers
11A0: C1      	            POP  BC
11A1: BF      	            CP   A              ;Return success Z flagged
11A2: C9      	            RET
              	
              	
              	; I2C bus start
              	;   On entry: SCL = unknown, SDA = unknown
              	;   On exit:  SCL = low, SDA = low
              	;             A = 0 and Z flagged as we always succeed
              	;             BC DE HL IX IY preserved
              	; First ensure SDA and SCL are high
11A3: CDBC11  	I2C_Start:  CALL I2C_INIT       ;Initialise I2C control port
              	;           CALL I2C_SCL_HI     ;SCL high  (SCL hi, SDA ??)
              	;           CALL I2C_SDA_HI     ;SDA high  (SCL hi, SDA hi)
              	; Generate I2C start condition
11A6: CDD511  	            CALL I2C_SDA_LO     ;SDA low   (SCL hi, SDA lo)
11A9: CDC711  	            CALL I2C_SCL_LO     ;SCL low   (SCL lo, SDA lo)
11AC: AF      	            XOR  A              ;Return success A=0 and Z flagged
11AD: C9      	            RET
              	
              	
              	; I2C bus stop 
              	;   On entry: SCL = unknown, SDA = unknown
              	;   On exit:  SCL = high, SDA = high
              	;             A = 0 and Z flagged as we always succeed
              	;             BC DE HL IX IY preserved
              	; First ensure SDA and SCL are low
11AE: CDD511  	I2C_Stop:   CALL I2C_SDA_LO     ;SDA low   (SCL hi, SDA lo)
11B1: CDC711  	            CALL I2C_SCL_LO     ;SCL low   (SCL lo, SDA lo)
              	; Generate stop condition
11B4: CDC011  	            CALL I2C_SCL_HI     ;SCL high  (SCL hi, SDA lo)
11B7: CDCE11  	            CALL I2C_SDA_HI     ;SDA low   (SCL hi, SDA hi)
11BA: AF      	            XOR  A              ;Return success A=0 and Z flagged
11BB: C9      	            RET
              	
              	
              	; **********************************************************************
              	; I2C bus simple I/O functions
              	;   On entry: No parameters required
              	;   On exit:  BC DE HL IX IY preserved
              	
11BC: 3E81    	I2C_INIT:   LD   A,I2C_QUIES    ;I2C control port quiescent value
11BE: 181A    	            JR   I2C_WrPort
              	
11C0: 3A9BFB  	I2C_SCL_HI: LD   A,(I2C_RAMCPY)
11C3: CBC7    	            SET  I2C_SCL_WR,A
11C5: 1813    	            JR   I2C_WrPort
              	
11C7: 3A9BFB  	I2C_SCL_LO: LD   A,(I2C_RAMCPY)
11CA: CB87    	            RES  I2C_SCL_WR,A
11CC: 180C    	            JR   I2C_WrPort
              	
11CE: 3A9BFB  	I2C_SDA_HI: LD   A,(I2C_RAMCPY)
11D1: CBFF    	            SET  I2C_SDA_WR,A
11D3: 1805    	            JR   I2C_WrPort
              	
11D5: 3A9BFB  	I2C_SDA_LO: LD   A,(I2C_RAMCPY)
11D8: CBBF    	            RES  I2C_SDA_WR,A
              	
11DA: C5      	I2C_WrPort: PUSH BC             ;Preserve registers
11DB: 0600    	            LD   B,0            ;Set up BC for 16-bit
11DD: 0E21    	            LD   C,I2C_PORT     ;  I/O address of I2C port
11DF: ED79    	            OUT  (C),A          ;Write A to I2C I/O port
11E1: 329BFB  	            LD   (I2C_RAMCPY),A ;Write A to RAM copy
11E4: C1      	            POP  BC             ;Restore registers
11E5: C9      	            RET
              	
11E6: C5      	I2C_RdPort: PUSH BC             ;Preserve registers
11E7: 0600    	            LD   B,0            ;Set up BC for 16-bit
11E9: 0E21    	            LD   C,I2C_PORT     ;  I/O address of I2C port
11EB: ED78    	            IN   A,(C)          ;Read A from I/O port
11ED: C1      	            POP  BC             ;Restore registers
11EE: C9      	            RET
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	;==============================================================================
              	;==============================================================================
              	;==============================================================================
              	;===================       FUNCTIONS    =======================================
              	;==============================================================================
              	;==============================================================================
              	
              	
              	
              	
              	; **********************************************************************
              	; List devices found on the I2C bus
              	;
              	; Test each I2C device address and reports any that acknowledge
              	
11EF: 214F13  	I2CLIST:    LD   HL, I2C_LIST_MSG        ;Address of message string
11F2: AF      	            XOR A ; A = character to stop printing.
11F3: CDA505  	            CALL LCD_PRINT_STRING         ;Output string
11F6: 1600    	            LD   D,0            ;First I2C device address to test
11F8: D5      	LISTLOOP:      PUSH DE             ;Preserve DE
11F9: 7A      	            LD   A,D            ;Get device address to be tested
11FA: CD1512  	            CALL LISTTEST          ;Test if device is present
11FD: D1      	            POP  DE             ;Restore DE
11FE: 2009    	            JR   NZ,LISTNEXT       ;Skip if no acknowledge
1200: 7A      	            LD   A,D            ;Get address of device tested
1201: CD8912  	            CALL HexOut         ;Output as two character hex 
1204: 3E20    	            LD A, ' '; space
1206: CDC105  	            CALL LCD_PRINT_A       ;Output space character
1209: 14      	LISTNEXT:      INC  D              ;Get next write address
120A: 14      	            INC  D
120B: 7A      	            LD   A,D            ;Address of next device to test
120C: B7      	            OR   A              ;Have we tested all addresses?
120D: 20E9    	            JR   NZ,LISTLOOP       ;No, so loop again
120F: 3E0D    	            LD A, CR; enter
1211: CDC105  	            CALL LCD_PRINT_A       ;Output space character
1214: C9      	            RET
              	
              	; Test if device at I2C address A acknowledges
              	;   On entry: A = I2C device address (8-bit, bit 0 = lo for write)
              	;   On exit:  Z flagged if device acknowledges
              	;             NZ flagged if devices does not acknowledge
1215: CD2F11  	LISTTEST:      CALL I2C_Open       ;Open I2C device for write
1218: C0      	            RET  NZ             ;Abort if failed to open
1219: CD3611  	            CALL I2C_Close      ;Close I2C device 
121C: AF      	            XOR  A              ;Return with Z flagged
121D: C9      	            RET
              	
              	
              	
              	
              	; Copy a block from I2C memory to CPU memory
              	;   On entry: DE = First address in I2C memory
              	;             HL = First address in CPU memory
              	;             BC = Number of bytes to be copied
              	;             SCL = unknown, SDA = unknown
              	;   On exit:  If successfully A = 0 and Z flagged
              	;             If unsuccessfully A = Error and NZ flagged
              	;             IX IY preserved
121E: C5      	I2C_MemRd:  PUSH BC
121F: 011027  	            LD   BC,TIMEOUT     ;Timeout loop counter
1222: 3EAE    	I2C_MemRdRepeat:    LD   A,I2CA_BLOCK   ;I2C address to write to
1224: CD2F11  	            CALL I2C_Open       ;Open for write
1227: 280A    	            JR   Z,I2C_MemRdReady       ;If open okay then skip on
1229: 0B      	            DEC  BC
122A: 78      	            LD   A,B
122B: B1      	            OR   C              ;Timeout?
122C: 20F4    	            JR   NZ,I2C_MemRdRepeat     ;No, so go try again
122E: C1      	            POP  BC
122F: 3E03    	            LD   A,ERR_TOUT     ;Error code
1231: B7      	            OR   A              ;Error, so NZ flagged
1232: C9      	            RET                 ;Return with error
              	; Device opened okay
1233: C1      	I2C_MemRdReady:     POP  BC             ;Restore byte counter
1234: 7A      	            LD   A,D            ;Address (hi) in I2C memory
1235: CD3911  	            CALL I2C_Write      ;Write address
1238: 7B      	            LD   A,E            ;Address (lo) in I2C memory
1239: CD3911  	            CALL I2C_Write      ;Write address
123C: 3EAF    	            LD   A,I2CA_BLOCK+1 ;I2C device to be read from
123E: CD2F11  	            CALL I2C_Open       ;Open for read
1241: C0      	            RET  NZ             ;Abort if error
1242: 0B      	I2C_MemRdRead:      DEC  BC             ;Decrement byte counter
1243: 78      	            LD   A,B
1244: B1      	            OR   C              ;Last byte to be read?
1245: CD7611  	            CALL I2C_Read       ;Read byte with no ack on last byte
1248: 77      	            LD   (HL),A         ;Write byte in CPU memory
1249: 23      	            INC  HL             ;Increment CPU memory pointer
124A: 78      	            LD   A,B
124B: B1      	            OR   C              ;Finished?
124C: 20F4    	            JR   NZ,I2C_MemRdRead       ;No, so go read next byte
124E: CDAE11  	            CALL I2C_Stop       ;Generate I2C stop
1251: AF      	            XOR  A              ;Return with success (Z flagged)
1252: C9      	            RET
              	
              	
              	; Copy a block from CPU memory to I2C memory
              	;   On entry: DE = First address in I2C memory
              	;             HL = First address in CPU memory
              	;             BC = Number of bytes to be copied
              	;             SCL = unknown, SDA = unknown
              	;   On exit:  If successfully A = 0 and Z flagged
              	;             If unsuccessfully A = Error and NZ flagged
              	;             IX IY preserved
              	; The 24LC64 requires blocks of data to be written in 64 byte (or less)
              	; pages.
1253: C5      	I2C_MemWr:  PUSH BC
1254: 011027  	            LD   BC,TIMEOUT     ;Timeout loop counter
1257: 3EAE    	I2C_MemWrRepeat:    LD   A,I2CA_BLOCK   ;I2C address to write to
1259: CD2F11  	            CALL I2C_Open       ;Open for write
125C: 280A    	            JR   Z,I2C_MemWrReady       ;If open okay then skip on
125E: 0B      	            DEC  BC
125F: 78      	            LD   A,B
1260: B1      	            OR   C              ;Timeout?
1261: 20F4    	            JR   NZ,I2C_MemWrRepeat     ;No, so go try again
1263: C1      	            POP  BC
1264: 3E03    	            LD   A,ERR_TOUT     ;Error code
1266: B7      	            OR   A              ;Error, so NZ flagged
1267: C9      	            RET                 ;Return with error
              	; Device opened okay
1268: C1      	I2C_MemWrReady:     POP  BC             ;Restore byte counter
1269: 7A      	I2C_MemWrBlock:     LD   A,D            ;Address (hi) in I2C memory
126A: CD3911  	            CALL I2C_Write      ;Write address
126D: 7B      	            LD   A,E            ;Address (lo) in I2C memory
126E: CD3911  	            CALL I2C_Write      ;Write address
1271: 7E      	I2C_MemWrWrite:     LD   A,(HL)         ;Get data byte from CPU memory
1272: CD3911  	            CALL I2C_Write      ;Read byte from I2C memory
1275: 23      	            INC  HL             ;Increment CPU memory pointer
1276: 13      	            INC  DE             ;Increment I2C memory pointer
1277: 0B      	            DEC  BC             ;Decrement byte counter
1278: 78      	            LD   A,B
1279: B1      	            OR   C              ;Finished?
127A: 2805    	            JR   Z,I2C_MemWrStore       ;Yes, so go store this page
127C: 7B      	            LD   A,E            ;Get address in I2C memory (lo byte)
127D: E63F    	            AND  63             ;64 byte page boundary?
127F: 20F0    	            JR   NZ,I2C_MemWrWrite      ;No, so go write another byte
1281: CDAE11  	I2C_MemWrStore:     CALL I2C_Stop       ;Generate I2C stop
1284: 78      	            LD   A,B
1285: B1      	            OR   C              ;Finished?
1286: 20CB    	            JR   NZ,I2C_MemWr   ;No, so go write some more
1288: C9      	            RET   
              	
              	
              	; Hex byte output to console
              	;   On entry: A = Byte to be output in hex
              	;   On exit:  BC DE HL IX IY preserved
1289: F5      	HexOut:     PUSH AF             ;Preserve byte to be output
128A: 1F      	            RRA                 ;Shift top nibble to
128B: 1F      	            RRA                 ;  botom four bits..
128C: 1F      	            RRA
128D: 1F      	            RRA
128E: E60F    	            AND  $0F           ;Mask off unwanted bits
1290: CD9612  	            CALL HexOutHex           ;Output hi nibble
1293: F1      	            POP  AF             ;Restore byte to be output
1294: E60F    	            AND  $0F           ;Mask off unwanted bits
              	; Output nibble as ascii character
1296: FE0A    	HexOutHex:       CP   $0A           ;Nibble > 10 ?
1298: 3802    	            JR   C,HexOutSkip        ;No, so skip
129A: C607    	            ADD  A,7            ;Yes, so add 7
129C: C630    	HexOutSkip:      ADD  A,$30         ;Add ASCII '0'
129E: CDC105  	            CALL LCD_PRINT_A       ;Write character
12A1: C9      	            RET
              	
              	
              	
              	
              	
              	
12A2:         	msg_help:
12A2: 0D0A    			.BYTE	CR, LF
12A4: 52202020			.TEXT	"R           - Reset"
12A8: 20202020	
12AC: 20202020	
12B0: 2D205265	
12B4: 736574  	
12B7: 0D0A    			.BYTE	CR, LF
12B9: 47202020			.TEXT	"G           - Goto nnnn"
12BD: 20202020	
12C1: 20202020	
12C5: 2D20476F	
12C9: 746F206E	
12CD: 6E6E6E  	
12D0: 0D0A    			.BYTE	CR, LF
12D2: 3A6E6E6E			.TEXT	":nnnnnn...  - Load Intel-Hex file record"
12D6: 6E6E6E2E	
12DA: 2E2E2020	
12DE: 2D204C6F	
12E2: 61642049	
12E6: 6E74656C	
12EA: 2D486578	
12EE: 2066696C	
12F2: 65207265	
12F6: 636F7264	
12FA: 0D0A    			.BYTE	CR, LF
12FC: 00      	        .BYTE   $00
              	
12FD:         	CKSUMERR:
12FD: 43686563			.BYTE	"Checksum error"
1301: 6B73756D	
1305: 20657272	
1309: 6F72    	
130B: 0D0A00  			.BYTE	CR, LF,$00
              	
130E:         	LDETXT:
130E: 4C6F6164			.TEXT	"Load complete."
1312: 20636F6D	
1316: 706C6574	
131A: 652E    	
131C: 0D0A00  			.BYTE	CR, LF, $00
              	
131F: 0C0D0D0A	WELLCOME: .db CS, CR, CR, LF,"Z80Mini - Game core", CR, LF, 00H
1323: 5A38304D	
1327: 696E6920	
132B: 2D204761	
132F: 6D652063	
1333: 6F72650D	
1337: 0A00    	
              	
1339: 5A38304D	WELLCOME_LCD: .db "Z80Mini - Game core", CR, CR, 00H
133D: 696E6920	
1341: 2D204761	
1345: 6D652063	
1349: 6F72650D	
134D: 0D00    	
              	
134F: 49324320	I2C_LIST_MSG:    .DB "I2C device found at:",CR,0
1353: 64657669	
1357: 63652066	
135B: 6F756E64	
135F: 2061743A	
1363: 0D00    	
1365: 202D202D	MSG_EOF  .db " - - - FIM - - - ", 00H
1369: 202D2046	
136D: 494D202D	
1371: 202D202D	
1375: 2000    	
1377: 5F455845	MSG_READFILE_EXE .db "_EXE", 00H
137B: 00      	
137C: 5F494D47	MSG_READFILE_IMG .db "_IMG", 00H
1380: 00      	
1381: 5F545854	MSG_READFILE_TXT .db "_TXT", 00H
1385: 00      	
              	
1386: 20537461	MENU_LCD_1:         .db " Start game", CR, 00H
138A: 72742067	
138E: 616D650D	
1392: 00      	
1393: 204C6F61	MENU_LCD_2:         .db " Load from card", CR, 00H
1397: 64206672	
139B: 6F6D2063	
139F: 6172640D	
13A3: 00      	
13A4: 20546573	MENU_LCD_3:         .db " Test keys", CR, 00H
13A8: 74206B65	
13AC: 79730D00	
13B0: 20526573	MENU_LCD_4:         .db " Reset", CR, 00H
13B4: 65740D00	
              	
              	
              	; RAM Locations - Move this section to RAM if necessary
              	;---------------
13B8: FFFFFFFF	.ORG $F000              ;Start location
13BC: FF...   	
              	        
0780:         	SBUF:   EQU 16 * $78     ;Scroll Buffer size  16 * 60 = 960 byte (10 lines), change to 20 lines (16 * 120($78))
F000: FFFFFFFF	        DS SBUF         ;Scroll Buffer space abover GBUF 
F004: FF...   	
F780: FFFFFFFF	GBUF:   DS 0400H        ;Graphics Buffer 16 * 64 = 1024 byte
F784: FF...   	
F780:         	TGBUF:  EQU GBUF        ;Terminal GBUF
FB80: 80F7    	VPORT:  DW GBUF         ;View port start address
FB82: 80F7    	TBUF:   DW GBUF         ;Top of Buffer pointer
FB84: 0000    	ENDPT:  DW 0000H        ;End Point for Line
FB86: 00      	SX:     DB 00H          ;Sign of X
FB87: 00      	SY:     DB 00H          ;Sign of Y
FB88: 0000    	DX:     DW 0000H        ;Change of X
FB8A: 0000    	DY:     DW 0000H        ;Change of Y
FB8C: 0000    	ERR:    DW 0000H        ;Error Rate
FB8E: 0000    	RAD:    DW 0000H        ;Radius
FB90: 00      	CLRBUF: DB 00H          ;Clear Buffer Flag on LCD Displaying
FB91: 0000    	CURSOR_XY: DW 0000H     ;Cursor Address X,Y
FB91:         	CURSOR_Y: EQU CURSOR_XY   ;Cursor Y
FB92:         	CURSOR_X: EQU CURSOR_XY+1 ;Cursor X
FB93: 00      	CURSOR_YS: DB 00H       ;Start Y row for new line
FB94: 00      	CURSOR_ON: DB 00H       ;Cursor on/off flag
FB95: 00      	INVERSE: DB 00H         ;Inverse Flag
FB96: 00      	PIXEL_X: DB 00H         ;Pixel X length
FB97: 0000    	INT_VEC: DW 0000H       ;Vetor de interrupção
FB99: 00      	GAMEPAD_KEY: DB 00H 	;Guarda tecla lida na interrupcao
FB9A: 00      	CURSOR_MENU:      .db $00	; Cursor menu
              	
FB9B: 00      	I2C_RAMCPY:         .DB    $00   ; 1 byte - RAM copy of output port
              	.end


; +++ segments +++

#CODE          = $0000 =     0,  size = $FB9C = 64412

; +++ global symbols +++

ABSHL               = $0757 =  1879          LCD.asm:450
BASE_COL            = $087A =  2170          LCD.asm:700
BCTOA               = $0532 =  1330          Z80MiniGame.asm:812
BCTOA1              = $053B =  1339          Z80MiniGame.asm:817
BCTOA2              = $0549 =  1353          Z80MiniGame.asm:827
BDEL                = $05A4 =  1444          LCD.asm:72
BKSP                = $0008 =     8          LCD.asm:64 (unused)
CIRCLE_LOOP         = $077D =  1917          LCD.asm:500
CKSIOA              = $04E1 =  1249          Z80MiniGame.asm:739
CKSUMERR            = $12FD =  4861          Z80MiniGame.asm:937
CLEAR_GBUF          = $061E =  1566          LCD.asm:190
CLEAR_GR_LCD        = $062E =  1582          LCD.asm:201
CLEAR_PIXEL         = $0847 =  2119          LCD.asm:645
CLEAR_TXT_LCD       = $0655 =  1621          LCD.asm:225
CLK_LOOP            = $0B13 =  2835          LCD.asm:1283
CLRBUF              = $FB90 = 64400          Z80MiniGame.asm:978
CLR_ROWS            = $0664 =  1636          LCD.asm:232
CLR_X               = $0633 =  1587          LCD.asm:204
CLR_Y               = $0646 =  1606          LCD.asm:214
CR                  = $000D =    13          LCD.asm:68
CS                  = $000C =    12          LCD.asm:67
CTRLC               = $0003 =     3          LCD.asm:73 (unused)
CURSOR              = $008F =   143          LCD.asm:70
CURSOR_MENU         = $FB9A = 64410          Z80MiniGame.asm:988
CURSOR_ON           = $FB94 = 64404          Z80MiniGame.asm:983
CURSOR_X            = $FB92 = 64402          Z80MiniGame.asm:981
CURSOR_XY           = $FB91 = 64401          Z80MiniGame.asm:979
CURSOR_Y            = $FB91 = 64401          Z80MiniGame.asm:980
CURSOR_YS           = $FB93 = 64403          Z80MiniGame.asm:982
DEC_CURSOR          = $0A63 =  2659          LCD.asm:1080
DEL                 = $007F =   127          LCD.asm:71
DELAY_DE            = $054E =  1358          Z80MiniGame.asm:843
DELAY_MS            = $08FF =  2303          LCD.asm:809
DELAY_US            = $08FC =  2300          LCD.asm:807
DELETE_CHAR         = $05E5 =  1509          LCD.asm:143
DISPLAY_CURSOR      = $0A8D =  2701          LCD.asm:1111
DN                  = $00B6 =   182          LCD.asm:63
DO_BS               = $095A =  2394          LCD.asm:885 (unused)
DO_CHAR             = $097F =  2431          LCD.asm:902
DO_CR               = $093C =  2364          LCD.asm:869
DO_FF               = $0956 =  2390          LCD.asm:882
DO_SCRL_DN          = $0934 =  2356          LCD.asm:864
DO_SCRL_UP          = $0929 =  2345          LCD.asm:858 (unused)
DO_TAB              = $0968 =  2408          LCD.asm:892
DRAW_A              = $09B3 =  2483          LCD.asm:945
DRAW_BOX            = $067B =  1659          LCD.asm:254
DRAW_CIRCLE         = $0761 =  1889          LCD.asm:479
DRAW_CURSOR         = $0985 =  2437          LCD.asm:905
DRAW_GRAPHIC        = $0A99 =  2713          LCD.asm:1132
DRAW_LINE           = $06B6 =  1718          LCD.asm:331
DRAW_PIXEL          = $0836 =  2102          LCD.asm:625
DS1                 = $07E9 =  2025          LCD.asm:568
DS2                 = $080D =  2061          LCD.asm:587
DS3                 = $0820 =  2080          LCD.asm:599
DS_EXIT             = $08DC =  2268          LCD.asm:775
DS_LOOP             = $08D2 =  2258          LCD.asm:768
DX                  = $FB88 = 64392          Z80MiniGame.asm:974
DY                  = $FB8A = 64394          Z80MiniGame.asm:975
ECHO                = $054B =  1355          Z80MiniGame.asm:833
ENDPT               = $FB84 = 64388          Z80MiniGame.asm:971
ERR                 = $FB8C = 64396          Z80MiniGame.asm:976
ERR_JAM             = $0001 =     1          I2C.asm:98 (unused)
ERR_NOACK           = $0002 =     2          I2C.asm:99
ERR_NONE            = $0000 =     0          I2C.asm:97 (unused)
ERR_TOUT            = $0003 =     3          I2C.asm:100
FILL_BOX            = $06A6 =  1702          LCD.asm:299
FILL_CIRCLE         = $0828 =  2088          LCD.asm:609
FLIP_PIXEL          = $0859 =  2137          LCD.asm:666
FONT_DATA           = $0B2F =  2863          LCD.asm:1317
GAMEPAD             = $0040 =    64          Z80MiniGame.asm:57
GAMEPAD_KEY         = $FB99 = 64409          Z80MiniGame.asm:987
GBOTTOM             = $0687 =  1671          LCD.asm:266
GBUF                = $F780 = 63360          Z80MiniGame.asm:967
GET2                = $04F3 =  1267          Z80MiniGame.asm:764
GETCHR              = $04EA =  1258          Z80MiniGame.asm:752
GETHL               = $0504 =  1284          Z80MiniGame.asm:779
GETX                = $0510 =  1296          Z80MiniGame.asm:789 (unused)
GETX1               = $0513 =  1299          Z80MiniGame.asm:790
GETX2               = $051C =  1308          Z80MiniGame.asm:795
GETX3               = $052C =  1324          Z80MiniGame.asm:805
GET_CURSOR          = $0A88 =  2696          LCD.asm:1104
GLEFT               = $0691 =  1681          LCD.asm:275
GOTO                = $04AD =  1197          Z80MiniGame.asm:684
GRIGHT              = $069C =  1692          LCD.asm:285
GTOP                = $067C =  1660          LCD.asm:256
HELP                = $04B3 =  1203          Z80MiniGame.asm:692
HexOut              = $1289 =  4745          I2C.asm:454
HexOutHex           = $1296 =  4758          I2C.asm:464
HexOutSkip          = $129C =  4764          I2C.asm:467
I2CA_BLOCK          = $00AE =   174          Z80MiniGame.asm:83
I2CLIST             = $11EF =  4591          I2C.asm:325
I2C_Close           = $1136 =  4406          I2C.asm:22
I2C_INIT            = $11BC =  4540          I2C.asm:228
I2C_LIST_MSG        = $134F =  4943          Z80MiniGame.asm:949
I2C_MemRd           = $121E =  4638          I2C.asm:368
I2C_MemRdRead       = $1242 =  4674          I2C.asm:390
I2C_MemRdReady      = $1233 =  4659          I2C.asm:382
I2C_MemRdRepeat     = $1222 =  4642          I2C.asm:370
I2C_MemWr           = $1253 =  4691          I2C.asm:414
I2C_MemWrBlock      = $1269 =  4713          I2C.asm:429 (unused)
I2C_MemWrReady      = $1268 =  4712          I2C.asm:428
I2C_MemWrRepeat     = $1257 =  4695          I2C.asm:416
I2C_MemWrStore      = $1281 =  4737          I2C.asm:444
I2C_MemWrWrite      = $1271 =  4721          I2C.asm:433
I2C_Open            = $112F =  4399          I2C.asm:10
I2C_PORT            = $0021 =    33          I2C.asm:88
I2C_QUIES           = $0081 =   129          I2C.asm:93
I2C_RAMCPY          = $FB9B = 64411          Z80MiniGame.asm:990
I2C_RdPort          = $11E6 =  4582          I2C.asm:254
I2C_Read            = $1176 =  4470          I2C.asm:163
I2C_ReadNoAck       = $1198 =  4504          I2C.asm:183
I2C_ReadRd_Loop     = $117E =  4478          I2C.asm:168
I2C_ReadRotate      = $118A =  4490          I2C.asm:174
I2C_SCL_HI          = $11C0 =  4544          I2C.asm:231
I2C_SCL_LO          = $11C7 =  4551          I2C.asm:235
I2C_SCL_RD          = $0000 =     0          I2C.asm:92 (unused)
I2C_SCL_WR          = $0000 =     0          I2C.asm:91
I2C_SDA_HI          = $11CE =  4558          I2C.asm:239
I2C_SDA_LO          = $11D5 =  4565          I2C.asm:243
I2C_SDA_RD          = $0007 =     7          I2C.asm:90
I2C_SDA_WR          = $0007 =     7          I2C.asm:89
I2C_Start           = $11A3 =  4515          I2C.asm:198
I2C_Stop            = $11AE =  4526          I2C.asm:214
I2C_WrPort          = $11DA =  4570          I2C.asm:246
I2C_Write           = $1139 =  4409          I2C.asm:116
I2C_WriteBit_Clk    = $114A =  4426          I2C.asm:125
I2C_WriteBit_Hi     = $1147 =  4423          I2C.asm:124
I2C_WriteNoAck      = $1167 =  4455          I2C.asm:143
I2C_WriteWr_Loop    = $113E =  4414          I2C.asm:120
INC_CURSOR          = $09E8 =  2536          LCD.asm:999
INC_ROW             = $09F5 =  2549          LCD.asm:1006
INIT                = $017B =   379          Z80MiniGame.asm:166
INIT_BASIC          = $0B25 =  2853          LCD.asm:1297
INIT_LCD            = $0609 =  1545          LCD.asm:176
INIT_TERMINAL       = $0912 =  2322          LCD.asm:832
INT38               = $038D =   909          Z80MiniGame.asm:519
INT38_END           = $0397 =   919          Z80MiniGame.asm:525
INT_VEC             = $FB97 = 64407          Z80MiniGame.asm:986
INVERSE             = $FB95 = 64405          Z80MiniGame.asm:984
INV_BIT             = $0AC9 =  2761          LCD.asm:1169
INV_GRAPHIC         = $0A91 =  2705          LCD.asm:1118
KEYDOWN             = $032A =   810          Z80MiniGame.asm:460
KEYDOWN_RES         = $0340 =   832          Z80MiniGame.asm:470
KEYUP               = $030C =   780          Z80MiniGame.asm:445
KEYUP_RES           = $0322 =   802          Z80MiniGame.asm:455
KEY_A               = $03AE =   942          Z80MiniGame.asm:541
LCDCTRL             = $0070 =   112          Z80MiniGame.asm:55 (unused)
LCDDATA             = $0071 =   113          Z80MiniGame.asm:56 (unused)
LCD_CLEAR           = $05B5 =  1461          LCD.asm:98
LCD_CR              = $05BB =  1467          LCD.asm:106
LCD_DATA            = $0AFA =  2810          LCD.asm:1238
LCD_DR              = $0071 =   113          LCD.asm:51
LCD_IMAGE_128x64    = $05F0 =  1520          LCD.asm:156
LCD_INST            = $0AF5 =  2805          LCD.asm:1221
LCD_IR              = $0070 =   112          LCD.asm:50
LCD_PRINT_A         = $05C1 =  1473          LCD.asm:115
LCD_PRINT_A_FIM     = $05E0 =  1504          LCD.asm:136
LCD_PRINT_A_OK      = $05DD =  1501          LCD.asm:134
LCD_PRINT_STRING    = $05A5 =  1445          LCD.asm:80
LCD_SER             = $0000 =     0          LCD.asm:52
LDETXT              = $130E =  4878          Z80MiniGame.asm:941
LF                  = $000A =    10          LCD.asm:66
LINE_LOOP           = $0711 =  1809          LCD.asm:400
LISTLOOP            = $11F8 =  4600          I2C.asm:329
LISTNEXT            = $1209 =  4617          I2C.asm:338
LISTTEST            = $1215 =  4629          I2C.asm:351
LL2                 = $073C =  1852          LCD.asm:432
LL3                 = $0749 =  1865          LCD.asm:440
LOAD                = $0563 =  1379          Z80MiniGame.asm:876
LOAD00              = $059D =  1437          Z80MiniGame.asm:912
LOAD2               = $0581 =  1409          Z80MiniGame.asm:892
LOAD3               = $0590 =  1424          Z80MiniGame.asm:903
LOADERR             = $0596 =  1430          Z80MiniGame.asm:908
LOAD_GAME           = $01FF =   511          Z80MiniGame.asm:253
LoopBC              = $0554 =  1364          Z80MiniGame.asm:849
LoopDE              = $0551 =  1361          Z80MiniGame.asm:847
MENU1               = $0347 =   839          Z80MiniGame.asm:475
MENU2               = $0357 =   855          Z80MiniGame.asm:484
MENU3               = $0367 =   871          Z80MiniGame.asm:493
MENU4               = $0377 =   887          Z80MiniGame.asm:502
MENU_LCD_1          = $1386 =  4998          Z80MiniGame.asm:955
MENU_LCD_2          = $1393 =  5011          Z80MiniGame.asm:956
MENU_LCD_3          = $13A4 =  5028          Z80MiniGame.asm:957
MENU_LCD_4          = $13B0 =  5040          Z80MiniGame.asm:958
MOVE_DOWN           = $0A58 =  2648          LCD.asm:1070
MOVE_UP             = $0A4A =  2634          LCD.asm:1061 (unused)
MOVE_VPORT          = $0A43 =  2627          LCD.asm:1056
MSG_EOF             = $1365 =  4965          Z80MiniGame.asm:950
MSG_READFILE_EXE    = $1377 =  4983          Z80MiniGame.asm:951
MSG_READFILE_IMG    = $137C =  4988          Z80MiniGame.asm:952
MSG_READFILE_TXT    = $1381 =  4993          Z80MiniGame.asm:953
NEW_LINE_LCD        = $0387 =   903          Z80MiniGame.asm:513
NEXT_CIRCLE         = $082A =  2090          LCD.asm:611
NEXT_CMD            = $060E =  1550          LCD.asm:179
NEXT_PIXEL          = $06A7 =  1703          LCD.asm:301
NIBBLE_TO_GLCD      = $09BC =  2492          LCD.asm:953
PC_LOOP             = $08F3 =  2291          LCD.asm:798
PIXEL_X             = $FB96 = 64406          Z80MiniGame.asm:985
PLOT_BIT            = $0ACD =  2765          LCD.asm:1173
PLOT_BYTE           = $0AB6 =  2742          LCD.asm:1153
PLOT_COLUMN         = $08A6 =  2214          LCD.asm:732
PLOT_GRAPHIC        = $0AAC =  2732          LCD.asm:1147
PLOT_ROW            = $088E =  2190          LCD.asm:720
PLOT_TO_LCD         = $0889 =  2185          LCD.asm:717
PRINT               = $04BA =  1210          Z80MiniGame.asm:701
PRINT_CHARS         = $08DD =  2269          LCD.asm:785
PRINT_STRING        = $08BB =  2235          LCD.asm:754
PS1                 = $0996 =  2454          LCD.asm:924
RAD                 = $FB8E = 64398          Z80MiniGame.asm:977
READ_FILE           = $0217 =   535          Z80MiniGame.asm:267
READ_FILE_EXE       = $0280 =   640          Z80MiniGame.asm:333
READ_FILE_IMG       = $0296 =   662          Z80MiniGame.asm:352
READ_FILE_IMG_K     = $02AE =   686          Z80MiniGame.asm:372
READ_FILE_TXT       = $02B8 =   696          Z80MiniGame.asm:379
READ_FILE_TXT_L     = $02C6 =   710          Z80MiniGame.asm:393
READ_IIC_DE         = $02EB =   747          Z80MiniGame.asm:423
READ_MEM_FILES      = $01FF =   511          Z80MiniGame.asm:254 (unused)
READ_MEM_KEY        = $022D =   557          Z80MiniGame.asm:280
READ_MEM_NEXT       = $0202 =   514          Z80MiniGame.asm:256
READ_MEM_STEP       = $0269 =   617          Z80MiniGame.asm:314
READ_MEM_STEP_L     = $0274 =   628          Z80MiniGame.asm:322
READ_NAME           = $021F =   543          Z80MiniGame.asm:271
REMOVE_PIXEL        = $0AD7 =  2775          LCD.asm:1179
ROWS                = $0B21 =  2849          LCD.asm:1295
RST00               = $0000 =     0          Z80MiniGame.asm:91
RST08               = $0008 =     8          Z80MiniGame.asm:98 (unused)
RST10               = $0010 =    16          Z80MiniGame.asm:104 (unused)
RST38               = $0038 =    56          Z80MiniGame.asm:110 (unused)
SAVE_COL            = $0A68 =  2664          LCD.asm:1083
SAVE_ROW            = $0A09 =  2569          LCD.asm:1017
SAVE_VPORT          = $0A53 =  2643          LCD.asm:1066
SBUF                = $0780 =  1920          Z80MiniGame.asm:965
SEND_A_TO_GLCD      = $09AE =  2478          LCD.asm:942
SEND_CHAR_TO_GLCD   = $0926 =  2342          LCD.asm:854
SEND_HL_TO_GLCD     = $09CB =  2507          LCD.asm:965
SEND_PART           = $0B08 =  2824          LCD.asm:1261
SEND_STRING_TO_GLCD = $0995 =  2453          LCD.asm:922
SER_BT              = $00F8 =   248          LCD.asm:61 (unused)
SER_BYTE            = $0AFF =  2815          LCD.asm:1253 (unused)
SER_SYNC            = $0B0D =  2829          LCD.asm:1268
SETCY               = $050E =  1294          Z80MiniGame.asm:783
SET_BUF_CLEAR       = $0905 =  2309          LCD.asm:818
SET_BUF_NO_CLEAR    = $090D =  2317          LCD.asm:823
SET_CURSOR          = $09D7 =  2519          LCD.asm:978
SET_GBUF            = $086A =  2154          LCD.asm:687
SET_GR_MODE         = $066C =  1644          LCD.asm:239
SET_TXT_MODE        = $0676 =  1654          LCD.asm:246
SHIFT_BIT           = $0883 =  2179          LCD.asm:709
SHIFT_BUFFER        = $0A0D =  2573          LCD.asm:1024
SHOW_MSG_EXE        = $02D6 =   726          Z80MiniGame.asm:406
SHOW_MSG_IMG        = $02DD =   733          Z80MiniGame.asm:411
SHOW_MSG_TXT        = $02E4 =   740          Z80MiniGame.asm:416
SIOA_C              = $0002 =     2          Z80MiniGame.asm:60
SIOA_D              = $0000 =     0          Z80MiniGame.asm:59
SIOB_C              = $0003 =     3          Z80MiniGame.asm:62 (unused)
SIOB_D              = $0001 =     1          Z80MiniGame.asm:61 (unused)
SKIP_TBUF           = $0A21 =  2593          LCD.asm:1035
SPACE               = $0020 =    32          LCD.asm:69
SPI_WR              = $0B0E =  2830          LCD.asm:1278
SX                  = $FB86 = 64390          Z80MiniGame.asm:972
SY                  = $FB87 = 64391          Z80MiniGame.asm:973
SYSTEM_SP           = $FFF0 = 65520          Z80MiniGame.asm:77
TAB                 = $0009 =     9          LCD.asm:65
TBUF                = $FB82 = 64386          Z80MiniGame.asm:970
TEST_KEYS           = $03CF =   975          Z80MiniGame.asm:557
TGBUF               = $F780 = 63360          Z80MiniGame.asm:968
TIMEOUT             = $2710 = 10000          Z80MiniGame.asm:84
TXCRLF              = $04C1 =  1217          Z80MiniGame.asm:708
UP                  = $00B5 =   181          LCD.asm:62
VPORT               = $FB80 = 64384          Z80MiniGame.asm:969
V_DELAY_US          = $0010 =    16          LCD.asm:53
WELLCOME            = $131F =  4895          Z80MiniGame.asm:945
WELLCOME_LCD        = $1339 =  4921          Z80MiniGame.asm:947
_end                = $FB9C = 64412          Z80MiniGame.asm:90 (unused)
_size               = $FB9C = 64412          Z80MiniGame.asm:90 (unused)
_z80_               = $0001 =     1          Z80MiniGame.asm:1 (unused)
check_keypad        = $039C =   924          Z80MiniGame.asm:531
conin               = $04D2 =  1234          Z80MiniGame.asm:725
conout              = $04C8 =  1224          Z80MiniGame.asm:718
conoutA1            = $04C9 =  1225          Z80MiniGame.asm:719
kCPUClock           = $8000 =7372800          Z80MiniGame.asm:67
kDelayCnt           = $011A =   282          Z80MiniGame.asm:72
kDelayLP            = $001A =    26          Z80MiniGame.asm:69
kDelayOH            = $0024 =    36          Z80MiniGame.asm:68
kDelayTA            = $1CCC =  7372          Z80MiniGame.asm:70
kDelayTB            = $1CA8 =  7336          Z80MiniGame.asm:71
monitor             = $01D3 =   467          Z80MiniGame.asm:217
monitor0            = $01D7 =   471          Z80MiniGame.asm:220
monitor1            = $01DD =   477          Z80MiniGame.asm:225
msg_help            = $12A2 =  4770          Z80MiniGame.asm:927
read_loop           = $0243 =   579          Z80MiniGame.asm:294
setup_serial        = $0494 =  1172          Z80MiniGame.asm:662
start               = $019A =   410          Z80MiniGame.asm:184
waitForChar         = $04D2 =  1234          Z80MiniGame.asm:726


total time: 0.1206 sec.
no errors
