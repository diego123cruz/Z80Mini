; =======================================
; Blink
.org $8000
 
loop:
    LD A, $00
    
    LD C, $06 ; outPort Write
    RST $30
    
    LD DE, $0400 ; 1000 ms
    LD C, $04 ; delay
    RST $30
    
    
    LD A, $FF
    LD C, $06 ; outPort Write
    RST $30
    
    LD DE, $0400 ; 1000 ms
    LD C, $04 ; delay
    RST $30
    
    JP loop

:108000003E000E06F71100040E04F73EFF0E06F7C1
:098010001100040E04F7C3008006
:00000001FF



; =======================================
; Led biColor - Shift 
.org $8000
    ld a, 1
loop:
    rlc a
    out(0), a
    call delay
    jp loop
    
    
delay:
    PUSH AF
    LD DE, $00C8 ; 200ms
    LD C, $04
    RST $30
    POP AF
    RET

:108000003E01CB07D300CD0C80C30280F511C80020
:058010000E04F7F1C9A8
:00000001FF



;=======================================
; Input keyboard To Output port
.org $8000

    
loop:
    LD A, $00
    
    LD C, $01 ; Input keyboard
    RST $30
    
    LD C, $06 ; outPort Write
    RST $30
    
    JP loop

:0B8000003E000E01F70E06F7C30080E3
:00000001FF




;=======================================
; Read PCF8574 (I2C port $40) and show in LCD
.org $8000

loop:
    LD A, $40+1
    LD C, $10 ; i2c open
    RST $30
    
    LD C, $12 ; i2c read
    RST $30
    
    PUSH AF ; save A
    
    LD C, $11 ; i2c close
    RST $30
    
    POP AF
    
    CALL BYTASC
    
    LD A, $0D
    LD C, $02 ; display char lcd
    RST $30
    
    JP loop
    
;----------------
;CONVERT TO ASCII 
;----------------
;
;CONVERT A BYTE TO ASCII 
;
BYTASC: PUSH  AF          ;SAVE A FOR SECOND NYBBLE 
       RRCA              ;SHIFT HIGH NYBBLE ACROSS
       RRCA
       RRCA
       RRCA
       CALL NYBASC       ;CALL NYBBLE CONVERTER 
       POP AF            ;RESTORE LOW NYBBLE
;           
; CONVERT A NYBBLE TO ASCII
;
NYBASC: AND   0FH         ;MASK OFF HIGH NYBBLE 
       ADD   A,90H       ;CONVERT TO
       DAA               ;ASCII
       ADC   A,40H
       DAA
;            
; Print inlcd
;
    LD C, $02 ; display char lcd
    RST $30
    RET 


:108000003E410E10F70E12F7F50E11F7F1CD188064
:108010003E0D0E02F7C30080F50F0F0F0FCD21802C
:0D802000F1E60FC69027CE40270E02F7C9EB
:00000001FF



;=======================================
; Read Encoder I2c and show in LCD
.org $8000

loop:
    LD A, $10
    LD C, $10 ; i2c open
    RST $30
    
    LD A, $01
    LD C, $13 ; i2c write
    RST $30
    
    LD A, $10+1
    LD C, $10 ; i2c open
    RST $30
    
    LD C, $12 ; i2c read
    RST $30
    
    PUSH AF
    
    LD C, $11 ; i2c close
    RST $30
    
    POP AF
    CALL BYTASC
    
    LD a, $0D
    LD C, $02 ; display char lcd
    RST $30
    
    JP loop
    
    
;----------------
;CONVERT TO ASCII 
;----------------
;
;CONVERT A BYTE TO ASCII 
;
BYTASC: PUSH  AF          ;SAVE A FOR SECOND NYBBLE 
       RRCA              ;SHIFT HIGH NYBBLE ACROSS
       RRCA
       RRCA
       RRCA
       CALL NYBASC       ;CALL NYBBLE CONVERTER 
       POP AF            ;RESTORE LOW NYBBLE
;           
; CONVERT A NYBBLE TO ASCII
;
NYBASC: AND   0FH         ;MASK OFF HIGH NYBBLE 
       ADD   A,90H       ;CONVERT TO
       DAA               ;ASCII
       ADC   A,40H
       DAA
;            
; Print inlcd
;
    LD C, $02 ; display char lcd
    RST $30
    RET 



:108000003E100E10F73E010E13F73E110E10F70E44
:1080100012F7F50E11F7F1CD22803E0D0E02F7C3D7
:108020000080F50F0F0F0FCD2B80F1E60FC69027C4
:07803000CE40270E02F7C944
:00000001FF


;=======================================
; Read I2C (Encoder, pot, irLine) and show in LCD
.org $8000
.org $8000

loop:

    ; Encoder
    LD A, $10
    LD C, $10 ; i2c open
    RST $30
    
    LD A, $01
    LD C, $13 ; i2c write
    RST $30
    
    LD A, $10+1
    LD C, $10 ; i2c open
    RST $30
    
    LD C, $12 ; i2c read
    RST $30
    
    PUSH AF
    
    LD C, $11 ; i2c close
    RST $30
    
    POP AF
    CALL BYTASC
    
    LD a, ' '
    LD C, $09 ; display char lcd
    RST $30
    
    
    ; Pot
    LD A, $10
    LD C, $10 ; i2c open
    RST $30
    
    LD A, $04
    LD C, $13 ; i2c write
    RST $30
    
    LD A, $10+1
    LD C, $10 ; i2c open
    RST $30
    
    LD C, $12 ; i2c read
    RST $30
    
    PUSH AF
    
    LD C, $11 ; i2c close
    RST $30
    
    POP AF
    CALL BYTASC
    
    LD a, ' '
    LD C, $09 ; display char lcd
    RST $30
    
    
    ; iR line
    LD A, $10
    LD C, $10 ; i2c open
    RST $30
    
    LD A, $05
    LD C, $13 ; i2c write
    RST $30
    
    LD A, $10+1
    LD C, $10 ; i2c open
    RST $30
    
    LD C, $12 ; i2c read
    RST $30
    
    PUSH AF
    
    LD C, $11 ; i2c close
    RST $30
    
    POP AF
    CALL BYTASC
    
    LD a, $0D
    LD C, $02 ; display char lcd
    RST $30
    
    JP loop
    
    
;----------------
;CONVERT TO ASCII 
;----------------
;
;CONVERT A BYTE TO ASCII 
;
BYTASC: PUSH  AF          ;SAVE A FOR SECOND NYBBLE 
       RRCA              ;SHIFT HIGH NYBBLE ACROSS
       RRCA
       RRCA
       RRCA
       CALL NYBASC       ;CALL NYBBLE CONVERTER 
       POP AF            ;RESTORE LOW NYBBLE
;           
; CONVERT A NYBBLE TO ASCII
;
NYBASC: AND   0FH         ;MASK OFF HIGH NYBBLE 
       ADD   A,90H       ;CONVERT TO
       DAA               ;ASCII
       ADC   A,40H
       DAA
;            
; Print inlcd
;
    LD C, $09 ; display char lcd
    RST $30
    RET 


:108000003E100E10F73E010E13F73E110E10F70E44
:1080100012F7F50E11F7F1CD60803E200E09F73E04
:10802000100E10F73E040E13F73E110E10F70E124D
:10803000F7F50E11F7F1CD60803E200E09F73E10E6
:108040000E10F73E050E13F73E110E10F70E12F745
:10805000F50E11F7F1CD60803E0D0E02F7C30080E2
:10806000F50F0F0F0FCD6980F1E60FC69027CE40B8
:05807000270E09F7C90D
:00000001FF





; =======================================
; TIME - Show time (RTC - Ricoh r223) onboard to display
.org $8000
loop:
    LD A, $00 ; limpa sem atualizar o lcd
    LD C, $0B ; limpa buffer
    RST $30
    
    LD DE, $0604 ; set X=6, Y=4
    LD C, $0D ; set cursor text
    RST $30
    
    ; Hora
    LD A, $64 ; To read is equal address +1
    LD C, $10 ; I2C open, device id in A
    RST $30 
    
    LD A, $20  ; register
    LD C, $13
    RST $30 ;I2C Write, value in A
    
    LD A, $64+1 ; To read is equal address +1
    LD C, $10 ; I2C open, device id in A
    RST $30 
    
    LD C, $12 ; I2C Read, return in A
    RST $30 
    
    PUSH AF
    
    LD C, $11 ; I2C Close
    RST $30  
    
    POP AF
    
    CALL lcd_print_data ; send A to display
    LD A, ':'
    CALL display ; send
    
    
    ;Minutos
    LD A, $64 ; To read is equal address +1
    LD C, $10 ; I2C open, device id in A
    RST $30 
    
    LD A, $10  ; register
    LD C, $13
    RST $30 ;I2C Write, value in A
    
    LD A, $64+1 ; To read is equal address +1
    LD C, $10 ; I2C open, device id in A
    RST $30 
    
    LD C, $12 ; I2C Read, return in A
    RST $30 
    
    PUSH AF
    
    LD C, $11 ; I2C Close
    RST $30  
    
    POP AF
    
    CALL lcd_print_data ; send A to display
    LD A, ':'
    CALL display ; send
    
    
    ;segundos
    LD A, $64 ; To read is equal address +1
    LD C, $10 ; I2C open, device id in A
    RST $30 
    
    LD A, $00  ; register
    LD C, $13
    RST $30 ;I2C Write, value in A
    
    LD A, $64+1 ; To read is equal address +1
    LD C, $10 ; I2C open, device id in A
    RST $30 
    
    LD C, $12 ; I2C Read, return in A
    RST $30 
    
    PUSH AF
    
    LD C, $11 ; I2C Close
    RST $30  
    
    POP AF
    
    CALL lcd_print_data ; send A to display
    
    LD C, $0C
    RST $30 ;  show buffer to LCD
    
    
    JP loop
    
    
lcd_print_data:
	push bc
    push af
    ld b, a
    and 11110000b
    rlca
    rlca
    rlca
    rlca
    add a, '0'
    cp '9' + 1
    jr c, print_12
    add a, 'A' - '0' - 10
print_12:
    CALL display ; send to lcd
    ld a, b
    and 00001111b
    add a, '0'
    cp '9' + 1
    jr c, print_22
    add a, 'A' - '0' - 10
print_22:
    CALL display ; send to lcd
    pop bc
    pop af
    ret
    
display:
    PUSH AF
    PUSH BC
    
    LD C, $09
    RST $30 ; send to lcd
    
    POP BC
    POP AF
    RET
    
:108000003E000E0BF71104060E0DF73E640E10F73E
:108010003E200E13F73E650E10F70E12F7F50E1107
:10802000F7F1CD69803E3ACD8E803E640E10F73E6A
:10803000100E13F73E650E10F70E12F7F50E11F73E
:10804000F1CD69803E3ACD8E803E640E10F73E0041
:108050000E13F73E650E10F70E12F7F50E11F7F13D
:10806000CD69800E0CF7C30080C5F547E6F0070721
:108070000707C630FE3A3802C607CD8E8078E60F75
:10808000C630FE3A3802C607CD8E80C1F1C9F5C5AB
:068090000E09F7C1F1C961
:00000001FF







; ---------------------------------------
; Teste Display SSD1306 - I2C
; --------------------------------------

.org $8000

inicio:
    ; display on
    LD a, $AF
    CALL send_cmd
    
    ; set display normal
    LD a, $A6
    CALL send_cmd
    
    ; Page mode
    LD a, $02
    CALL send_cmd
    
    ; Charge Pump
    LD a, $8d
    CALL send_cmd
    
    LD a, $14
    CALL send_cmd
    
    
    
    LD a, $00
    LD ($9001), a
    
loop:
    ; set cursor 0,0
    LD a, $00       ; set column lower address
    CALL send_cmd
    
    LD a, $10       ; set column higher address
    CALL send_cmd
    
    LD a, $B0       ; set page address
    CALL send_cmd
    
    
    LD a, $B0 ; page 0
    LD ($9000), a
    
loop_clear:
    ; set cursor 0,0
    LD a, $00       ; set column lower address
    CALL send_cmd
    
    LD a, $10       ; set column higher address
    CALL send_cmd
    
    LD a, ($9000)       ; set page address
    CALL send_cmd
    
    

    LD BC, $80
loop_clear_line:
    PUSH BC
    CALL delay
    LD a, ($9001)
    CALL send_data
    
    POP BC
    DEC  BC           
    LD   A,C           
    OR   B              
    JP   NZ, loop_clear_line
    
    

    LD a, ($9000)
    inc a
    LD ($9000), a
    CP $B8
    jp NZ, loop_clear
    
    
    
    
    ld a, ($9001)
    inc a
    ld ($9001), a
    JP loop



delay:
    NOP
    RET
    LD DE, $0F
    LD C, $04 ; delay
    RST $30
    RET


; command in A
send_cmd:
    PUSH AF
    LD A, $78
    LD C, $10 ; i2c open
    RST $30
    
    LD A, $80
    LD C, $13 ; i2c write
    RST $30
    
    POP AF
    LD C, $13 ; i2c write
    RST $30
    
    LD C, $11 ; i2c close
    RST $30
    RET
    
; data in A
send_data:
    PUSH AF
    LD A, $78
    LD C, $10 ; i2c open
    RST $30
    
    LD A, $40
    LD C, $13 ; i2c write
    RST $30
    
    POP AF
    LD C, $13 ; i2c write
    RST $30
    
    LD C, $11 ; i2c close
    RST $30
    RET


:108000003EAFCD75803EA6CD75803E02CD75803EDB
:108010008DCD75803E14CD75803E003201903E00BE
:10802000CD75803E10CD75803EB0CD75803EB032AE
:1080300000903E00CD75803E10CD75803A0090CD09
:108040007580018000C5CD6C803A0190CD8880C1DB
:108050000B79B0C245803A00903C320090FEB8C225
:1080600032803A01903C320190C31E8000C9110F4A
:10807000000E04F7C9F53E780E10F73E800E13F798
:10808000F10E13F70E11F7C9F53E780E10F73E40CA
:0B8090000E13F7F10E13F70E11F7C9E5
:00000001FF










; Print 8x8 image
; A = X,Y
; 
; xxxx xxxx
;   Y    X
;
; DE = Image to print

DISPLAY             .EQU    $F000 ; 1024 bytes
clear8x8            .EQU    $013F
print8x8            .EQU    $013C
DisplayImage128x64  .EQU    $011E
BufferImage128x64   .EQU    $012A

.org $8000

inicio:
    LD DE, $0100
    CALL DisplayImage128x64
    
    CALL delay
    
    LD A, $00  ; X = (0-15), Y = (0-7)
    LD DE, image_open
    CALL print8x8
    CALL show_lcd
    CALL delay
    
    LD A, $00
loop:
    INC A
    PUSH AF
    PUSH AF
    DEC A
    CALL clear8x8
    POP AF
    LD DE, image_close
    CALL print8x8
    CALL show_lcd
    CALL delay
    POP AF
    
    INC A
    PUSH AF
    PUSH AF
    DEC A
    CALL clear8x8
    POP AF
    LD DE, image_open
    CALL print8x8
    CALL show_lcd
    CALL delay
    POP AF
    CP $80
    JP Z, $00
    jp loop


; show buffer to lcd
show_lcd:
    ld c, $0C
    RST $30
    RET
    
delay:
    LD DE, $FF
    LD C, $04 ; delay
    RST $30
    RET
    
image_open:  .db 0x3E, 0x41, 0x92, 0x84, 0x88, 0x86, 0x41, 0x3E
image_close: .db 0x3C, 0x42, 0x91, 0x81, 0x8E, 0x81, 0x42, 0x3C


:10800000110001CD1E01CD4F803E00115680CD3CA8
:1080100001CD4B80CD4F803E003CF5F53DCD3F017D
:10802000F1115E80CD3C01CD4B80CD4F80F13CF510
:10803000F53DCD3F01F1115680CD3C01CD4B80CDBA
:108040004F80F1FE80CA0000C319800E0CF7C911E1
:10805000FF000E04F7C93E4192848886413E3C42AF
:0680600091818E81423C7B
:00000001FF










